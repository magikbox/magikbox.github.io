{"componentChunkName":"component---src-templates-post-js","path":"/blog/finding-needles-in-haystacks/","result":{"data":{"ghostPost":{"id":"Ghost__Post__5ecb5f6b7aa22c4066f83edf","title":"Finding Needles in Haystacks","slug":"finding-needles-in-haystacks","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_Y5n8UwfW38RLuhXQ4wwOmg-1.jpeg","excerpt":"How Gojek‚Äôs Magneto team is building products to help automate discovery of top candidates at scale.","custom_excerpt":"How Gojek‚Äôs Magneto team is building products to help automate discovery of top candidates at scale.","visibility":"public","created_at_pretty":"25 May, 2020","published_at_pretty":"08 November, 2019","updated_at_pretty":"25 May, 2020","created_at":"2020-05-25T11:32:19.000+05:30","published_at":"2019-11-08T09:30:00.000+05:30","updated_at":"2020-05-25T11:55:03.000+05:30","meta_title":"Finding Needles in Haystacks ","meta_description":"How Gojek‚Äôs Magneto team is building products to help automate discovery of top candidates at scale.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"\nBy Atif Haider\n\nIn just a few years, Gojek has grown from a small startup aggregating ojeks to a\nSuper App that does over 200 million completed orders a month.\n\nMost importantly, we‚Äôve managed to scale our systems with a relatively lean team\nof engineers. However, in order to sustain this growth, we need to keep adding\nquality engineering talent to our ranks. To help with this, we rely on our\nin-house recruiters, who‚Äôve been doing a phenomenal job. üëå\n\n> But the question remains ‚Äî how do we continue to keep this up at scale?\nWe‚Äôve been trying to find a solution to this question, and as is usually the\ncase when it comes to Gojek, the answer lies in innovation. Just like every\nother domain we operate in, we needed to innovate in tech recruitment as well.\n\nWhen our team joined Gojek\n[https://blog.gojekengineering.com/gojek-acquires-aircto-expands-operations-in-india-d685c0b4db1c]\n, we had one clear objective ‚Äî apply the learnings from our previous startup to\nhelp Gojek find innovative ways to hire top engineering talent.\n\nThis is the story of how we‚Äôre doing it.\n\nEarly Days and Finding Our North star\nIn the first two weeks after we joined, we consulted with engineering heads,\ntech recruiters, and the India Inbound Marketing team. Over the course of\ncomparing notes from many meetings, we hoped to find patterns in how Gojek\nhired, and how we could automate the discovery of more people with similar\ntraits. Undertaking this exercise was at once a rewarding and challenging\nexperience for our team.\n\nWe got interesting insights, but also ran into conflicting data. Gojek had also\nrecently switched to a new Application Tracking Service (ATS), which brought its\nown set of unknowns. Navigating these unknowns and changing processes in an\norganisation with many fast-moving parts was our first order of business. In\nbetween all this, finding the formula for the kind of candidates we were looking\nfor was like looking for a needle in a haystack. Most of the problems that we\nidentified at these meetings turned out to be operational issues ‚Äî an insight\nprovided by our India MD, Sidu Ponnappa.\n\nMeanwhile, we needed a name for our team which people could use to identify us.\nWe named ourselves Magneto. To achieve our task of finding top developers, we\nwould need the superhuman power of attraction.\n\nTesting Our Powers\nGojek has a rigorous interview process, and we are picky about who we hire, to\nthe point where even people outside of Gojek know how tough it is to get in.\n\n> Hoardings, Metro Wraps, Radio Ads by @gojektech\n[https://twitter.com/gojektech?ref_src=twsrc%5Etfw] to hire in Gurgaon are hard\nto miss - \nand have heard that their selection process is one of the rigorous ones so don‚Äôt\nassume they are desperate to hire anyone who applies üòÑ\n\n‚Äî deepakabbot (@deepakabbot) September 25, 2019\n[https://twitter.com/deepakabbot/status/1176710364030881797?ref_src=twsrc%5Etfw]\nWe did get one key takeaway though. All our tests and questions are designed to\nidentify a few common traits:\n\n> In a nutshell, we‚Äôre biased towards developers who are hands-on and can code;\nirrespective of their prior experience and pedigree.\nAnother interesting fact: according to our internal data, a whopping 50% of\ncandidates who go through our interview process fail the first test assignment\nround. üòÆ\n\nI was surprised to see candidates from top product companies unable to get\nthrough this round.\n\nAfter looking at this daunting drop-off data, and acknowledging that we were\nvery new to Gojek‚Äôs hiring process, we decided to take baby steps. The goal: \nhire 1 engineer for GoFood. We also set up some key results to track back\ntowards our objective.\n\nCrafting A Solution\nWe knew we needed to find top developers who could make it through our\nrecruitment process, and then reach out to them to check if they would be\ninterested in joining us.\n\n> So we made this theme a problem statement, and divided it into two parts:\n> 1. Discover\n> 2. Nurture\nAs a first step, we pulled out profiles of engineers we hired from Lever (our\nApplication Tracking Service) and found many of them to be active on\ncode-related online digital platforms that reflect their passion for\nprogramming.\n\n> We finally knew where to start looking for our needle.\nOur first stop was the most obvious one ‚Äî Github. Then we went to StackOverflow\nand finally, Twitter. StackOverflow itself hosts over 10 million developers.\n\nStackOverflow StatsThere‚Äôs a lot of publicly available information on these\nplatforms, so we wrote a bunch of scripts to pull info about developers from\nGithub and StackOverflow. Then we tried to map their skills, contributions,\npopularity, and activities.\n\nWe wrote custom algorithms for Github and StackOverflow to classify developers\nas qualified and unqualified, based on the criteria we were looking for. We\nlooked at various signals to check their passion for programming, and they\npassed a certain pre-defined threshold, we would mark them as qualified.\n\nOnce a candidate is qualified, we needed to categorise them based on skills,\nexperience, location, and other parameters. This step also involved some manual\nwork to clean up the data.\n\nIn order to meet our first objective, we picked around 800 candidates and\nreached out to them through personalised email campaigns. Since our team was\nquite comfortable using Python, we used Python on top of PostgreSQL to write the\nNurture system to run these email campaigns (despite Python not being part of\nGojek‚Äôs core tech stack).\n\nThe Discover <> Nurture FlowSmelling success\nAfter rigorous follow-ups, we ended up getting a decent number of interested\ncandidates, whom we then contacted for exploratory conversations.\n\nThis was quite the enlightening experience ‚Äî and we realised Gojek is perceived\nas a highly tech-oriented company among developers.\n\n> Over 62% of the candidates who submitted the test assignment cleared it, and by\nthe time we finished the first cohort, we ended up hiring 3 devs.\nWe exceeded our target by 300%. üôå\n\nThe smile of successAutomation FTW\nAs we succeeded in demonstrating the viability of our MVP, we had to look at the\nproblem statement again and translate it into a scalable system. Tackling scale\nhas always been a part of Gojek‚Äôs journey to #SuperApp status, so we decided to\nbe prepared.\n\nWhile scaling the Candidate Discovery Process, we ran into two issues:\n\n 1. Since the discovery level was managed on spreadsheets, it required a massive\n    manual effort to keep the data unique between each service.\n 2. Getting candidate info from different sources required a lot of data-sharing\n    on multiple platforms. The result ‚Äî repetitive processes and data\n    duplication. ü§¶‚Äç‚ôÇÔ∏è\n\nConsidering these challenges, we divided the process into 3 different layers:\n\n 1. Service layer: Contains individual micro-service which has single behaviour\n    ‚Äî fetch details from a specific source and score, classify, and merge them\n    based on the data available on different mediums about a candidate.\n 2. Messaging layer: At any point in time, any individual service can connect to\n    other services to fetch more information about the candidate. For instance,\n    while parsing StackOverflow users, we get the user‚Äôs website and Github\n    URLs. So, the StackOverflow service will publish candidate‚Äôs Github social\n    id and website URL to the Github and WebScrapper services respectively. This\n    information about the candidate is then written to the database.\n 3. Data layer: It is a centralised MongoDB that stores all the data (even if\n    it‚Äôs incomplete) from different sources, which can further be pushed to\n    Nurture once it is verified.\n\nWe also dockerized all these micro-services, integrated monitoring (Prometheus),\nSlack alerts & logging (Barito [https://github.com/BaritoLog/wiki] ‚Äî thanks to\nour Barito team for offering a powerful logging system).\n\nWith this automated system, we processed over 38,000 tech candidates‚Äô profiles\nin a very short time, and found around 10,000 qualified candidates who passed\nour custom criteria.\n\nThis was our Aha! Moment.\n\nWith automation, we managed to make 13 offers to developers in a very short span\nof time, 6 of whom have already joined us.\n\nLaunching Fount\nSo far we had been the customers of our own product. But this needed to be\nbigger. We needed to get our product out to our internal recruiters to use.\n\n> However, there was one problem.\nThe Nurture system was written in Python, and we primarily use Ruby, Go, Java,\nand Clojure at Gojek. When you rely on tech stack not extensively used by the\nlarger org, you end up building your own tooling systems to test and deploy on\nthe existing infrastructure (which is already stable and working for other\nteams).\n\nTherefore, we decided to re-write the Nurture system in Clojure. I had prior\nexperience of writing programs in Common Lisp & Clojure. To my surprise, the\nteam was also excited to try out functional programming (I will soon write a\nseparate article on our experience in building API in Clojure. Pinky promise!).\n\nThere were a few hiccups in getting things moving around the infra and security\nsystems, but that was a given considering we were fairly new to the existing\ninfrastructure. We built the Nurture API in Clojure and a frontend in Reactjs.\nIn 30 days, we were up and running with our product.\n\n> We call it Fount.\nFount lists all the qualified discovered candidates; leads our recruiters can\nthen follow up on to check their interest and move into our hiring funnel.\nCurrently, a few beta users (our internal tech recruiters) are trying out the\nsystem. üññ\n\nWe have already redesigned Fount and this is how it looks now. Thanks to Asphalt\n[https://asphalt.gojek.io/]‚Äî our very own design system at Gojek.\n\nAI Powered Candidate Discovery PlatformThe Way Forward\nThis was just the first step in our journey of streamlining recruitment at\nGojek. We‚Äôre planning to improve our sourcing algorithms, find new sources,\nimprove the candidate verification process, and build new features on Fount.\n\nWe‚Äôre also going to attack different tech recruiting problems and bring\nautomation wherever possible in order to hire top developers (and offer up a\ngreat candidate experience).\n\nThat‚Äôs all from us for now. We‚Äôd love to hear your feedback in the comments.\n\nFor Gojek updates delivered straight to your inbox, sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\ngojek.jobs [http://bit.ly/2PZliiS]","html":"<p><br>By Atif Haider</p><p>In just a few years, Gojek has grown from a small startup aggregating <em><em>ojeks</em></em> to a Super App that does over 200 million completed orders a month.</p><p>Most importantly, we‚Äôve managed to scale our systems with a relatively lean team of engineers. However, in order to sustain this growth, we need to keep adding quality engineering talent to our ranks. To help with this, we rely on our in-house recruiters, who‚Äôve been doing a phenomenal job. üëå</p><blockquote><strong>But the question remains ‚Äî how do we continue to keep this up at scale?</strong></blockquote><p>We‚Äôve been trying to find a solution to this question, and as is usually the case when it comes to Gojek, the answer lies in innovation. Just like every other domain we operate in, we needed to innovate in tech recruitment as well.</p><p>When our team <a href=\"https://blog.gojekengineering.com/gojek-acquires-aircto-expands-operations-in-india-d685c0b4db1c\" rel=\"noopener\">joined Gojek</a>, we had one clear objective ‚Äî apply the learnings from our previous startup to help Gojek find innovative ways to hire top engineering talent.</p><p>This is the story of how we‚Äôre doing it.</p><h3 id=\"early-days-and-finding-our-north-star\">Early Days and Finding Our North star</h3><p>In the first two weeks after we joined, we consulted with engineering heads, tech recruiters, and the India Inbound Marketing team. Over the course of comparing notes from many meetings, we hoped to find patterns in how Gojek hired, and how we could automate the discovery of more people with similar traits. Undertaking this exercise was at once a rewarding and challenging experience for our team.</p><p>We got interesting insights, but also ran into conflicting data. Gojek had also recently switched to a new Application Tracking Service (ATS), which brought its own set of unknowns. Navigating these unknowns and changing processes in an organisation with many fast-moving parts was our first order of business. In between all this, finding the formula for the kind of candidates we were looking for was like looking for a needle in a haystack. Most of the problems that we identified at these meetings turned out to be operational issues ‚Äî an insight provided by our India MD, Sidu Ponnappa.</p><p>Meanwhile, we needed a name for our team which people could use to identify us. We named ourselves <strong><strong>Magneto</strong></strong>. To achieve our task of finding top developers, we would need the superhuman power of attraction.</p><h3 id=\"testing-our-powers\">Testing Our Powers</h3><p>Gojek has a rigorous interview process, and we are picky about who we hire, to the point where even people outside of Gojek know how tough it is to get in.</p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\" data-width=\"550\"><p lang=\"en\" dir=\"ltr\">Hoardings, Metro Wraps, Radio Ads by <a href=\"https://twitter.com/gojektech?ref_src=twsrc%5Etfw\">@gojektech</a> to hire in Gurgaon are hard to miss - <br>and have heard that their selection process is one of the rigorous ones so don‚Äôt assume they are desperate to hire anyone who applies üòÑ</p>&mdash; deepakabbot (@deepakabbot) <a href=\"https://twitter.com/deepakabbot/status/1176710364030881797?ref_src=twsrc%5Etfw\">September 25, 2019</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><p>We did get one key takeaway though. All our tests and questions are designed to identify a few common traits:</p><blockquote><em><em>In a nutshell, we‚Äôre biased towards developers who are hands-on and can code; irrespective of their prior experience and pedigree.</em></em></blockquote><p>Another interesting fact: according to our internal data, a whopping 50% of candidates who go through our interview process <strong><strong><em><em>fail the first test assignment round</em></em></strong></strong>. üòÆ</p><p>I was surprised to see candidates from top product companies unable to get through this round.</p><p>After looking at this daunting drop-off data, and acknowledging that we were very new to Gojek‚Äôs hiring process, we decided to take baby steps. The goal: <strong><strong>hire 1 engineer for GoFood. </strong></strong>We also set up some key results to track back towards our objective.</p><h3 id=\"crafting-a-solution\">Crafting A Solution</h3><p>We knew we needed to find top developers who could make it through our recruitment process, and then reach out to them to check if they would be interested in joining us.</p><blockquote><em>So we made this theme a problem statement, and divided it into two parts:</em></blockquote><blockquote><em><em><em>1. Discover</em></em></em></blockquote><blockquote><em><em><em>2. Nurture</em></em></em></blockquote><p>As a first step, we pulled out profiles of engineers we hired from Lever (our Application Tracking Service) and found many of them to be active on code-related online digital platforms that reflect their passion for programming.</p><blockquote>We finally knew where to start looking for our needle.</blockquote><p>Our first stop was the most obvious one ‚Äî Github. Then we went to StackOverflow and finally, Twitter. StackOverflow itself hosts over 10 million developers.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_KbHxqGC8qosP6HE99pLzKQ.png\" class=\"kg-image\"><figcaption><em>StackOverflow Stats</em></figcaption></figure><p>There‚Äôs a lot of publicly available information on these platforms, so we wrote a bunch of scripts to pull info about developers from Github and StackOverflow. Then we tried to map their skills, contributions, popularity, and activities.</p><p>We wrote custom algorithms for Github and StackOverflow to classify developers as qualified and unqualified, based on the criteria we were looking for. We looked at various signals to check their passion for programming, and they passed a certain pre-defined threshold, we would mark them as qualified.</p><p>Once a candidate is qualified, we needed to categorise them based on skills, experience, location, and other parameters. This step also involved some manual work to clean up the data.</p><p>In order to meet our first objective, we picked around 800 candidates and reached out to them through personalised email campaigns. Since our team was quite comfortable using Python, we used Python on top of PostgreSQL to write the Nurture system to run these email campaigns (despite Python not being part of Gojek‚Äôs core tech stack).</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_GHx2ht682c0V23r-Bk5pvA.jpeg\" class=\"kg-image\"><figcaption>The Discover &lt;&gt; Nurture Flow</figcaption></figure><h3 id=\"smelling-success\">Smelling success</h3><p>After rigorous follow-ups, we ended up getting a decent number of interested candidates, whom we then contacted for exploratory conversations.</p><p>This was quite the enlightening experience ‚Äî and we realised Gojek is perceived as a highly tech-oriented company among developers.</p><blockquote>Over 62% of the candidates who submitted the test assignment cleared it, and by the time we finished the first cohort, we ended up hiring 3 devs.</blockquote><p>We exceeded our target by 300%. üôå</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_rjDDcWnOZeFFDRZdM-FCdQ.jpeg\" class=\"kg-image\"><figcaption>The smile of success</figcaption></figure><h3 id=\"automation-ftw\">Automation FTW</h3><p>As we succeeded in demonstrating the viability of our MVP, we had to look at the problem statement again and translate it into a scalable system. Tackling scale has always been a part of Gojek‚Äôs journey to #SuperApp status, so we decided to be prepared.</p><p>While scaling the Candidate Discovery Process, we ran into two issues:</p><ol><li>Since the discovery level was managed on spreadsheets, it required a massive manual effort to keep the data unique between each service.</li><li>Getting candidate info from different sources required a lot of data-sharing on multiple platforms. The result ‚Äî repetitive processes and data duplication. ü§¶‚Äç‚ôÇÔ∏è</li></ol><p>Considering these challenges, we divided the process into 3 different layers:</p><ol><li><strong><strong>Service layer:</strong></strong> Contains individual micro-service which has single behaviour ‚Äî fetch details from a specific source and score, classify, and merge them based on the data available on different mediums about a candidate.</li><li><strong><strong>Messaging layer:</strong></strong> At any point in time, any individual service can connect to other services to fetch more information about the candidate. For instance, while parsing StackOverflow users, we get the user‚Äôs website and Github URLs. So, the StackOverflow service will publish candidate‚Äôs Github social id and website URL to the Github and WebScrapper services respectively. This information about the candidate is then written to the database.</li><li><strong><strong>Data layer:</strong></strong> It is a centralised MongoDB that stores all the data (even if it‚Äôs incomplete) from different sources, which can further be pushed to Nurture once it is verified.</li></ol><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_Aw3fPTBAj5YMdP5N2zQy9A.jpeg\" class=\"kg-image\"></figure><p>We also dockerized all these micro-services, integrated monitoring (Prometheus), Slack alerts &amp; logging (<a href=\"https://github.com/BaritoLog/wiki\" rel=\"noopener\">Barito</a> ‚Äî thanks to our Barito team for offering a powerful logging system).</p><p>With this automated system, we processed over 38,000 tech candidates‚Äô profiles in a very short time, and found around 10,000 qualified candidates who passed our custom criteria.</p><p><strong><strong><em><em>This was our Aha! Moment.</em></em></strong></strong></p><p>With automation, we managed to make 13 offers to developers in a very short span of time, 6 of whom have already joined us.</p><h3 id=\"launching-fount\">Launching Fount</h3><p>So far we had been the customers of our own product. But this needed to be bigger. We needed to get our product out to our internal recruiters to use.</p><blockquote>However, there was one problem.</blockquote><p>The Nurture system was written in Python, and we primarily use Ruby, Go, Java, and Clojure at Gojek. When you rely on tech stack not extensively used by the larger org, you end up building your own tooling systems to test and deploy on the existing infrastructure (which is already stable and working for other teams).</p><p>Therefore, we decided to re-write the Nurture system in Clojure. I had prior experience of writing programs in Common Lisp &amp; Clojure. To my surprise, the team was also excited to try out functional programming (I will soon write a separate article on our experience in building API in Clojure. Pinky promise!).</p><p>There were a few hiccups in getting things moving around the infra and security systems, but that was a given considering we were fairly new to the existing infrastructure. We built the Nurture API in Clojure and a frontend in Reactjs. In 30 days, we were up and running with our product.</p><blockquote>We call it Fount.</blockquote><p>Fount lists all the qualified discovered candidates; leads our recruiters can then follow up on to check their interest and move into our hiring funnel. Currently, a few beta users (our internal tech recruiters) are trying out the system. üññ</p><p>We have already redesigned Fount and this is how it looks now. Thanks to <a href=\"https://asphalt.gojek.io/\" rel=\"noopener\">Asphalt </a>‚Äî our very own design system at Gojek.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_ryHN4fsHSsi0gmiDk64F7w.png\" class=\"kg-image\"><figcaption>AI Powered Candidate Discovery Platform</figcaption></figure><h3 id=\"the-way-forward\">The Way Forward</h3><p>This was just the first step in our journey of streamlining recruitment at Gojek. We‚Äôre planning to improve our sourcing algorithms, find new sources, improve the candidate verification process, and build new features on Fount.</p><p>We‚Äôre also going to attack different tech recruiting problems and bring automation wherever possible in order to hire top developers (and offer up a great candidate experience).</p><p>That‚Äôs all from us for now. We‚Äôd love to hear your feedback in the comments.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-2.png\" class=\"kg-image\"></figure><p>For Gojek updates delivered straight to your inbox, <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">sign up for our newsletter!</a></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA.jpeg\" class=\"kg-image\"><figcaption><a href=\"http://bit.ly/2PZliiS\">gojek.jobs</a></figcaption></figure>","url":"https://gojek-ghost.zysk.in/finding-needles-in-haystacks/","canonical_url":null,"uuid":"9af8fd1d-e79e-489b-8a12-c2d768446e60","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ecb5f6b7aa22c4066f83edf","reading_time":7},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}},{"node":{"name":"Maps","slug":"maps"}},{"node":{"name":"Ride Hailing","slug":"ride-hailing"}},{"node":{"name":"Software Engineering","slug":"software-engineering"}},{"node":{"name":"Startup","slug":"startup"}}]}},"pageContext":{"slug":"finding-needles-in-haystacks"}}}