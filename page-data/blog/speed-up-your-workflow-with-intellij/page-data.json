{"componentChunkName":"component---src-templates-post-js","path":"/blog/speed-up-your-workflow-with-intellij/","result":{"data":{"ghostPost":{"id":"Ghost__Post__5ecb65447aa22c4066f83f64","title":"Speed Up Your Workflow With IntelliJ","slug":"speed-up-your-workflow-with-intellij","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_ygP4I6VnLARQODtQvTzheQ.jpeg","excerpt":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","custom_excerpt":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","visibility":"public","created_at_pretty":"25 May, 2020","published_at_pretty":"27 January, 2020","updated_at_pretty":"25 May, 2020","created_at":"2020-05-25T11:57:16.000+05:30","published_at":"2020-01-27T09:30:00.000+05:30","updated_at":"2020-05-25T12:07:15.000+05:30","meta_title":"Speed Up Your Workflow With IntelliJ","meta_description":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"I do the bulk of my test automation development in Kotlin/Java or Python\nlanguages. After the programming language, a very important component for the\ndev workflow is a good IDE.\n\nPurists generally rave about the use of Editors like Sublime, VSCode or even use\nof Vim/Emacs over full-fledged IDE’s like Jetbrains IntelliJ, Pycharm or\nEclipse. However, the truth is most modern devs in this day and age use/prefer\nIDE’s for the host of convenience features, speed, and flexibility they provide.\n\nPersonally, I am a big fan of IDE’s provided by Jetbrains\n[https://www.jetbrains.com/], and they are generally my tools of choice—saving\nme a ton of time while performing refactoring and greatly decreasing development\ntime.\n\n> Not convinced yet?\nIf you’ve used IntelliJ, then ppen up IntelliJ > Help > Productivity Guide and\nsee how much time it has saved you.\n\nThis is my breakdown in the past two years:\n\nHowever,\n\n * Do we really extract the maximum juice out of these tools?\n * How many of the IDE’s features do we really use on a day-to-day basis?\n\nWell, fret not. This post will share some awesome tips that you can also follow\nto become more productive with your editors. I got to know some of these\nfeatures when the prolific Dev evangelist Hadi Hariri [https://hadihariri.com/] \nfrom Jetbrains visited Gojek [https://www.gojek.io/] Bengaluru and shared these\nduring a meetup.\n\nTo demonstrate these features, I would be using appium Java client\n[https://github.com/appium/java-client] project but the same features can be\napplied in any Java/Kotlin (IntelliJ IDEA) project of your choice or Python\nproject (In Pycharm).\n\nIdeavim\nTo start with, did you know all Jetbrains editors come with a very good VIM\nsupport via IdeaVim plugin? Vim commands are amazing.\n\nOnce you get used to them, your editing and code navigation speed is easily\nmultiplied 2X and it’s so easy to use it within IntelliJ. If you want to know\nVIM basics, I wrote a post\n[https://automationhacks.blog/2018/09/23/vim-the-editor-you-need-but-not-the-one-you-deserve/] \non it some time back.\n\nTo install this plugin, either opt for it when freshly installing IntelliJ or Go\nto preferences > Plugins and search for IdeaVim in marketplace, don't worry, you\ncan always temporarily disable it and practice first before starting to use it\nin your day to day workflow.\n\nThe most common commands that you should be aware of are mentioned right when\nyou open it.\n\nI use the IntelliJ IDEA classic keybindings, however, you should be able to\nquickly find the short cuts for these operations in the binding of your choice ( \nLook into Preferences > Keymap)\n\nSearch Shortcuts\nDouble Shift brings up the search console and this is the single place to either\n\n * Search Classes or Files (Shift + Cmd + N): with certain names in your project\n   or\n * Perform any action (Shift + Cmd + A): for example, refactoring certain\n   components inside a class\n\nYou can also easily learn the keyboard shortcuts for the common operations\nwithin the editor by seeing the shortcut right beside the command on this\nscreen. Trust me, the investment in learning these has huge payoffs.\n\n> The number of times that you avoid using the trackpad or mouse is one time less \nthat you have to context switch while coding. Believe me, that makes a\ndifference.\nSearch by file initials\nWhile trying to find a file, often we just know the name vaguely by memory. In\nSearch, it is sufficient to just mention the initials of the file and IntelliJ\nwill list out all the files which match that criteria\n\nLet’s say, for example, I want to search for all test files which start with A \nand have Test suffix, I can just enter ATes and see all the file names which\nmatch this.\n\nSearch method inside a file matching a pattern\nWhat if I want to search for all methods having find keyword inside test files\nnamed AndTes?\n\nWell you just use a dot . in these search queries and you can easily search for\neven methods inside classes based on partial pattern search.\n\nIn this case, AndTest.find would show all the methods with find keyword in them.\nNeat huh?\n\nSearch for file names inside a particular folder\nIn the example below, I am searching for file names starting with KeyE under \nnativekey folder by separating them with a forward slash /\n\nnativekey/KeyE\n\nNavigating options all within the search\nIf you type a forward slash / in the search bar, you can see different IDE\nactions that you can take right there.\n\nFind usages\nYou can quickly find out usages of a given function, class, interface, etc by\nhitting Cmd + B, This saves a ton of time over manually searching for code. You\ncan either navigate right inside the result pop up or open it in dedicated\nwindow by selecting Open in find window.\n\nWhat if I want to see all the classes and methods that are present in \nAndroidTest.java class?\n\nWe can open the Structure tab (Cmd + 7) and glance at all the available methods\nwith options to even show anonymous classes/lambdas inside the class.\n\nNow, this could be very useful when you have a long class and want to see all\nthe methods and then quickly navigate to them. Too many methods might hint at a\npotential refactoring candidate.\n\nSwitcher\nTo switch between open files and open tabs\n\nUse Ctrl + Tab and then to move down continue pressing Ctrl + Tab and to move up\nin switcher use Ctrl + Shift + Tab\n\nThis is a useful way to quickly navigate among files and menu options again\nwithout using mouse or trackpad\n\nRecent files\nYou do not need to remember what files were recently opened. To view recent\nfiles accessed, execute Cmd + E\n\nNavigation bar\nHow many times have you switched the project tree using Cmd + 1 and gone one\nlevel up to open a file? Before observing this, I know I kept on doing this\nagain and again.\n\nHowever, IntelliJ has a navigation bar on top of the editor which can be used to\nvery quickly navigate up the project tree.\n\nLive templates\nIntelliJ has a bunch of templates already created which can be quickly used to\ncreate a base skeleton code for many common constructs.\n\nIt is also aware of what type of file is currently opened and can show available\noptions by opening Cmd + J, once you select the one that you are looking for,\nexpand this code using Tab key\n\nTo open these templates and maybe even add your own, open Preferences > Editor >\nLive Templates\n\nInject language reference\nIntelliJ allows us to insert the context of a particular language and allows to\nwork with it within another file. Seems confusing? Let me explain why this is a\nsuper neat feature.\n\nLet’s assume you want to store JSON string inside a Java file. Typically Java 8\ndoes not have support for multi-line string (Added in Java 12 though\n[https://dzone.com/articles/jdk-12-raw-string-literals])\n\nYou can start with a simple string variable. Press Option + Enter and select \nInject language or reference\n\nAnd then select the file type. Let’s say JSON\n\nNow that we have provided the context, You can again press Option + Enter and\nthen select Edit JSON fragment . This opens up a new window where you can create\nand edit JSON freely and the corresponding concatenated string is automagically\ninserted.\n\nValidate regex inside the editor\nRegexes are a very powerful concept to learn and use. How many times have you\nhad to write small scratch files (or use regex sites [https://regexr.com/]) with\nbelow snippet to test whether a given string matches a regex?\n\nI have personally done this many times.\n\nclass Scratch {\npublic static void main(String[] args) {\nString regex = \"\\w+ world!\";\nString testString = \"Hello world!\";\nSystem.out.println(testString.matches(regex));\n}\n}\n\nIntelliJ makes this even easier. Given a regex, enter Option + Enter and select \nCheck RegExp\n\nEnter test strings and IntelliJ would automatically test whether the sample\nstring is a match or not. Neat right?\n\nDrop frames while debugging\nWhile developing it’s very important to be good at debugging. IntelliJ allows a\nvery rich set of inspection features to know the state of variables/classes at a\ngiven point in the code.\n\nIn this below example, we have a simple fooBar() method which is a wrapper over \nfoo and bar methods where foo has a debug point.\n\nWhat if we want to move a step back from the current frame? It turns out we can\nselect the current frame and select Drop frame and that would move the debug\nflow back to foo method.\n\nIt’s amazing how much time this saves since we do not need to rewire the\ndebugging session from scratch.\n\nHopefully, this post encouraged you to also explore the feature-rich IDEs that\nJetbrains provides, and give your automation development a literal nitro boost.\n(NFS reference anyone? 😋)\n\nWhat other IDE tricks have been lifesavers for you? Let me know in the comments.\nIf you found this useful, do share it with a friend or colleague.\n\nFor more such stories sent to your inbox once a week, sign up for our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\ngojek.jobs [http://bit.ly/2UcJEI0]","html":"<p>I do the bulk of my test automation development in Kotlin/Java or Python languages. After the programming language, a very important component for the dev workflow is a good IDE.</p><p>Purists generally rave about the use of Editors like Sublime, VSCode or even use of Vim/Emacs over full-fledged IDE’s like Jetbrains IntelliJ, Pycharm or Eclipse. However, the truth is most modern devs in this day and age use/prefer IDE’s for the host of convenience features, speed, and flexibility they provide.</p><p>Personally, I am a big fan of IDE’s provided by <a href=\"https://www.jetbrains.com/\" rel=\"noopener\">Jetbrains</a>, and they are generally my tools of choice—saving me a ton of time while performing refactoring and greatly decreasing development time.</p><blockquote><em><em>Not convinced yet?</em></em></blockquote><p>If you’ve used IntelliJ, then ppen up <code>IntelliJ &gt; Help &gt; Productivity Guide</code> and see how much time it has saved you.</p><p>This is my breakdown in the past two years:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_mRHQ5HihrnXqU7bh.png\" class=\"kg-image\"></figure><p>However,</p><ul><li>Do we really extract the maximum juice out of these tools?</li><li>How many of the IDE’s features do we really use on a day-to-day basis?</li></ul><p>Well, fret not. This post will share some awesome tips that you can also follow to become more productive with your editors. I got to know some of these features when the prolific Dev evangelist <a href=\"https://hadihariri.com/\" rel=\"noopener\">Hadi Hariri</a> from Jetbrains visited <a href=\"https://www.gojek.io/\" rel=\"noopener\">Gojek</a> Bengaluru and shared these during a meetup.</p><p>To demonstrate these features, I would be using appium <a href=\"https://github.com/appium/java-client\" rel=\"noopener\">Java client</a> project but the same features can be applied in any <strong><strong>Java/Kotlin (IntelliJ IDEA)</strong></strong> project of your choice or <strong><strong>Python project (In Pycharm).</strong></strong></p><h3 id=\"ideavim\">Ideavim</h3><p>To start with, did you know all Jetbrains editors come with a very good VIM support via IdeaVim plugin? Vim commands are amazing.</p><p>Once you get used to them, your editing and code navigation speed is easily multiplied 2X and it’s so easy to use it within IntelliJ. If you want to know VIM basics, I wrote a <a href=\"https://automationhacks.blog/2018/09/23/vim-the-editor-you-need-but-not-the-one-you-deserve/\" rel=\"noopener\">post</a> on it some time back.</p><p>To install this plugin, either opt for it when freshly installing IntelliJ or <code>Go to preferences &gt; Plugins and search for IdeaVim in marketplace</code>, don't worry, you can always temporarily disable it and practice first before starting to use it in your day to day workflow.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_mMdadKP3FjJ2Jj9c.png\" class=\"kg-image\"></figure><p>The most common commands that you should be aware of are mentioned right when you open it.</p><p>I use the IntelliJ IDEA classic keybindings, however, you should be able to quickly find the short cuts for these operations in the binding of your choice ( <code>Look into Preferences &gt; Keymap</code>)</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_2xCQI_tMRl7RQpAv.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_dndhilLo2bXVYO_D.png\" class=\"kg-image\"></figure><h3 id=\"search-shortcuts\">Search Shortcuts</h3><p>Double Shift brings up the search console and this is the single place to either</p><ul><li>Search Classes or Files <strong><strong>(Shift + Cmd + N):</strong></strong> with certain names in your project or</li><li>Perform any action <strong><strong>(Shift + Cmd + A):</strong></strong> for example, refactoring certain components inside a class</li></ul><p>You can also easily learn the keyboard shortcuts for the common operations within the editor by seeing the shortcut right beside the command on this screen. Trust me, the investment in learning these has huge payoffs.</p><blockquote><em><em><em>The number of times that you avoid using the trackpad or mouse is </em><strong><strong><em>one time less</em></strong></strong><em> that you have to context switch while coding. Believe me, that makes a difference.</em></em></em></blockquote><h3 id=\"search-by-file-initials\">Search by file initials</h3><p>While trying to find a file, often we just know the name vaguely by memory. In Search, it is sufficient to just mention the initials of the file and IntelliJ will list out all the files which match that criteria</p><p>Let’s say, for example, I want to search for all test files which start with <code>A</code> and have Test suffix, I can just enter <code>ATes</code> and see all the file names which match this.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0__Q-aR5Yl8g_PYSvr.png\" class=\"kg-image\"></figure><h3 id=\"search-method-inside-a-file-matching-a-pattern\">Search method inside a file matching a pattern</h3><p>What if I want to search for all methods having <code>find</code> keyword inside test files named <code>AndTes</code>?</p><p>Well you just use a <code>dot .</code> in these search queries and you can easily search for even methods inside classes based on partial pattern search.</p><p>In this case, <code>AndTest.find</code> would show all the methods with <code>find</code> keyword in them. Neat huh?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_-tEBZAYAl_oD6DHS.png\" class=\"kg-image\"></figure><h3 id=\"search-for-file-names-inside-a-particular-folder\">Search for file names inside a particular folder</h3><p>In the example below, I am searching for file names starting with <code>KeyE</code> under <code>nativekey</code> folder by separating them with a forward slash <code>/</code></p><p><code>nativekey/KeyE</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_IW8jxxtq6cyfMpSC.png\" class=\"kg-image\"></figure><h3 id=\"navigating-options-all-within-the-search\">Navigating options all within the search</h3><p>If you type a forward slash <code>/</code> in the search bar, you can see different IDE actions that you can take right there.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_9tsFLNRrv1Y3lTjt.png\" class=\"kg-image\"></figure><h3 id=\"find-usages\">Find usages</h3><p>You can quickly find out usages of a given function, class, interface, etc by hitting <code>Cmd + B</code>, This saves a ton of time over manually searching for code. You can either navigate right inside the result pop up or open it in dedicated window by selecting <code>Open in find window</code>.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_CJOyIsf7nGojY9Lg.png\" class=\"kg-image\"></figure><p>What if I want to see all the classes and methods that are present in <code>AndroidTest.java</code> class?</p><p>We can open the <strong><strong>Structure</strong></strong> tab <strong><strong>(Cmd + 7)</strong></strong> and glance at all the available methods with options to even show <strong><strong>anonymous classes/lambdas</strong></strong> inside the class.</p><p>Now, this could be very useful when you have a long class and want to see all the methods and then quickly navigate to them. Too many methods might hint at a potential refactoring candidate.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_RH_TICWZf2VTasMN.png\" class=\"kg-image\"></figure><h3 id=\"switcher\">Switcher</h3><p>To switch between open files and open tabs</p><p>Use <code>Ctrl + Tab</code> and then to move down continue pressing <code>Ctrl + Tab</code> and to move up in switcher use <code>Ctrl + Shift + Tab</code></p><p>This is a useful way to quickly navigate among files and menu options again without using mouse or trackpad</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_u1OO-wpwoKH39BQs.png\" class=\"kg-image\"></figure><h3 id=\"recent-files\">Recent files</h3><p>You do not need to remember what files were recently opened. To view recent files accessed, execute <code>Cmd + E</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_ZaMfMJ8LsxnnQk7F.png\" class=\"kg-image\"></figure><h3 id=\"navigation-bar\">Navigation bar</h3><p>How many times have you switched the project tree using <code>Cmd + 1</code> and gone one level up to open a file? Before observing this, I know I kept on doing this again and again.</p><p>However, IntelliJ has a navigation bar on top of the editor which can be used to very quickly navigate up the project tree.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_ZCHnmBhFtgljalI2.png\" class=\"kg-image\"></figure><h3 id=\"live-templates\">Live templates</h3><p>IntelliJ has a bunch of templates already created which can be quickly used to create a base skeleton code for many common constructs.</p><p>It is also aware of what type of file is currently opened and can show available options by opening <code>Cmd + J</code>, once you select the one that you are looking for, expand this code using <code>Tab</code> key</p><p>To open these templates and maybe even add your own, open <code>Preferences &gt; Editor &gt; Live Templates</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_lgWhZ-WL3zco-U5W.png\" class=\"kg-image\"></figure><h3 id=\"inject-language-reference\">Inject language reference</h3><p>IntelliJ allows us to insert the context of a particular language and allows to work with it within another file. Seems confusing? Let me explain why this is a super neat feature.</p><p>Let’s assume you want to store JSON string inside a Java file. Typically Java 8 does not have support for multi-line string (Added in <a href=\"https://dzone.com/articles/jdk-12-raw-string-literals\" rel=\"noopener\">Java 12 though</a>)</p><p>You can start with a simple string variable. Press <code>Option + Enter</code> and select <code>Inject language or reference</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_-aSyY4KPrz8ZJ0rS.png\" class=\"kg-image\"></figure><p>And then select the file type. Let’s say JSON</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_jHjlLhAkzjtluqcG.png\" class=\"kg-image\"></figure><p>Now that we have provided the context, You can again press <code>Option + Enter</code> and then select <code>Edit JSON fragment</code> . This opens up a new window where you can create and edit JSON freely and the corresponding concatenated string is automagically inserted.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_beIcluwz5QOnPmVu.png\" class=\"kg-image\"></figure><h3 id=\"validate-regex-inside-the-editor\">Validate regex inside the editor</h3><p>Regexes are a very powerful concept to learn and use. How many times have you had to write small scratch files (or use <a href=\"https://regexr.com/\" rel=\"noopener\">regex sites</a>) with below snippet to test whether a given string matches a regex?</p><p>I have personally done this many times.</p><!--kg-card-begin: markdown--><p>class Scratch {<br>\npublic static void main(String[] args) {<br>\nString regex = &quot;\\w+ world!&quot;;<br>\nString testString = &quot;Hello world!&quot;;<br>\nSystem.out.println(testString.matches(regex));<br>\n}<br>\n}</p>\n<!--kg-card-end: markdown--><p>IntelliJ makes this even easier. Given a regex, enter <code>Option + Enter</code> and select <strong><strong>Check RegExp</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_0NBq6qgPT14_zYIn.png\" class=\"kg-image\"></figure><p>Enter test strings and IntelliJ would automatically test whether the sample string is a match or not. Neat right?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_PPZYME7bt4PGZtrR.png\" class=\"kg-image\"></figure><h3 id=\"drop-frames-while-debugging\">Drop frames while debugging</h3><p>While developing it’s very important to be good at debugging. IntelliJ allows a very rich set of inspection features to know the state of variables/classes at a given point in the code.</p><p>In this below example, we have a simple <code>fooBar()</code> method which is a wrapper over <code>foo</code> and <code>bar</code> methods where <code>foo</code> has a debug point.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_P7eZVtk2sSDPiUFD.png\" class=\"kg-image\"></figure><p>What if we want to move a step back from the current frame? It turns out we can select the current frame and select <code>Drop frame</code> and that would move the debug flow back to <code>foo</code> method.</p><p>It’s amazing how much time this saves since we do not need to rewire the debugging session from scratch.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_DdZ775opHOP0z_uL.png\" class=\"kg-image\"></figure><p>Hopefully, this post encouraged you to also explore the feature-rich IDEs that Jetbrains provides, and give your automation development a literal nitro boost. (NFS reference anyone? 😋)</p><p>What other IDE tricks have been lifesavers for you? Let me know in the comments. If you found this useful, do share it with a friend or colleague.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-3.png\" class=\"kg-image\"></figure><p>For more such stories sent to your inbox once a week, <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">sign up for our newsletter!</a></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA-2.jpeg\" class=\"kg-image\" alt=\"gojek.jobs\"><figcaption><a href=\"http://bit.ly/2UcJEI0\">gojek.jobs</a></figcaption></figure>","url":"https://gojek-ghost.zysk.in/speed-up-your-workflow-with-intellij/","canonical_url":null,"uuid":"c97cb86d-8608-410e-9740-e4e613b1c3bf","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ecb65447aa22c4066f83f64","reading_time":7},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}},{"node":{"name":"Maps","slug":"maps"}},{"node":{"name":"Ride Hailing","slug":"ride-hailing"}},{"node":{"name":"Software Engineering","slug":"software-engineering"}},{"node":{"name":"Startup","slug":"startup"}}]}},"pageContext":{"slug":"speed-up-your-workflow-with-intellij"}}}