{"componentChunkName":"component---src-templates-post-js","path":"/blog/from-novice-to-code-master/","result":{"data":{"ghostPost":{"id":"Ghost__Post__5ec2ca6c7aa22c4066f83b74","title":"From Novice to Code Master","slug":"from-novice-to-code-master","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_ktwn_4xTyzI4onUAYxZd8Q.png","excerpt":"How employing the code kata practicing technique used at Gojek’s Bootcamp helps engineers hone their skills.","custom_excerpt":"How employing the code kata practicing technique used at Gojek’s Bootcamp helps engineers hone their skills.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"16 September, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T23:18:28.000+05:30","published_at":"2019-09-16T23:47:00.000+05:30","updated_at":"2020-05-18T23:53:22.000+05:30","meta_title":null,"meta_description":"How employing the code kata practicing technique used at Gojek’s Bootcamp helps engineers hone their skills.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Ali Qornan\n\nHow does one become a master at something? Let’s take music as an example. It\nhelps to know the theory and to understand the mechanics of your instrument. It\nalso helps to have talent. Having a good partner to watch your back doesn’t hurt\neither. But there’s more to it.\n\nWhy are The Beatles [https://en.wikipedia.org/wiki/The_Beatles], who formed in\nLiverpool in 1960, considered one of the greatest bands in history\n[https://www.quora.com/Why-are-The-Beatles-the-greatest-band-in-history/answer/Giliana-P-Garc%C3%ADa-Acevedo-1]\n? Why doesn’t everyone else achieve the same level of success?\n\n> The difference between master and beginner is the amount of practice.\nThe Beatles applied the fundamentals they learned over and over again, using\nfeedback to get better every time. All told, they performed for 270 nights in\njust over a year-and-a-half. By the time they had their first taste of success\nin 1964, they had performed live an estimated 1,200 times. Most bands today\ndon’t perform that much in their entire career.\n\nThe 10,000 Hours rule\nIn the early 1990s, psychologist K. Anders Ericsson and two of his colleagues at\nBerlin’s elite Academy of Music conducted a study\n[http://projects.ict.usc.edu/itw/gel/EricssonDeliberatePracticePR93.PDF]. With\nthe help of the Academy, they interviewed twelve expert pianists (8 men and 4\nwomen) and 12 amateurs (7 men and 5 women).\n\nThe amateurs never practiced more than about three hours a week over the course\nof their childhood, and by the age of twenty, they had totaled two thousand\nhours of practice. The experts, on the other hand, steadily increased their\npractice time every year, until by the age of twenty, they had reached ten\nthousand hours.\n\n> “To become a chess grandmaster also seems to take about ten years. (Only the\nlegendary Bobby Fisher got to that elite level in less than that amount of time:\nit took him nine years.) And what’s ten years? Well, it’s roughly how long it\ntakes to put in ten thousand hours of hard practice. Ten thousand hours is the\nmagic number of greatness.”\n> Malcolm Gladwell, in his book “Outliers: The Story of Success\n[http://amzn.to/wgo1hw]”\nThe interesting thing about that number, of course, is that ten thousand hours\nis an enormous amount of time. It’s all but impossible to reach that number all\nby yourself by the time you’re a young adult. This would require encouraging\nparents and some measure of wealth, which would avoid the need to hold down\nadditional jobs that would eat into valuable practice time.\n\nWhat Happens in the Software Industry\nIn the software industry, we take developers trained in theory and throw them\nstraight into the deep-end, working on a project with no real precedent to draw\nfrom. It’s like taking a group of kids to fight against the big gang in the\ntown. But that is not an issue because, in software engineering, we do our\npracticing on the job, and that’s why we make mistakes on the job. But at the\nend of the day, we want to be great while still managing the objectives. For\nthat purpose, we need to find ways of splitting the practice from the\nprofession. A practice method that is effective and without taking up too much\ntime.\n\n> This is where CodeKata comes in.\nThe CodeKata\nKata [https://en.wikipedia.org/wiki/Kata] is an exercise in Karate to execute a\nspecified series of a variety of moves, with stepping and turning, while\nattempting to maintain perfect form. It teaches the student about proper form\nand position to helped them visualize different scenarios for each motion and\ntechnique. Traditionally, kata is taught in stages. Previously learned kata are\nrepeated to show better technique or power as a student acquires knowledge and\nexperience. It is common for students to repeat every kata they have learned but\nat an improved level of quality.\n\nSandy Vs. SpongebobCodeKata is an attempt to bring this element of practice to software\ndevelopment. The intent behind CodeKata is similar to Karate Kata. Each is a\nshort exercise. It repeated multiple times, adding little improvements in each\ncycle. Some involve programming and can be coded in many different ways. Some\ninvolve thinking about the issues behind programming and design. These are\nunlikely to have a single correct answer.\n\n> Remember that the point of the kata is not arriving at the correct answer. The\npoint is the stuff you learn along the way. The goal is the practice, not the\nsolution.\nHow Is This Accomplished at Gojek?\nAt Gojek, there’s a program for employees called Engineering Bootcamp\n[https://blog.gojekengineering.com/what-is-the-go-jek-engineering-bootcamp-de7778836da9]\n. Basically, it is weeks of intense hands-on learning designed to unlearn and\nequip skills needed to be a world-class engineer.\n\nCore Engineering BootcampAt Bootcamp, the way coaches taught us (participants)\nis similar to CodeKata. We have a code drill session in the afternoon to solve\none problem by using Java. After the class ends, we solve the same problem again\nas homework in the evening using Ruby. There are many things we did in our code\ndrill session, that really helped us develop in CodeKata. Those are:\n\n1. Set Rules\nWe have rules called Non-Negotiable Etiquette. If you violate one of the rules,\nyou have to rm -rf your code and start it again from scratch. What is rm -rf? It\nis a basic command on Unix system to remove files or directories from the\nmachine forever.\n\nNon Negotiable Etiquette\nIf you violate one, rm -rf! never love your code </3\n\n\n--------------------------------------------------------------------------------\n\n 1.  Indentation and spacing between code constructs (classes/methods/specs)\n     must be consistent.\n 2.  Use only spaces (no tabs) for indentation.\n 3.  Newlines at end of file.\n 4.  Follow accepted naming conventions for your language/framework.\n 5.  Follow accepted naming file and Directory structure for your\n     language/framework.\n 6.  Use namespaces.\n 7.  No comments/Unused Code/Unused file/Unused folder must ever be checked in.\n 8.  Runtime environment should be consistent with IDE environment -  i.e there\n     should be no difference in running a build or a spec from your IDE and from\n     the command line.\n 9.  Use .gitignore.\n 10. Ensure there is a README.md that includes problem description, dev\n     environment setup, build instructions, and run instructions.\n 11. Test Driven Development (this should show in clear pattern in the commit\n     log - one spec, one code change per commit)\n\nCan you imagine the feeling when code that we wrote with blood and tears needs\nto be deleted for one small mistake? Is that acceptable?\n\n> Yes, you must not love your code.\nThat small mistake is not tolerable in production and even development. It could\ncause bugs, errors or other things that may become a bottleneck. But of course,\nwe don’t rm -rf in work 😂. It’s just a practice so that we don’t get overly\nattached to the code, remain careful about mistakes, and most importantly —\nmaintain quality.\n\n2. Practise Pair Programming\nAs the name implies, pair programming is where two developers work on one\nmachine. We only have a keyboard and a mouse for each pair. One developer acts\nas the driver who codes while the other serves as the observer who checks the\ncode being written, proofreads and spell-checks, and also figures out where to\ngo next. These roles can be switched at any time: the driver will then become\nthe observer and vice versa.\n\nPair Programming greatly helps us in CodeKata, because:\n\n * It’s harder to procrastinate. Working as a team means you can’t stop and\n   check your email, Slack, Facebook or WhatsApp every few minutes.\n * When someone shares a problem you are going through, you feel less defeated\n   and more positive about trying again.\n * Increases software quality without impacting much on time to deliver. It will\n   cost only 15% of the development time according to this study\n   [https://www.economist.com/technology-quarterly/2001/09/20/agility-counts].\n   But with increased quality comes big savings later in the project.\n\n3. Have a Short Cycle\nThe point of CodeKata is to get experience from practice. In order to achieve\nthat, we solve the same problem multiple times. We try different approaches and\nsolutions to experience each advantage and disadvantage. While we work on it, we\nalso try to add little improvements for every cycle. But sometimes, we can also\ntreat the cycle as an iteration of solving the problem.\n\nBecause CodeKata is a practicing method and not project development. It’s not\nsupposed to be worked on for the long run. For that reason, we only have 20–30\nmins for every cycle (sometimes even shorter).\n\nAfter the Mini Retro, we showcase our code to other participants in the class.\nWhy do we need to do it? Even though the whole class is working on the same\nproblem, we may interpret it differently and have hundreds of possible different\nsolutions. Doing a showcase will tell others about progress and approaches. It\nwill trigger a discussion and synchronize the context for everyone. At the end\nof the day, we will converge at the current best solution.\n\n> It’s similar to Agile Development. You deliver something to the customer as soon\nas possible to get feedback faster.\nA Few Final Thoughts\nMy tips for CodeKata are:\n\n * Find a place and time where you won’t be interrupted.\n * Focus on the essential elements of the Kata.\n * Remember to look for feedback for every major decision\n * If it helps, keep a journal of your progress\n * Have discussion groups with other developers, but try to have completed the\n   kata first\n\nCore Engineering BootcampThank you for reading this blog! Hope you found it\nhelpful. Cheers! 🙂\n\n\n--------------------------------------------------------------------------------\n\nIf you’d like our updates to reach your inbox directly, subscribe to our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Ali Qornan</p><p>How does one become a master at something? Let’s take music as an example. It helps to know the theory and to understand the mechanics of your instrument. It also helps to have talent. Having a good partner to watch your back doesn’t hurt either. But there’s more to it.</p><p>Why are <a href=\"https://en.wikipedia.org/wiki/The_Beatles\" rel=\"noopener\">The Beatles</a>, who formed in Liverpool in 1960, considered one of <a href=\"https://www.quora.com/Why-are-The-Beatles-the-greatest-band-in-history/answer/Giliana-P-Garc%C3%ADa-Acevedo-1\" rel=\"noopener\">the greatest bands in history</a>? Why doesn’t everyone else achieve the same level of success?</p><blockquote>The difference between master and beginner is the amount of practice.</blockquote><p>The Beatles applied the fundamentals they learned over and over again, using feedback to get better every time. All told, they performed for 270 nights in just over a year-and-a-half. By the time they had their first taste of success in 1964, they had performed live an estimated 1,200 times. Most bands today don’t perform that much in their entire career.</p><h1 id=\"the-10-000-hours-rule\">The 10,000 Hours rule</h1><p>In the early 1990s, psychologist K. Anders Ericsson and two of his colleagues at Berlin’s elite Academy of Music conducted a <a href=\"http://projects.ict.usc.edu/itw/gel/EricssonDeliberatePracticePR93.PDF\" rel=\"noopener\">study</a>. With the help of the Academy, they interviewed twelve expert pianists (8 men and 4 women) and 12 amateurs (7 men and 5 women).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/912/1*XesRz3d5FMCzIOfm7Yk3hA.png\" class=\"kg-image\"></figure><p>The amateurs never practiced more than about three hours a week over the course of their childhood, and by the age of twenty, they had totaled two thousand hours of practice. The experts, on the other hand, steadily increased their practice time every year, until by the age of twenty, they had reached ten thousand hours.</p><blockquote><em><em>“To become a chess grandmaster also seems to take about ten years. (Only the legendary Bobby Fisher got to that elite level in less than that amount of time: it took him nine years.) And what’s ten years? Well, it’s roughly how long it takes to put in ten thousand hours of hard practice. <strong><strong>Ten thousand hours</strong></strong> is the magic number of greatness.”</em></em></blockquote><blockquote><em><em>Malcolm Gladwell, in his book “<a href=\"http://amzn.to/wgo1hw\" rel=\"noopener\"><em>Outliers: The Story of Success</em></a><em>”</em></em></em></blockquote><p>The interesting thing about that number, of course, is that ten thousand hours is an enormous amount of time. It’s all but impossible to reach that number all by yourself by the time you’re a young adult. This would require encouraging parents and some measure of wealth, which would avoid the need to hold down additional jobs that would eat into valuable practice time.</p><h1 id=\"what-happens-in-the-software-industry\">What Happens in the Software Industry</h1><p>In the software industry, we take developers trained in theory and throw them straight into the deep-end, working on a project with no real precedent to draw from. It’s like taking a group of kids to fight against the big gang in the town. But that is not an issue because, in software engineering, we do our practicing on the job, and that’s why we make mistakes on the job. But at the end of the day, we want to be great while still managing the objectives. For that purpose, we need to find ways of splitting the practice from the profession. A practice method that is effective and without taking up too much time.</p><blockquote><em><em>This is where CodeKata comes in.</em></em></blockquote><h1 id=\"the-codekata\">The CodeKata</h1><p><a href=\"https://en.wikipedia.org/wiki/Kata\" rel=\"noopener\"><strong><strong>Kata</strong></strong></a> is an exercise in Karate to execute a specified series of a variety of moves, with stepping and turning, while attempting to maintain perfect form. It teaches the student about proper form and position to helped them visualize different scenarios for each motion and technique. Traditionally, kata is taught in stages. Previously learned kata are repeated to show better technique or power as a student acquires knowledge and experience. It is common for students to repeat every kata they have learned but at an improved level of quality.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/670/1*icPku4JdhwTHMvyV7uPLZw.gif\" class=\"kg-image\"><figcaption>Sandy Vs. Spongebob</figcaption></figure><p><strong><strong>CodeKata</strong></strong> is an attempt to bring this element of practice to software development. The intent behind CodeKata is similar to Karate Kata. Each is a short exercise. It repeated multiple times, adding little improvements in each cycle. Some involve programming and can be coded in many different ways. Some involve thinking about the issues behind programming and design. These are unlikely to have a single correct answer.</p><blockquote>Remember that the point of the kata is not arriving at the correct answer. The point is the stuff you learn along the way. The goal is the practice, not the solution.</blockquote><h1 id=\"how-is-this-accomplished-at-gojek\">How Is This Accomplished at Gojek?</h1><p>At Gojek, there’s a program for employees called <a href=\"https://blog.gojekengineering.com/what-is-the-go-jek-engineering-bootcamp-de7778836da9\" rel=\"noopener\">Engineering Bootcamp</a>. Basically, it is weeks of intense hands-on learning designed to unlearn and equip skills needed to be a world-class engineer.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/3840/1*uo6NJ-s_43bjcY2V_JDSPQ.jpeg\" class=\"kg-image\"><figcaption>Core Engineering Bootcamp</figcaption></figure><p>At Bootcamp, the way coaches taught us (participants) is similar to CodeKata. We have a code drill session in the afternoon to solve one problem by using Java. After the class ends, we solve the same problem again as homework in the evening using Ruby. There are many things we did in our code drill session, that really helped us develop in CodeKata. Those are:</p><h2 id=\"1-set-rules\">1. Set Rules</h2><p>We have rules called <strong><strong>Non-Negotiable Etiquette</strong></strong>. If you violate one of the rules, you have to <em><em>rm -rf</em></em> your code and start it again from scratch. What is <em><em>rm -rf</em></em>? It is a basic command on Unix system to remove files or directories from the machine forever.</p><h1 id=\"non-negotiable-etiquette\">Non Negotiable Etiquette</h1><p>If you violate one, rm -rf! never love your code &lt;/3</p><hr><ol><li>Indentation and spacing between code constructs (classes/methods/specs) must be consistent.</li><li>Use only spaces (no tabs) for indentation.</li><li>Newlines at end of file.</li><li>Follow accepted naming conventions for your language/framework.</li><li>Follow accepted naming file and Directory structure for your language/framework.</li><li>Use namespaces.</li><li>No comments/Unused Code/Unused file/Unused folder must ever be checked in.</li><li>Runtime environment should be consistent with IDE environment -  i.e there should be no difference in running a build or a spec from your IDE and from the command line.</li><li>Use .gitignore.</li><li>Ensure there is a README.md that includes problem description, dev environment setup, build instructions, and run instructions.</li><li>Test Driven Development (this should show in clear pattern in the commit log - one spec, one code change per commit)</li></ol><p>Can you imagine the feeling when code that we wrote with blood and tears needs to be deleted for one small mistake? Is that acceptable?</p><blockquote>Yes, you must not love your code.</blockquote><p>That small mistake is not tolerable in production and even development. It could cause bugs, errors or other things that may become a bottleneck. But of course, we don’t <em><em>rm -rf</em></em> in work 😂. It’s just a practice so that we don’t get overly attached to the code, remain careful about mistakes, and most importantly — maintain quality.</p><h2 id=\"2-practise-pair-programming\">2. Practise Pair Programming</h2><p>As the name implies, pair programming is where two developers work on one machine. We only have a keyboard and a mouse for each pair. One developer acts as the driver who codes while the other serves as the observer who checks the code being written, proofreads and spell-checks, and also figures out where to go next. These roles can be switched at any time: the driver will then become the observer and vice versa.</p><p>Pair Programming greatly helps us in CodeKata, because:</p><ul><li>It’s harder to procrastinate. Working as a team means you can’t stop and check your email, Slack, Facebook or WhatsApp every few minutes.</li><li>When someone shares a problem you are going through, you feel less defeated and more positive about trying again.</li><li>Increases software quality without impacting much on time to deliver. It will cost only 15% of the development time according to this <a href=\"https://www.economist.com/technology-quarterly/2001/09/20/agility-counts\" rel=\"noopener\">study</a>. But with increased quality comes big savings later in the project.</li></ul><h2 id=\"3-have-a-short-cycle\">3. Have a Short Cycle</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/982/1*14PeUCfZheM8mK7xm6FL8w.png\" class=\"kg-image\"></figure><p>The point of CodeKata is to get experience from practice. In order to achieve that, we solve the same problem multiple times. We try different approaches and solutions to experience each advantage and disadvantage. While we work on it, we also try to add little improvements for every cycle. But sometimes, we can also treat the cycle as an iteration of solving the problem.</p><p>Because CodeKata is a practicing method and not project development. It’s not supposed to be worked on for the long run. For that reason, we only have 20–30 mins for every cycle (sometimes even shorter).</p><p>After the Mini Retro, we showcase our code to other participants in the class. Why do we need to do it? Even though the whole class is working on the same problem, we may interpret it differently and have hundreds of possible different solutions. Doing a showcase will tell others about progress and approaches. It will trigger a discussion and synchronize the context for everyone. At the end of the day, we will converge at the current best solution.</p><blockquote>It’s similar to Agile Development. You deliver something to the customer as soon as possible to get feedback faster.</blockquote><h1 id=\"a-few-final-thoughts\">A Few Final Thoughts</h1><p>My tips for CodeKata are:</p><ul><li>Find a place and time where you won’t be interrupted.</li><li>Focus on the essential elements of the Kata.</li><li>Remember to look for feedback for every major decision</li><li>If it helps, keep a journal of your progress</li><li>Have discussion groups with other developers, but try to have completed the kata first</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/4240/1*53r0Npq_Thb0R0saRF08Rg.jpeg\" class=\"kg-image\"><figcaption>Core Engineering Bootcamp</figcaption></figure><p>Thank you for reading this blog! Hope you found it helpful. Cheers! 🙂</p><hr><p>If you’d like our updates to reach your inbox directly, <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">subscribe to our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/from-novice-to-code-master/","canonical_url":null,"uuid":"06de3753-36ed-4718-9680-03c9d7eb4e09","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca6c7aa22c4066f83b74","reading_time":7},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}},{"node":{"name":"Maps","slug":"maps"}},{"node":{"name":"Ride Hailing","slug":"ride-hailing"}},{"node":{"name":"Software Engineering","slug":"software-engineering"}},{"node":{"name":"Startup","slug":"startup"}}]}},"pageContext":{"slug":"from-novice-to-code-master"}}}