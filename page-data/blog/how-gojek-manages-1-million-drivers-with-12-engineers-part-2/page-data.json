{"componentChunkName":"component---src-templates-post-js","path":"/blog/how-gojek-manages-1-million-drivers-with-12-engineers-part-2/","result":{"data":{"ghostPost":{"id":"Ghost__Post__5eb12c67f7c7da001effcdd8","title":"How Gojek Manages 1 Million Drivers With 12 Engineers (Part 2)","slug":"how-gojek-manages-1-million-drivers-with-12-engineers-part-2","featured":false,"feature_image":"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dWQkpxR4YJawDR4G6JgYFw.jpg","excerpt":"An overburdened codebase, an updated tech stack, a big rewrite— how a lean team built the foundation for a Super App","custom_excerpt":"An overburdened codebase, an updated tech stack, a big rewrite— how a lean team built the foundation for a Super App","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"02 July, 2018","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T14:35:43.000+05:30","published_at":"2018-07-02T09:30:00.000+05:30","updated_at":"2020-05-12T11:57:24.000+05:30","meta_title":null,"meta_description":"An overburdened codebase, an updated tech stack, a big rewrite— how a lean team built the foundation for a Super App","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Adithya Venkatesan\n\nThis is Part 2 of a feature story profiling the ‘Allocations’ team at GOJEK. For\nPart 1 of the story, please click here. [http://bit.ly/gojekfeature]\n\nThe Infinite Onion\nEvery onion layer you peel is accompanied by more tears. It seems like an\nendless problem. And just when you think it’s done, there’s another layer. For\nthe next 3 months, it was onion after onion, layer after layer across teams at\nGOJEK. Downtimes were the new normal by the beginning of 2016.\n\nBack to square one.\n\nThe ‘Broadcast algorithm’ the bid engine team was relying on was failing. But\nhow?\n\nEvery driver was seeing the same order multiple times. The algorithm\n‘broadcasted’ the same order across its driver database. So if there were 100\norders in a specific area and 200 drivers, each driver would see the order, but\nnot necessarily be able to fulfil it. There was a three-fold problem to the\nalgorithm: Accountability, High-concurrency and promoting Unhealthy competition.\n\nAccountability: How can we reward the drivers who are doing more orders, zero\ncancellations etc… when he/she simply couldn’t accept the order? How can we deny\nbonus, because by design, a driver was not getting an order due to a dozen\nreasons? There was no accountability for the driver, or the business\nfundamentals.\n\nHigh-concurrency: The sheer volume of orders meant drivers were missing out on\norders because it was blasted across phones. Some orders were not being\nfulfilled because of multiple blasts and server loads. More orders, less drivers\n= some orders not being fulfilled, which resulted in a poor customer experience.\n\nNote: The location-based orders are a peculiar problem for GOJEK.\n\n> Why? In a distance of 20metres, you’ll spot more than 30+ GO-RIDE scooters, as\nopposed to maybe a maximum of 10 cars.\nUnhealthy competition: Once you’re blasting an order to all, you’re not\nfactoring in quality drivers for customers. We were also not getting the nearest\ndriver for an order. This breeds unhealthy competitiveness among drivers.\n\nThere is an adequate probability of doubt in the nature the algorithm was\ndesigned, and other constraints that are outside of the realm. Who gets the\norder became a function of the phone — better GPS, hardware, Internet, software;\nall played a critical portion. And that was unfair. So zero accountability and\nhigh congestion of drivers meant things were going awry.\n\n10x growth, 100% failure\nWhen Niranjan [https://twitter.com/niranjan_p] pulled a couple of all nighters\n[https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32] \nand and rewrote the code, the core portion was rewritten to make it a SPIKE.\nWhat is a spike? You break the rules and throw caution to the air with the\nobjective of shipping something out to keep the company afloat. The problem with\nSPIKE is that it wasn’t the end-solution. And that meant more downtimes and more\nfailures. But, the team was in murky waters by late 2015.\n\nAt this point, GOJEK was managing 300,000+ orders every day. Failures were\nroutine. Again. Wherever Nadiem went, he was questioned on why the app was\ncrashing or users could simply not find customers. At this point, the tech team\nwas made up of around 10 people, who were firefighting every day. When Shobhit\n[https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------]\n, one of our star programmers, went to a Domino’s store nearby to grab a quick\nbite, drivers started questioning him. Anyone who wore a GOJEK T-shirt became\nthe unofficial complaint box. Something needed to change, and fast.\n\nThis was again an underestimation of how much Indonesians relied on GOJEK.\nEveryone wanted to use GOJEK. It made life easier in the traffic-congested glut\nthat was Indonesia. Importantly, jobs and lives depended on it.\n\nDecisions…\n\nNadiem’s internal mail> “No project has a budget and impact as big as this in\nGOJEK’s history”\nThe big rewrite — The Perfect Allocation\nThe team needed to work on a different algorithm: 1–1 personalisation, pin\naccountability on drivers, identify what a perfect driver looks like, and ideate\non how to frame this persona. The big rewrite began in the middle of 2016. The\n‘bid engine’ team was now rechristened as the ‘Allocations’ team. At this point,\nwe were still losing customers. There were leaky faucets that were not sealed.\nAfter all, the work of the Allocations team criss-crossed all of GOJEK’s\nproducts and services. It was time to revisit the mothership.\n\nHello Clojure.\n\nBack to square one. Back to taking risks. By now, the core team was all too\nfamiliar with handling high-pressure timelines and live codebases. Clojure was\nan obvious choice because of the specific complexities it intended to solve.\n\n> “Only two in the team knew Clojure then, but it solved an important business\nproblem. We went with it and we all had to learn. Back to school. Again.” — \nNiranjan Paranjape\n[https://medium.com/u/689ebe477c46?source=post_page-----35f6a27a0faf----------------------]\nThe first task was to replicate the bid engine logic. A 6-member team got to\nwork with Clojure. Why Clojure? Because the language designs better abstractions\nfor a specific problem the team needed to solve. While Golang was the modern\nsuperbike that had it all, Clojure was the cruiser — really simple and capable\nof designing complex code. Clojure ushered this idea of getting organised and\nensuring good software development practices.\n\nOn the left, you see the Allocation code in Go. On the right, the exact same\ncode in Clojure.\n\nThis is not to state one language is better than the other. It’s tempting to\narrive at that conclusion when you see the image above. There were trade-offs\nmade when the switch was made. While Go is superior in performance, the\ncapability to make changes and add features was hard. Language was traded for\ndesign.\n\nThe innate abstraction to sniff out what works when, how and why is what makes\nlean engineering so special at GOJEK.\n\n“The more boring a rewrite is, the sweeter the success,” — Shobhit\n[https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------]\n. After the 2-month long big rewrite, a stable product was live. Pause. Breathe.\nAfter 3 days of releasing, no one noticed there was a new codebase/algorithm in\nplace. That’s what success tastes like. Smooth as butter. No issues and\nachieving scale.\n\nShaping a mindset\nThat’s half the story told. A million mistakes later, we’re still making\nmistakes. But that’s the good part. We fail fast. We build fast. No hierarchy. \nThere’s an ingrained mentality of managing more with less. Anything that’s\nrepetitive gets automated. One could argue this was born out of the desperation\nof GOJEK products being the arteries criss-crossing through the heart of\nIndonesia. Regardless, the engineering psyche was passed down and filters\nthrough our recruitment. Here’s a reckoner on why GOJEK is hard to get into and\nequally hard to abandon.\n[https://medium.com/gojekengineering/why-we-ask-for-code-b276b45ea790]\n\nThe simplification of the story would merely state the Allocation team allocates\ndrivers to customers. But their genesis is filled with fascinating engineering\ninsights. How do you factor supply and demand, how do you reward drivers, manage\ndriver health by reducing the workload, figure surge pricing, check for\nloopholes, and so on. Each function has dozens of people in similar startups at\nGOJEK’s scale. We are able to cut this down because of our emphasis on lean\nengineering. We don’t make compromises on our recruitment either. Leaders code.\nEveryone codes.\n\nEngineers are running their own startups in a startup. GOJEK is creating a one\nof a kind Super App with a platform for other startups to be part of\n\nToday, anyone within a 300-meter range can grab a ride. That’s only an average.\nIn popular malls near Jakarta, there are drivers every 10 metres or lesser. Then\ncame dashboards and data to crunch driver statistics, daily research to tweak\nthe algorithm. The last time I checked, GOJEK does more than 35+ orders each\nsecond across our services like GO-FOOD, GO-SEND, GO-MASSAGE etc…\n\nThe ship of Theseus\nYou use a really old car to commute to office. It breaks, stutters and sometimes\nrefuses to move entirely. You can’t scrap it because it’s the only car you have.\nBut you want a supercar. So you go about buying the steering wheel and fixing it\nto the old car. Then comes the rims, the music system, leather seats and slowly,\nthe car begins to take shape. But it still has components of nostalgia; the car\nthat ferried you in dark times when nothing else would. Stan Marsh is that old\ncar.\n\nRemember Stan Marsh? The old legacy code on which GOJEK was being built?\n\n10% of Stan Marsh survives. Even till date. (There is a plan to eventually put\nit to bed [https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf])\nIt’s there for legacy reasons. I suspect the team is also sentimental about it.\nThink of it as the ‘Ship of Theseus’ conundrum. No matter what engineers who\njoin GOJEK think of Stan Marsh, it was the foundation on which GOJEK was built.\nSmart engineering is also about working with a legacy codebase and improving it.\nFly with what you have and make it better. Everything else will follow. The team\nembraced that challenge.\n\nIt all boils down to the kind of people you let in the system. People are\nempowered to make decisions at GOJEK. As our India Head, Sidu Ponnappa\n[https://medium.com/u/e2e244e6c6b3?source=post_page-----35f6a27a0faf----------------------] \noften repeats, “Don’t throw people at a problem.” It’s a typical outsourcing\nmindset Indian Engineers have been cajoled into. More people does not mean\nbetter work. More people does not mean better code. If that were true, GOJEK\nsimply wouldn’t exist today doing more than a 100 million+ orders a month with a\npaltry 200+ engineers.\n\n\n--------------------------------------------------------------------------------\n\nStory credits: Shobhit Srivastava\n[https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------]\n, Ranjeet Singh\n[https://medium.com/u/710d3b419a5a?source=post_page-----35f6a27a0faf----------------------]\n, Mehakdeep Singh\n[https://medium.com/u/36ce12a82c52?source=post_page-----35f6a27a0faf----------------------]\n, Bergas Bimo Branarto\n[https://medium.com/u/5cffcceadf08?source=post_page-----35f6a27a0faf----------------------]\n.","html":"<p>By Adithya Venkatesan</p><p>This is Part 2 of a feature story profiling the ‘Allocations’ team at GOJEK. For Part 1 of the story, please click <a href=\"http://bit.ly/gojekfeature\" rel=\"noopener\">here.</a></p><h1 id=\"the-infinite-onion\">The Infinite Onion</h1><p>Every onion layer you peel is accompanied by more tears. It seems like an endless problem. And just when you think it’s done, there’s another layer. For the next 3 months, it was onion after onion, layer after layer across teams at GOJEK. Downtimes were the new normal by the beginning of 2016.</p><p>Back to square one.</p><p>The ‘Broadcast algorithm’ the bid engine team was relying on was failing. But how?</p><p>Every driver was seeing the same order multiple times. The algorithm ‘broadcasted’ the same order across its driver database. So if there were 100 orders in a specific area and 200 drivers, each driver would see the order, but not necessarily be able to fulfil it. There was a three-fold problem to the algorithm: Accountability, High-concurrency and promoting Unhealthy competition.</p><p><strong><strong>Accountability:</strong></strong> How can we reward the drivers who are doing more orders, zero cancellations etc… when he/she simply couldn’t accept the order? How can we deny bonus, because by design, a driver was not getting an order due to a dozen reasons? There was no accountability for the driver, or the business fundamentals.</p><p><strong><strong>High-concurrency: </strong></strong>The sheer volume of orders meant drivers were missing out on orders because it was blasted across phones. Some orders were not being fulfilled because of multiple blasts and server loads. More orders, less drivers = some orders not being fulfilled, which resulted in a poor customer experience.</p><p><strong><strong>Note: The location-based orders are a peculiar problem for GOJEK.</strong></strong></p><blockquote>Why? In a distance of 20metres, you’ll spot more than 30+ GO-RIDE scooters, as opposed to maybe a maximum of 10 cars.</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/528/1*UwVrMbrdIEzUdeyhOaI65A.gif\" class=\"kg-image\"></figure><p><strong><strong>Unhealthy competition: </strong></strong>Once you’re blasting an order to all, you’re not factoring in quality drivers for customers. We were also not getting the nearest driver for an order. This breeds unhealthy competitiveness among drivers.</p><p>There is an adequate probability of doubt in the nature the algorithm was designed, and other constraints that are outside of the realm. Who gets the order became a function of the phone — better GPS, hardware, Internet, software; all played a critical portion. And that was unfair. So zero accountability and high congestion of drivers meant things were going awry.</p><h1 id=\"10x-growth-100-failure\">10x growth, 100% failure</h1><p>When <a href=\"https://twitter.com/niranjan_p\" rel=\"noopener\">Niranjan</a> pulled a couple of <a href=\"https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32\" rel=\"noopener\">all nighters</a> and and rewrote the code, the core portion was rewritten to make it a SPIKE. What is a spike? You break the rules and throw caution to the air with the objective of shipping something out to keep the company afloat. The problem with SPIKE is that it wasn’t the end-solution. And that meant more downtimes and more failures. But, the team was in murky waters by late 2015.</p><p>At this point, GOJEK was managing 300,000+ orders every day. Failures were routine. Again. Wherever Nadiem went, he was questioned on why the app was crashing or users could simply not find customers. At this point, the tech team was made up of around 10 people, who were firefighting every day. When <a href=\"https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Shobhit</a>, one of our star programmers, went to a Domino’s store nearby to grab a quick bite, drivers started questioning him. <strong><strong>Anyone who wore a GOJEK T-shirt became the unofficial complaint box</strong></strong>. Something needed to change, and fast.</p><p>This was again an underestimation of how much Indonesians relied on GOJEK. Everyone wanted to use GOJEK. It made life easier in the traffic-congested glut that was Indonesia. Importantly, jobs and lives depended on it.</p><p>Decisions…</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/681/1*GoeCvdf2ZFyxxDlyeVC0tQ.png\" class=\"kg-image\"><figcaption>Nadiem’s internal mail</figcaption></figure><blockquote>“No project has a budget and impact as big as this in GOJEK’s history”</blockquote><h1 id=\"the-big-rewrite-the-perfect-allocation\">The big rewrite — The Perfect Allocation</h1><p>The team needed to work on a different algorithm: 1–1 personalisation, pin accountability on drivers, identify what a perfect driver looks like, and ideate on how to frame this persona. The big rewrite began in the middle of 2016. The ‘bid engine’ team was now rechristened as the ‘Allocations’ team. At this point, we were still losing customers. There were leaky faucets that were not sealed. After all, the work of the Allocations team criss-crossed all of GOJEK’s products and services. It was time to revisit the mothership.</p><p><em><em><strong><strong><em>Hello Clojure.</em></strong></strong></em></em></p><p>Back to square one. Back to taking risks. By now, the core team was all too familiar with handling high-pressure timelines and live codebases. Clojure was an obvious choice because of the specific complexities it intended to solve.</p><blockquote>“Only two in the team knew Clojure then, but it solved an important business problem. We went with it and we all had to learn. Back to school. Again.” — <a href=\"https://medium.com/u/689ebe477c46?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Niranjan Paranjape</a></blockquote><p>The first task was to replicate the bid engine logic. A 6-member team got to work with Clojure. Why Clojure? Because the language designs better abstractions for a specific problem the team needed to solve. While Golang was the modern superbike that had it all, Clojure was the cruiser — really simple and capable of designing complex code. Clojure ushered this idea of getting organised and ensuring good software development practices.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1895/1*7W31wteVSSria2fq7mZ7bA.jpeg\" class=\"kg-image\"></figure><p>On the left, you see the Allocation code in Go. On the right, the exact same code in Clojure.</p><p>This is not to state one language is better than the other. It’s tempting to arrive at that conclusion when you see the image above. There were trade-offs made when the switch was made. While Go is superior in performance, the capability to make changes and add features was hard. Language was traded for design.</p><p><em><em>The innate abstraction to sniff out what works when, how and why is what makes lean engineering so special at GOJEK.</em></em></p><p>“The more boring a rewrite is, the sweeter the success,” — <a href=\"https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Shobhit</a>. After the 2-month long big rewrite, a stable product was live. Pause. Breathe. After 3 days of releasing, no one noticed there was a new codebase/algorithm in place. That’s what success tastes like. Smooth as butter. No issues and achieving scale.</p><h1 id=\"shaping-a-mindset\">Shaping a mindset</h1><p>That’s half the story told. A million mistakes later, we’re still making mistakes. But that’s the good part. We fail fast. We build fast. No hierarchy. <strong><strong>There’s an ingrained mentality of managing more with less. Anything that’s repetitive gets automated</strong></strong>. One could argue this was born out of the desperation of GOJEK products being the arteries criss-crossing through the heart of Indonesia. Regardless, the engineering psyche was passed down and filters through our recruitment. Here’s a reckoner on <a href=\"https://medium.com/gojekengineering/why-we-ask-for-code-b276b45ea790\" rel=\"noopener\">why GOJEK is hard to get into and equally hard to abandon.</a></p><p>The simplification of the story would merely state the Allocation team allocates drivers to customers. But their genesis is filled with fascinating engineering insights. How do you factor supply and demand, how do you reward drivers, manage driver health by reducing the workload, figure surge pricing, check for loopholes, and so on. Each function has dozens of people in similar startups at GOJEK’s scale. We are able to cut this down because of our emphasis on lean engineering. We don’t make compromises on our recruitment either. Leaders code. Everyone codes.</p><p>Engineers are running their own startups in a startup. GOJEK is creating a one of a kind Super App with a platform for other startups to be part of</p><p>Today, anyone within a 300-meter range can grab a ride. That’s only an average. In popular malls near Jakarta, there are drivers every 10 metres or lesser. Then came dashboards and data to crunch driver statistics, daily research to tweak the algorithm. The last time I checked, GOJEK does more than 35+ orders <strong><strong>each second</strong></strong> across our services like GO-FOOD, GO-SEND, GO-MASSAGE etc…</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1200/1*uIDXYaHyIQzvhtIHRThNWA.jpeg\" class=\"kg-image\"></figure><h1 id=\"the-ship-of-theseus\">The ship of Theseus</h1><p>You use a really old car to commute to office. It breaks, stutters and sometimes refuses to move entirely. You can’t scrap it because it’s the only car you have. But you want a supercar. So you go about buying the steering wheel and fixing it to the old car. Then comes the rims, the music system, leather seats and slowly, the car begins to take shape. But it still has components of nostalgia; the car that ferried you in dark times when nothing else would. Stan Marsh is that old car.</p><p><em><em>Remember Stan Marsh? The old legacy code on which GOJEK was being built?</em></em></p><p>10% of Stan Marsh survives. Even till date. (<a href=\"https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf\" rel=\"noopener\">There is a plan to eventually put it to bed</a>) It’s there for legacy reasons. I suspect the team is also sentimental about it. Think of it as the ‘Ship of Theseus’ conundrum. No matter what engineers who join GOJEK think of Stan Marsh, it was the foundation on which GOJEK was built. Smart engineering is also about working with a legacy codebase and improving it. Fly with what you have and make it better. Everything else will follow. The team embraced that challenge.</p><p>It all boils down to the kind of people you let in the system. People are empowered to make decisions at GOJEK. As our India Head, <a href=\"https://medium.com/u/e2e244e6c6b3?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Sidu Ponnappa</a> often repeats, “Don’t throw people at a problem.” It’s a typical outsourcing mindset Indian Engineers have been cajoled into. More people does not mean better work. More people does not mean better code. If that were true, GOJEK simply wouldn’t exist today doing more than a 100 million+ orders a month with a paltry 200+ engineers.</p><hr><p>Story credits: <a href=\"https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Shobhit Srivastava</a>, <a href=\"https://medium.com/u/710d3b419a5a?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Ranjeet Singh</a>, <a href=\"https://medium.com/u/36ce12a82c52?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Mehakdeep Singh</a>, <a href=\"https://medium.com/u/5cffcceadf08?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Bergas Bimo Branarto</a>.</p>","url":"https://gojek-ghost.zysk.in/how-gojek-manages-1-million-drivers-with-12-engineers-part-2/","canonical_url":null,"uuid":"b71c3dd0-28bd-4805-8af7-6071c17748f3","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb12c67f7c7da001effcdd8","reading_time":7},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}},{"node":{"name":"Maps","slug":"maps"}},{"node":{"name":"Ride Hailing","slug":"ride-hailing"}},{"node":{"name":"Software Engineering","slug":"software-engineering"}},{"node":{"name":"Startup","slug":"startup"}}]}},"pageContext":{"slug":"how-gojek-manages-1-million-drivers-with-12-engineers-part-2"}}}