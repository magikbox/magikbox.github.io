{"componentChunkName":"component---src-templates-post-js","path":"/blog/the-secret-sauce-behind-search-personalisation/","result":{"data":{"ghostPost":{"id":"Ghost__Post__5eb12ec4f7c7da001effce0f","title":"The Secret Sauce Behind Search Personalisation","slug":"the-secret-sauce-behind-search-personalisation","featured":false,"feature_image":"https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_x4G3c6-g3z3mz01o2EJdbw.jpg","excerpt":"How Gojek uses machine learning to personalise search results in GoFood.","custom_excerpt":"How Gojek uses machine learning to personalise search results in GoFood.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"02 December, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-05T14:45:48.000+05:30","published_at":"2019-12-02T09:30:00.000+05:30","updated_at":"2020-05-18T20:43:26.000+05:30","meta_title":null,"meta_description":"How Gojek uses machine learning to personalise search results in GoFood.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Jewel James\n\nAre you looking for food? Thinking about burgers and crispy chicken fritters\nwith creamy sauces sitting on a warm, soft bun? At least, that’s what I am\nthinking about. May be you’re different. Vegan perhaps? Or craving noodles? Each\nof us turn into a different person when we are hungry, and this is the story\nabout how GoFood — Gojek’s food delivery service — helps you find the bite you\ncrave.\n\n> At the core of the food ordering experience, sits search.\nSearches are part of so many of our interactions on web and mobile, that we\ndon’t even notice it anymore. This is mostly because modern search engines have\nmatured to a point where they can deliver high quality results even if the\nentered query is a weak signal of the user’s intent. Even when weak, every query\nstill contains a piece of the user’s intent.\n\nIn the case of GoFood, that piece is a fragment of our user’s hunger-driven\nbrain.\n\nIn this post, we’ll discuss how we personalise the search results we surface on\nGoFood, based on the information we have about our users’ food preferences.\n\nHow Each of Us Differ\nLet’s look at two of our GoFood users who have started feeling the pangs of\nhunger, and come online to check restaurants near them.\n\nThey both open our app and click on the NEAR ME tile that lets users find the\nrestaurants near them. We show them the nearest restaurants first, and this is\nwhat they both see.\n\n\nThis list goes on and on and will let them see each restaurant which is farther\nand farther away. They can now peruse the menus of each restaurant and pick one\nthat serves what they feel like ordering. The problem is that they may spend\nsome time scrolling and then leave the app without being able to make up their\nminds around which restaurant to place an order from. We have thrown too many\nchoices at them and the cognitive effort of picking a restaurant and then a dish\nfrom the menu is too much work to make them suffer through.\n\nBut wait. Both Mila and Husain have transacted with us in the past, and we know\na fair bit about their preferences. 🤔\n\nTo make this experience better, we decided to build a system that would let both\nof them see restaurants that suit their own tastes and preferences\n\nApplying Machine Learning to the Problem\nRanking documents for relevance works by assigning a prediction score to each\ndocument retrieved, which is directly proportional to its relevance. In the case\nof NEAR ME restaurant ranking this can be something like:\n\n> Relevance score = 2 * (1/distance) + 1.2 * rating of restaurant\nHere in the relevance score calculation, we are taking weighted sum of different\nfactors like (1/distance) and rating of restaurant. The coefficients/weights of\nthese factors can be arrived at by experimenting with them and choosing weights\nthat seem to maximise the ordering conversions. But, in the case of restaurant\nranking in GoFood, we want to take into consideration many factors when deciding\nrelevance. Unfortunately, experimenting with combinations of all those factors\nis impossible.\n\nEnter Learning to rank. Here, the problem of deciding the rank of the\nrestaurants shown to the user is formulated as a supervised machine learning\nproblem.\n\nIf we look at past search, click, and ordering data, we will be able to assign\nrelevance judgements to each restaurant listing according to whether our users\nclicked or ordered from one of those restaurants. Restaurants that attracted\nhigher degrees of interest will be given higher degrees of relevance.\n\nIn the below example, a relevance judgement level of 0,1 and 2 is assigned to a\nrestaurant according to whether the user viewed, clicked, or ordered from the\nrestaurant in the search result. The relevance judgements are relative and only\nintent to be monotonically increasing with increasing relevance . They say that\nthe restaurant which the user created an order from is more relevant than a\nrestaurant the user merely checked out by clicking on it. They don’t mean that\nthe restaurant which received the order is twice as relevant .\n\nThe values of each of the factors that could have played a role in the user’s\ndecision of clicking or ordering is also shown against the restaurants.\n\nThree of the factors/features in the above example are marked as\n‘personalisation features’ because they would change according to the user’s\nprevious order history and location. These will be the features that will be\ndifferent between Mila and Husain because of the differences in the restaurants\nand cuisines they have ordered from before in the past.\n\n> These personalisation features are at the crux of creating personalised\nexperiences for each user\nOther customer agnostic features/factors like the rating, price range, and\npopularity of the restaurant are also listed here. GoFood has millions of such\nexamples where users with different tastes made different decisions when shown a\nset of search results. These examples can now be used to create a dataset from\nwhich the learning to rank ML algorithm can create a model to decide how\nrelevant a GoFood user would find a restaurant given that user’s location, order\nhistory and other restaurant statistics.\n\nHow We Ranked\nOne way to approach this was as a point-wise ranking problem, wherein we try to\npredict the relevance judgement of each restaurant. Based on this, later we will\npredict the relevance judgement level and sort restaurants in decreasing order\nof predicted relevance score. This approach reduces learning to rank problem to\na regression problem.\n\nAnother approach was to solve it is a pairwise ranking problem, wherein the ML\nmodel is trying to learn how to get the order of a pair of restaurants correct\ni.e if Restaurant A is more preferable to Restaurant B , the order (Restaurant\nA, Restaurant B) is correct and the order (Restaurant B, Restaurant A) is wrong.\n\nFor an ML model to be learned, we need an objective function that captures this\npairwise ordering formulation . This is called a loss function or error function\nin ML and is the measure through which an ML model can assess how right or wrong\nits decision was. In pairwise ranking , this should be a function that becomes\nhigher whenever the model misjudges a preference order and becomes lower when it\nis right about the preference order.\n\nThe loss/error function C is explained below:\n\nWhen this function is minimised, the model is trying to predict a score for each\nrestaurant such that the ranking of the order of the restaurants are close the\nrelevance judgements the users made.\n\nThe pairwise formulation is a better approach here in comparison to the\npoint-wise approach as it is looking to get the order of restaurants right and\nis not trying to estimate the relevance score themselves whose values were\nassigned only as markers to show how some restaurants were more preferred\nrelative to others.\n\nWe used an implementation of the LambdaMART algorithm that learns to predict\nrelevance scores so as to minimise this pairwise loss. You can think of this as\na pursuit to find the decision tree that takes in all the parameters of the\nrestaurant and gives out a score to the restaurant . This score should be\nassigned in such a way as to make the pair orders right.\n\nOnce this model is trained, it can be used during search, as explained in this\npost\n[https://blog.gojekengineering.com/how-the-gojek-butler-serves-a-gourmet-meal-to-our-users-4a161d83052a?source=friends_link&sk=42397976fe914a418ac40f19545f90b7]\n.\n\nNow let’s go back to our beloved customers — Mila and Husain. The next time Mila\nor Husain looks for restaurants near them, the search results they see will be\naccording to their preferences. This is because the model would look at the\nnumber of times they have ordered from each of the restaurants near them before.\nIt would take their preferred cuisines and factors like restaurant ratings into\naccount, and show them the restaurants that they would prefer to order from\nfirst.\n\nThe different search results Mila and Husain get after learning to rank is used\nto re-rank the results are shown below.\n\nWe ran an AB test using this formulation of learning to rank and observed a\nrelative lift of 20% in search to ordering conversions and 23% improvement in\nNDCG. More information on how this metric is calculated here\n[https://blog.gojekengineering.com/is-this-what-you-were-looking-for-439bf012cca6?source=friends_link&sk=bdc1310acc3b6a8270f10284cb30fa53]\n.\n\nWhat We Learned\nOne interesting thing we observed as we started experimenting with this learning\nto rank model was personalising search results led to the average position at\nwhich the search to order conversions happen to be much higher on the list. This\nis because users were increasingly seeing the restaurants that they have some\naffinity towards and were able to make an ordering decision without scrolling\nmuch and without spending too much time being confused where to order from.\n\nSo that’s how we rank restaurant pairs with respect to relevance based on\navailable user data. We’ll continue to write more about how we make our products\nmore intuitive. Stay tuned to this blog, or sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] for email updates. 👌\n\n\n--------------------------------------------------------------------------------\n\n(Special thanks to Sugam Anand [https://twitter.com/SugamAnand] for additional\ndesign support ✌️)\n\n\n--------------------------------------------------------------------------------\n\nWant weekly updates with more of our stories? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] ✌️","html":"<p>By Jewel James</p><p>Are you looking for food? Thinking about burgers and crispy chicken fritters with creamy sauces sitting on a warm, soft bun? At least, that’s what I am thinking about. May be you’re different. Vegan perhaps? Or craving noodles? Each of us turn into a different person when we are hungry, and this is the story about how GoFood — Gojek’s food delivery service — helps you find the bite you crave.</p><blockquote><em><em>At the core of the food ordering experience, sits search.</em></em></blockquote><p>Searches are part of so many of our interactions on web and mobile, that we don’t even notice it anymore. This is mostly because modern search engines have matured to a point where they can deliver high quality results even if the entered query is a weak signal of the user’s intent. Even when weak, every query still contains a piece of the user’s intent.</p><p><em><em>In the case of GoFood, that piece is a fragment of our user’s hunger-driven brain.</em></em></p><p>In this post, we’ll discuss how we personalise the search results we surface on GoFood, based on the information we have about our users’ food preferences.</p><h1 id=\"how-each-of-us-differ\">How Each of Us Differ</h1><p>Let’s look at two of our GoFood users who have started feeling the pangs of hunger, and come online to check restaurants near them.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3192/1*AP6fdakISbNOdEZyCUxa5g.jpeg\" class=\"kg-image\"></figure><p>They both open our app and click on the <code>NEAR ME</code> tile that lets users find the restaurants near them. We show them the nearest restaurants first, and this is what they both see.<br></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/2322/1*tBxtTKY9cfA7rcl5LXq3Ag.jpeg\" class=\"kg-image\"></figure><p>This list goes on and on and will let them see each restaurant which is farther and farther away. They can now peruse the menus of each restaurant and pick one that serves what they feel like ordering. The problem is that they may spend some time scrolling and then leave the app without being able to make up their minds around which restaurant to place an order from. We have thrown too many choices at them and the cognitive effort of picking a restaurant and then a dish from the menu is too much work to make them suffer through.</p><p><strong><strong><em><em>But wait. Both Mila and Husain have transacted with us in the past, and we know a fair bit about their preferences.</em></em> 🤔</strong></strong></p><p>To make this experience better, we decided to build a system that would let both of them see restaurants that suit their own tastes and preferences</p><h1 id=\"applying-machine-learning-to-the-problem\">Applying Machine Learning to the Problem</h1><p>Ranking documents for relevance works by assigning a prediction score to each document retrieved, which is directly proportional to its relevance. In the case of <code>NEAR ME</code> restaurant ranking this can be something like:</p><blockquote><em><em><em>Relevance score = 2 * (1/distance) + 1.2 * rating of restaurant</em></em></em></blockquote><p>Here in the relevance score calculation, we are taking weighted sum of different factors like <em><em>(1/distance) </em></em>and <em><em>rating of restaurant</em></em>. The coefficients/weights of these factors can be arrived at by experimenting with them and choosing weights that seem to maximise the ordering conversions. But, in the case of restaurant ranking in GoFood, we want to take into consideration many factors when deciding relevance. Unfortunately, experimenting with combinations of all those factors is impossible.</p><p>Enter L<em><em>earning to rank</em></em>. Here, the problem of deciding the rank of the restaurants shown to the user is formulated as a supervised machine learning problem.</p><p>If we look at past search, click, and ordering data, we will be able to assign relevance judgements to each restaurant listing according to whether our users clicked or ordered from one of those restaurants. Restaurants that attracted higher degrees of interest will be given higher degrees of relevance.</p><p>In the below example, a relevance judgement level of 0,1 and 2 is assigned to a restaurant according to whether the user viewed, clicked, or ordered from the restaurant in the search result. The relevance judgements are relative and only intent to be monotonically increasing with increasing relevance . They say that the restaurant which the user created an order from is more relevant than a restaurant the user merely checked out by clicking on it. <strong><strong>They don’t mean that the restaurant which received the order is twice as relevant .</strong></strong></p><p>The values of each of the factors that could have played a role in the user’s decision of clicking or ordering is also shown against the restaurants.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/2376/1*X0Oe0KA7ZTU2wYa2SXS_CA.png\" class=\"kg-image\"></figure><p>Three of the factors/features in the above example are marked as ‘personalisation features’ because they would change according to the user’s previous order history and location. These will be the features that will be different between Mila and Husain because of the differences in the restaurants and cuisines they have ordered from before in the past.</p><blockquote>These personalisation features are at the crux of creating personalised experiences for each user</blockquote><p>Other customer agnostic features/factors like the rating, price range, and popularity of the restaurant are also listed here. GoFood has millions of such examples where users with different tastes made different decisions when shown a set of search results. These examples can now be used to create a dataset from which the learning to rank ML algorithm can create a model to decide how relevant a GoFood user would find a restaurant given that user’s location, order history and other restaurant statistics.</p><h1 id=\"how-we-ranked\">How We Ranked</h1><p>One way to approach this was as a point-wise ranking problem, wherein we try to predict the relevance judgement of each restaurant. Based on this, later we will predict the relevance judgement level and sort restaurants in decreasing order of predicted relevance score. This approach reduces learning to rank problem to a regression problem.</p><p>Another approach was to solve it is a pairwise ranking problem, wherein the ML model is trying to learn how to get the order of a pair of restaurants correct i.e if Restaurant A is more preferable to Restaurant B , the order (Restaurant A, Restaurant B) is correct and the order (Restaurant B, Restaurant A) is wrong.</p><p>For an ML model to be learned, we need an objective function that captures this pairwise ordering formulation . This is called a loss function or error function in ML and is the measure through which an ML model can assess how right or wrong its decision was. In pairwise ranking , this should be a function that becomes higher whenever the model misjudges a preference order and becomes lower when it is right about the preference order.</p><p>The loss/error function <strong><strong><em><em>C</em></em></strong></strong> is explained below:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3316/1*2sWi_7l1iI_-dRppVoaGRA.png\" class=\"kg-image\"></figure><p>When this function is minimised, the model is trying to predict a score for each restaurant such that the ranking of the order of the restaurants are close the relevance judgements the users made.</p><p>The pairwise formulation is a better approach here in comparison to the point-wise approach as it is looking to get the order of restaurants right and is not trying to estimate the relevance score themselves whose values were assigned only as markers to show how some restaurants were more preferred relative to others.</p><p>We used an implementation of the LambdaMART algorithm that learns to predict relevance scores so as to minimise this pairwise loss. You can think of this as a pursuit to find the decision tree that takes in all the parameters of the restaurant and gives out a score to the restaurant . This score should be assigned in such a way as to make the pair orders right.</p><p>Once this model is trained, it can be used during search, as explained in <a href=\"https://blog.gojekengineering.com/how-the-gojek-butler-serves-a-gourmet-meal-to-our-users-4a161d83052a?source=friends_link&amp;sk=42397976fe914a418ac40f19545f90b7\">this post</a>.</p><p>Now let’s go back to our beloved customers — Mila and Husain. The next time Mila or Husain looks for restaurants near them, the search results they see will be according to their preferences. This is because the model would look at the number of times they have ordered from each of the restaurants near them before. It would take their preferred cuisines and factors like restaurant ratings into account, and show them the restaurants that they would prefer to order from first.</p><p>The different search results Mila and Husain get after learning to rank is used to re-rank the results are shown below.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/7545/1*ALMsK5OzG3rUACrx_U3E0g.jpeg\" class=\"kg-image\"></figure><p>We ran an AB test using this formulation of learning to rank and observed a relative lift of 20% in search to ordering conversions and 23% improvement in NDCG. More information on how this metric is calculated <a href=\"https://blog.gojekengineering.com/is-this-what-you-were-looking-for-439bf012cca6?source=friends_link&amp;sk=bdc1310acc3b6a8270f10284cb30fa53\" rel=\"noopener\">here</a>.</p><h1 id=\"what-we-learned\">What We Learned</h1><p>One interesting thing we observed as we started experimenting with this learning to rank model was personalising search results led to the average position at which the search to order conversions happen to be much higher on the list. This is because users were increasingly seeing the restaurants that they have some affinity towards and were able to make an ordering decision without scrolling much and without spending too much time being confused where to order from.</p><p>So that’s how we rank restaurant pairs with respect to relevance based on available user data. We’ll continue to write more about how we make our products more intuitive. Stay tuned to this blog, or <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">sign up for our newsletter</a> for email updates. 👌</p><hr><p>(Special thanks to <a href=\"https://twitter.com/SugamAnand\" rel=\"noopener\">Sugam Anand</a> for additional design support ✌️)</p><hr><p>Want weekly updates with more of our stories? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a> ✌️</p>","url":"https://gojek-ghost.zysk.in/the-secret-sauce-behind-search-personalisation/","canonical_url":null,"uuid":"f53d2946-dab7-43e3-af3b-5453077e95ee","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb12ec4f7c7da001effce0f","reading_time":7},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}},{"node":{"name":"Maps","slug":"maps"}},{"node":{"name":"Ride Hailing","slug":"ride-hailing"}},{"node":{"name":"Software Engineering","slug":"software-engineering"}},{"node":{"name":"Startup","slug":"startup"}}]}},"pageContext":{"slug":"the-secret-sauce-behind-search-personalisation"}}}