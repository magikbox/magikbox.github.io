{"componentChunkName":"component---src-templates-index-js","path":"/blog/","result":{"data":{"latestFeaturedPost":{"edges":[{"node":{"id":"Ghost__Post__5eaf9f2234df85001e15f42d","title":"OK Google, Meet Gojek","slug":"ok-google-meet-gojekwe-added-gojeks-ride-hailing-and-food-ordering-functions-to-google-assistant-heres-what-we-learned-in-the-process","featured":true,"feature_image":"https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_QaQg1VnVWuhAebytXO-gKg.jpg","excerpt":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.","custom_excerpt":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.","visibility":"public","created_at_pretty":"04 May, 2020","published_at_pretty":"04 May, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-05-04T10:20:42.000+05:30","published_at":"2020-05-04T10:33:07.000+05:30","updated_at":"2020-05-12T11:46:27.000+05:30","meta_title":"Ok Google, Meet Gojek","meta_description":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant.\nHere’s what we learned in the process.\nBy Vikas Bajpayee and Lokesh Kalal\n\nOur aim behind building a Super App was to help our users get rid of the daily\nfrictions in their lives. But the journey doesn’t stop there. Even after\nbuilding all these convenient products, we still try and reduce frictions that\nmay be encountered even within our app — such as booking a ride or ordering\nfood.\n\nSo we thought, why don’t we integrate with Google Assistant, and let our users\ncommunicate with our products in a new way?\n\nIn this post, we explain how we integrated our food and transport products with\nthe Google Assistant.\n\nThe why\nWe’ve already addressed one part of the why — convenience. The other is user\nre-engagement. According to this survey\n[https://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/?utm_content=buffere4fa2&utm_medium=twitter.com&utm_source=social&utm_campaign=buffer] \nconducted by Silicon Valley researcher Andrew Chen 77% of users stop using an\napp three days after they install it. Within a month, that number goes up to\n90%. ?\n\nThe how\nTo help integrate Android apps with the Google Assistant, Google launched App\nActions:\n\nWhat are app actions?\nApp Actions are a new way to make your android app content available in places\nlike Google Search, Google Assistant etc. From a user’s perspective, App Actions\nbehave like shortcuts to parts of your Android app. When users invoke an App\nAction, the Assistant either launches a screen in the Android app that the user\nhas already installed or shows an embedded visual card (Android Slice) that\nusers can interact with.\n\nApp actions provide a faster way for users to access Android apps. It can be\nachieved in two ways:- either user can be directed to a specific\nactivity(screen) using a deep link or user may see relevant content on the\nAssistant itself called Slices.\n\nMore info on this can be found here: \nhttps://developers.google.com/assistant/app/overview\n\nWhat are Slices?\nSlices are super-powered app actions. They provide a way to interact with apps\nwithout moving away from Assistant by showing a small piece of UI within\nAssistant. Slices are UI templates that can display rich, dynamic, and\ninteractive content from the app in Google Assistant.\n\nSlices can help users perform tasks faster by enabling engagement outside of the\nfullscreen app experience.\n\nYou can build Slices as enhancements to App Actions.\n\nHere’s an example:\n\nWe choose to use slices to show food order status, as the order status will have\nlimited information (eg. Driver is on the way to Restaurant, with his location\non Map ) which can be easily shown in a small piece of UI segment.\n\nIn fact, this functionality was recently demoed on stage at a Google event in\nIndonesia. You can check it out below:\n\nApp Actions Demo at #Google4ID 2019How does it work?\nWhenever a user says or types something in Assistant, assistant parses the\nquery. If the query matches the built-in intent\n[https://developers.google.com/assistant/app/reference/built-in-intents] grammar\nthen Google Assistant extracts the query parameter in schema.org\n[https://schema.org/] and generates a deep link URL using the mapping we provide\nin an actions.xml file.\n\nGoogle then attaches those extracted parameters to the deep link URL and creates\na final deep link which allows a user to launch specific content or screens in\nthe app.\n\nLet’s dig a little deeper:\n\nGoogle applies Machine Learning and Artificial Intelligence (Natural Language\nProcessing) to understand all the sentences we type in Assistant.\n\nWhile users can type anything they want in Assistant and the system gets better\nat interpreting them over time, but there are some sentences for specific intent\nthat are fixed by Google. More info here\n[https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation]\n.\n\nHow did we integrate our services with Assistant?\nThe core of integrating Gojek with Assistant involved creating actions on Google\nAssistant with actions.xml file.\n\nLet’s explore how to do this:\n\n1. Create actions.xml file in your XML folder. This contains all the actions\nwith built-in intents which define what actions our app can support in the\nAssistant. Each action contains built-in intents\n[https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation] \nsupported by Google as a <intent-name> tag.\n\n2. Define a fulfilment mode for each app action — which can be deep links or\nslices. You have to pass a fulfilment mode in each action. This is compulsory.\n\n3. Pass the URL template which will allow a user to launch your app — this can\nbe the deep link to your app or URL to Slice provider.\n\n4. Define entity-set — the Gojek app is available in multiple locales, so to\nprovide locale for all the regions, we added the entity-set, which allows\nAssistant to understand more than one version of category. ex:- taxi can be\npronounced as taksi in Bahasa.\n\nSo, If you want locale for your specific parameter in deep-link URL, you can\nsimply attach an entity-set with that parameter, see how you can achieve this in\nbelow example\n\n<parameter name=”taxiReservation.category”><entity-set-reference\nentitySetId=”TransportCategoryEntitySet” /></parameter>\n\n5. Add a reference to actions.xml file using the <meta> tag in your app’s\nmanifest.xml file inside the application tag.\n\nIn order to integrate Slices:\n\n 1. Implement an Android Slice by following the steps described in the Slices\n    Getting Started guide\n    [https://developer.android.com/guide/slices/getting-started].\n 2. In the actions.xml file, in the <fulfillment> element, specify \n    fulfillmentMode=“actions.fulfillment.SLICE” to indicate that a user intent\n    can be fulfilled using a Slice in your app.\n\nA few quick notes on what we learnt\n 1. Testing this feature is pretty hard and things become weird when you have\n    multiple build types of your app. For testing, you need a build type on the\n    Play Store, (which means the package name of the testing build should match\n    the package name of the published app). You can use a plugin (developed by\n    Google) called App Actions Test Tool\n    [https://developers.google.com/assistant/app/test-tool] for testing this\n    feature.\n\n> Please make sure you are following points while testing with App Actions Test\nTool:\na) Log in to Android Studio and Google Assistant with the account which has\naccess to your published app on Play console.\nb) ApplicationId of the app should be the same as your published app.\nc) Your Gradle should be built successfully.\nd) Use App Action Tool to create and update preview and test the app actions and\nslice.\n2. If your app is used in different locales, you can create locales using \nentity-set\n[https://developers.google.com/assistant/app/action-schema#entity-set-reference] \nin the actions.xml file.\n\n3. In order to give early builds to QA or other users (if you have multiple\nbuild types in your app), you can create an internal test track on Play console\nand add relevant people to it. This allows you to share the build to production\nfor only some listed users.\n\n(See this\n[https://support.google.com/googleplay/android-developer/answer/3131213?hl=en] \nfor how you can create an internal test track for your app.)\n\n4. Actions.xml shouldn’t be obfuscated in release apk — it means if you are\nusing any obfuscated tools like proguard then actions.xml shouldn’t be\nobfuscated there.\n\n5. Slices can be requested before the onCreate of your application is completed.\nYou can run into issues if you are using something which is initialised in \nonCreate while creating slices.\n\n6. Don't refresh slices from onBindSlice() method, it will end up in an infinite\nloop where Google Assistant will call onBindSlice() infinitely.\n\nThat’s all from us folks. Hope this post gave you a better understanding of how\nApp Actions and Slices work with Google Assistant. Working on this feature was\nan amazing experience for us. If you use the Gojek app, make sure to give them a\ntry and let us know what you think. ?\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] and we’ll send you updates\nfrom the blog straight to your inbox! ?","html":"<h3 id=\"we-added-gojek-s-ride-hailing-and-food-ordering-functions-to-google-assistant-here-s-what-we-learned-in-the-process-\">We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.</h3><p><strong><strong><em>By Vikas Bajpayee and Lokesh Kalal</em></strong></strong></p><p>Our aim behind building a Super App was to help our users get rid of the daily frictions in their lives. But the journey doesn’t stop there. Even after building all these convenient products, we still try and reduce frictions that may be encountered even within our app — such as booking a ride or ordering food.</p><p>So we thought, why don’t we integrate with Google Assistant, and let our users communicate with our products in a new way?</p><p>In this post, we explain how we integrated our food and transport products with the Google Assistant.</p><h1 id=\"the-why\">The why</h1><p>We’ve already addressed one part of the <em><em>why — </em></em>convenience. The other is user re-engagement. According to <a href=\"https://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/?utm_content=buffere4fa2&amp;utm_medium=twitter.com&amp;utm_source=social&amp;utm_campaign=buffer\" rel=\"noopener\">this survey</a> conducted by Silicon Valley researcher Andrew Chen 77% of users stop using an app three days after they install it. Within a month, that number goes up to 90%. ?</p><h1 id=\"the-how\">The how</h1><p>To help integrate Android apps with the Google Assistant, Google launched App Actions:</p><h2 id=\"what-are-app-actions\">What are app actions?</h2><p>App Actions are a new way to make your android app content available in places like Google Search, Google Assistant etc. From a user’s perspective, App Actions behave like shortcuts to parts of your Android app. When users invoke an App Action, the Assistant either launches a screen in the Android app that the user has already installed or shows an embedded visual card (Android Slice) that users can interact with.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/260/1*w4jk-CTME9amkb5dsIQDzw.gif\" class=\"kg-image\"></figure><p>App actions provide a faster way for users to access Android apps. It can be achieved in two ways:- either user can be directed to a specific activity(screen) using a deep link or user may see relevant content on the Assistant itself called Slices.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/260/1*KPBLtVMjiHBOPEJ53E9F8A.gif\" class=\"kg-image\"></figure><p>More info on this can be found here: <a href=\"https://developers.google.com/assistant/app/overview\" rel=\"noopener\">https://developers.google.com/assistant/app/overview</a></p><h2 id=\"what-are-slices\"><strong>What are Slices?</strong></h2><p>Slices are super-powered app actions. They provide a way to interact with apps without moving away from Assistant by showing a small piece of UI within Assistant. Slices are UI templates that can display rich, dynamic, and interactive content from the app in Google Assistant.</p><p><em><em>Slices can help users perform tasks faster by enabling engagement outside of the fullscreen app experience.</em></em></p><p>You can build Slices as enhancements to App Actions.</p><p>Here’s an example:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1080/1*EFF30b3185UtwKYjx0VP1A.jpeg\" class=\"kg-image\"></figure><p>We choose to use slices to show food order status, as the order status will have limited information (eg. Driver is on the way to Restaurant, with his location on Map ) which can be easily shown in a small piece of UI segment.</p><p>In fact, this functionality was recently demoed on stage at a Google event in Indonesia. You can check it out below:</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F0u20Iu4m2Co%3Fstart%3D5805%26feature%3Doembed%26start%3D5805&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0u20Iu4m2Co&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F0u20Iu4m2Co%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" allowfullscreen=\"\" frameborder=\"0\" height=\"480\" width=\"854\" title=\"#Google4ID 2019\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 382.188px;\"></iframe><figcaption>App Actions Demo at #Google4ID 2019</figcaption></figure><h1 id=\"how-does-it-work\"><strong>How does it work?</strong></h1><p>Whenever a user says or types something in Assistant, assistant parses the query. If the query matches the<a href=\"https://developers.google.com/assistant/app/reference/built-in-intents\" rel=\"noopener\"> built-in intent</a> grammar then Google Assistant extracts the query parameter in<a href=\"https://schema.org/\" rel=\"noopener\"> schema.org</a> and generates a deep link URL using the mapping we provide in an actions.xml file.</p><p>Google then attaches those extracted parameters to the deep link URL and creates a final deep link which allows a user to launch specific content or screens in the app.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1490/0*jUlpzwbXbFIgGy7s\" class=\"kg-image\"></figure><p>Let’s dig a little deeper:</p><p>Google applies Machine Learning and Artificial Intelligence (Natural Language Processing) to understand all the sentences we type in Assistant.</p><p>While users can type anything they want in Assistant and the system gets better at interpreting them over time, but there are some sentences for specific intent that are fixed by Google. More info <a href=\"https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation\" rel=\"noopener\">here</a>.</p><h1 id=\"how-did-we-integrate-our-services-with-assistant\"><strong>How did we integrate our services with Assistant?</strong></h1><p>The core of integrating Gojek with Assistant involved creating actions on Google Assistant with actions.xml file.</p><p>Let’s explore how to do this:</p><p>1. Create <strong><strong>actions.xml</strong></strong> file in your XML folder. This contains all the actions with built-in intents which define what actions our app can support in the Assistant. Each action contains<a href=\"https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation\" rel=\"noopener\"> built-in intents</a> supported by Google as a &lt;intent-name&gt; tag.</p><p>2. Define a fulfilment mode for each app action — which can be deep links or slices. You have to pass a fulfilment mode in each action. This is compulsory.</p><p>3. Pass the URL template which will allow a user to launch your app — this can be the deep link to your app or URL to Slice provider.</p><p>4. Define entity-set — the Gojek app is available in multiple locales, so to provide locale for all the regions, we added the entity-set, which allows Assistant to understand more than one version of category. ex:- taxi can be pronounced as taksi in Bahasa.</p><p>So, If you want locale for your specific parameter in deep-link URL, you can simply attach an entity-set with that parameter, see how you can achieve this in below example</p><p><em>&lt;parameter name=”taxiReservation.category”&gt;&lt;entity-set-reference entitySetId=”TransportCategoryEntitySet” /&gt;&lt;/parameter&gt;</em></p><p>5. Add a reference to <strong><strong>actions.xml</strong></strong> file using the &lt;meta&gt; tag in your app’s manifest.xml file inside the application tag.</p><p><strong><strong>In order to integrate Slices:</strong></strong></p><ol><li>Implement an Android Slice by following the steps described in the <a href=\"https://developer.android.com/guide/slices/getting-started\" rel=\"noopener\">Slices Getting Started guide</a>.</li><li>In the actions.xml file, in the <code>&lt;fulfillment&gt;</code> element, specify <code>fulfillmentMode=“actions.fulfillment.SLICE”</code> to indicate that a user intent can be fulfilled using a Slice in your app.</li></ol><h1 id=\"a-few-quick-notes-on-what-we-learnt\"><strong>A few quick notes on what we learnt</strong></h1><ol><li>Testing this feature is pretty hard and things become weird when you have multiple build types of your app. For testing, you need a build type on the Play Store, (which means the package name of the testing build should match the package name of the published app). You can use a plugin (developed by Google) called<a href=\"https://developers.google.com/assistant/app/test-tool\" rel=\"noopener\"> <strong><strong>App Actions Test Tool</strong></strong></a> for testing this feature.</li></ol><blockquote><em><em>Please make sure you are following points while testing with App Actions Test Tool:</em></em><br><em><em>a) Log in to Android Studio and Google Assistant with the account which has access to your published app on Play console.</em></em><br><em><em>b) <code>ApplicationId</code> of the app should be the same as your published app.</em></em><br><em><em>c) Your Gradle should be built successfully.</em></em><br><em><em>d) Use App Action Tool to create and update preview and test the app actions and slice.</em></em></blockquote><p>2. If your app is used in different locales, you can create locales using <a href=\"https://developers.google.com/assistant/app/action-schema#entity-set-reference\" rel=\"noopener\">entity-set</a> in the actions.xml file.</p><p>3. In order to give early builds to QA or other users (if you have multiple build types in your app), you can create an internal test track on Play console and add relevant people to it. This allows you to share the build to production for only some listed users.</p><p>(See <a href=\"https://support.google.com/googleplay/android-developer/answer/3131213?hl=en\" rel=\"noopener\">this</a> for how you can create an internal test track for your app.)</p><p>4. Actions.xml shouldn’t be <strong><strong>obfuscated</strong></strong> in release apk — it means if you are using any obfuscated tools like proguard then actions.xml shouldn’t be obfuscated there.</p><p>5. Slices can be requested before the <code>onCreate</code> of your application is completed. You can run into issues if you are using something which is initialised in <code>onCreate</code> while creating slices.</p><p>6. Don't refresh slices from <code>onBindSlice()</code> method, it will end up in an infinite loop where Google Assistant will call <code>onBindSlice()</code> infinitely.</p><p>That’s all from us folks. Hope this post gave you a better understanding of how App Actions and Slices work with Google Assistant. Working on this feature was an amazing experience for us. If you use the Gojek app, make sure to give them a try and let us know what you think. ?</p><hr><p>Liked what you read? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a> and we’ll send you updates from the blog straight to your inbox! ?</p>","url":"https://gojek-ghost.zysk.in/ok-google-meet-gojekwe-added-gojeks-ride-hailing-and-food-ordering-functions-to-google-assistant-heres-what-we-learned-in-the-process/","canonical_url":null,"uuid":"a980d332-756f-4f47-a97f-921a11196ed7","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eaf9f2234df85001e15f42d","reading_time":6}}]},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5ec94e8c7aa22c4066f83db2","title":"Tips for Building Smooth Live Tracking","slug":"tips-for-building-smooth-live-tracking","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking-1.jpeg","excerpt":"How did we manage to build accurate tracking and smooth animations in our app? Here are your answers.","custom_excerpt":"How did we manage to build accurate tracking and smooth animations in our app? Here are your answers.","visibility":"public","created_at_pretty":"23 May, 2020","published_at_pretty":"22 May, 2020","updated_at_pretty":"23 May, 2020","created_at":"2020-05-23T21:55:48.000+05:30","published_at":"2020-05-22T09:00:00.000+05:30","updated_at":"2020-05-23T22:31:54.000+05:30","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Ride Hailing","slug":"ride-hailing","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Startup","slug":"startup","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Maps","slug":"maps","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Software Engineering","slug":"software-engineering","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Divya Vikash\n\nIt’s a nice Monday morning and you just ordered a GoRide (one of Gojek’s\ntransport products) to go to your office. Voila!! You got a driver. That was\nfast. You can see your driver’s location on the map, and the estimated time they\nwould take to come to you.\n\nBut hang on… It seems like the map is a bit messed up.\n\nThe driver location on the map goes back and forth at unreal speed, and even\nflies over buildings. Starring in an action movie is not exactly how you want to\nstart your week. 😮\n\nWhile our driver-partners sure are superman in their own unique way, they\ncertainly can’t drive over buildings. This is clearly not how your driver is\nactually driving on the road. But then why is the map showing all this?\n\nWell, there are multiple factors that can lead to a bad experience like that.\nSome within our control, some not so much (as of now). We decided to go back to\nthe drawing board and figure out the issues that are in our control and fix them\nfor good. And that is how we built a world-class (arguably 😬) live-tracking\nexperience.\n\nBut what is live-tracking, you would ask?\n\nLive tracking is a complete map experience. It doesn’t involve anything other\nthan what you see on maps after you get a driver.\n\nSo, what do you see on maps?\n\n 1. Driver's location depicted by a green marker.\n 2. The routes.\n 3. The change in driver marker as the driver moves closer to your pickup/your\n    destination.\n 4. The change in route as the driver moves.\n\nAnd that’s it. That’s all live-tracking is.\n\n> But that sounds quite simple. Right? Use some routing APIs and plot the markers\nand routes.\nWell, yes, it sounded easy to us when we first heard about it too. The real\nexperience threw us a few curveballs. Let’s go through how we create a\nlive-tracking experience.\n\nInput\n\nLet’s look at the input data that we need to create a live-tracking animation:\n\nDriver Location and Routes\n\nOur driver apps have an in-built mechanism to upload driver location to our\nbackend at regular intervals. This is how we are able to find a driver close to\nyour location when you order one of our services. The primary input to\nlive-tracking is this driver location.\n\nIn our driver app, we get this location using Android’s FusedLocationProvider \nAPI which automatically uses the best location provider(GPS, Wifi, etc). The\ndriver location is ingested into our backend system via a continuous stream.\nRoutes are generated by our internal routing engine and provided to the customer\napp.\n\nInput Source\nAs you would have guessed, this data is provided via API calls initiated by the\nour Super App to the routing engine.\n\nMaking the API call just once won’t be sufficient. Right? The app needs to be\ninformed every time the driver’s location has changed. So, the customer app\npolls this API every few seconds to get this data.\n\nNow, we have a continuous stream of data flowing to our app which has all the\ninformation that we need to show the vehicle animation on the road.\n\nTerminology\nBefore moving forward, we should get acquainted with a few terminologies that we\nwould use quite frequently in this post.\n\n 1. Route: The entire list of latitude-longitudes between the driver location to\n    the pickup/destination location.\n 2. Segment: A segment is the smallest unit of a route. It is a straight line\n    from one position in the routes list to the very next position in the routes\n    list.\n\nA route of length n has n-1 segments. Confused? Yeah, let’s take an example.\n\nA Route looks like this:\n\n[{-62441198, 106.8032959},\n{-6.2440766, 106.80328}, \n{-6.2439977, 106.8033275},\n{-6.2434893, 106.8029214},\n{-6.2433926, 106.8030539},\n{-6.2436018, 106.803222}]\n\nThere are 5 Segments in this route.\n\nSegment 1: {-6.2441198, 106.8032959,-6.2440766, 106.80328}\nSegment 2: {-6.2440766, 106.80328,-6.2439977, 106.8033275}\nSegment 3: {-6.2439977, 106.8033275,-6.2434893, 106.8029214}\nSegment 4: {-6.2434893, 106.8029214,-6.2433926, 106.8030539}\nSegment 5: {-6.2433926, 106.8030539,-6.2436018, 106.8032224}\n\nThe initial setup\nWhen the user lands on the live tracking screen, the app immediately makes a\ncall to our internal API to get the driver location and route. Once we get this\ndata, we plot it on the map using the standard GoogleMap methods. \ngoogleMap.addMarker(), googleMap.addPolyline() etc.\n\nSometimes, we don’t have the routing information available immediately, so we\njust show the driver marker. We also store this data locally in an in-memory\ncache as we would need it later to do some comparisons.\n\nSo, the customer is able to see the markers and routes on the map now. So far so\ngood.\n\nThe subsequent updates\nAs I mentioned earlier, we need to change the position of driver marker and\nroute as the driver moves. The customer app makes a call to the same internal\nAPI every few seconds. After the first response, we don’t move any markers or\nroutes on the map until the next response succeeds.\n\nIn the next response, we again get the same data points i.e the route and driver\nlocation but with different values, of course, if the driver has moved. The next\nset of data that we get can have the following characteristics:\n\n 1. Route and driver location don’t change\n 2. Route changes\n 3. Route doesn’t change BUT driver location does\n\nLet’s discuss these cases one by one.\n\n1: Route and driver location don’t change\nIf nothing has changed, we don’t need to do anything. Probably our driver\npartner is stuck in traffic. 😞\n\n2: Route changes\nThis can happen either when:\n\n 1. The app was not showing any route to the user before i.e the first response\n    didn’t have the route.\n 2. The app was showing a route that is different from the newly received route.\n    This usually happens in cases where the driver starts following a different\n    route from the one they were following before. This can also happen due to\n    road closures or simply because our driver-partner initially followed a\n    wrong route by mistake 😅.\n\nIn either of these cases, we simply ignore the old driver marker and routes\nwhich were shown and plot the new marker and routes.\n\n3: Route doesn’t change BUT driver location does\nThe app was showing the same route to the user before i.e the old response had\nthe same route as the new response. This means that the driver is following the\noriginal route that we determined.\n\nIn this case, we need to animate the driver marker on the map from the old\nlocation to the new location along the same route. This is the most common\nscenario, which can again be broken down further into multiple scenarios (yeah,\nI’m all about breaking things down 🤐).\n\n3.1: Does the new location lie on the route?\nTo animate the driver marker from it’s current position to the new location, we\nfirst need to know whether the new location lies on the route or not.\n\nYeah, we can’t be sure that the driver location that we have received would\nalways lie on the route/road because of various GPS inaccuracy issues.\n\nWe iterate through every segment in the route to find the segment which has the\nnew location. For every segment, we use the Geometry/PolyUtil library to\ndetermine whether the driver location lies on that route.\n\nWe also specify a tolerance of a few meters to account for GPS inaccuracy. So,\nif the newly received location is within a radius of X meters near a segment,\nthis method will return true.\n\nAndroid\n\nboolean isLocationOnPath(LatLng point,List<LatLng> polyline,boolean geodesic,\ndouble tolerance)\n\niOS\n\nBOOL GMSGeometryIsLocationOnPathToleranc\n[https://developers.google.com/maps/documentation/ios-sdk/reference/group___geometry_utils#ga580ba381b9d4fbc0ff430cf69e06e66d]\ne(CLLocationCoordinate2D point,GMSPath\n[https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_path] \n* path,BOOL geodesic,CLLocationDistance tolerance)\n\nIf the location doesn’t lie on any of the segments in the route, we are sad and\nso, we don’t animate anything. But if it does, we go forward with the next step\nwhich is….\n\n3.2: Vehicle projection on route\nWhen we receive a new location, the start location is simply the position that\nthe driver marker is already at. No logic required there to calculate that.\n\nThe end location should simply be the new location that we received. Well, in an\nideal world, it should be but we live so far away from an ideal world 😞.\n\nAs we mentioned earlier, the raw driver location that we get from the driver app\nvia GPS/other providers mostly doesn’t lie on the road. So, we have to find a\nprojection of the driver location on the road/route.\n\nIf you have been reading carefully, you might wonder why we can’t just use the \nisLocationOnPath() method above 🤔.\n\nWell, if you had been reading more carefully, you might have noticed that this\nmethod returns a boolean explaining whether the location is on/near the route or\nnot 🤦‍♂. It doesn’t return the projected location. (Ohh..if someone from Maps\nUtils stumbled upon this by chance, please add that method, good sir).\n\nSo, we had to revise some maths. Yeah, folks, learn your maths well. You never\nknow when a situation like this might arise 🤷‍♂.\n\n“Find the projection of point (x,y) on the line y = mx + c”. Does that ring a\nbell? Drawing a perpendicular line towards the segment and calculating the\nlocation of where the line and route intersect can give us the projected\nlocation. Right?\n\nWell, the above approach works for 2-D systems but earth is not a 2-D space. We\nneed a way to project the spherical surface of the earth onto a rectangle 2-D\nspace. There are several ways to do that. All of them have certain drawbacks. We\nmight lose information like direction or the shape of landmasses/countries or\nthe area information.\n\nMercator Projection\n\nMercator projection is one of the available methods to project the spherical map\nof earth onto a rectangle to make usable maps. Most of the mapping tools used\nfor navigation use this projection.\n\nThe key feature of Mercator projection is that it retains the direction\ninformation. That means if point A is 30deg east from north of point B on the\nglobe, it will be in the same direction on its Mercator projection. Or say there\nis a turn of 90deg in some lane, it will be 90deg on Mercator projection as\nwell. That is the reason it works really well for navigation purposes.\n\nHow to use a Mercator projection?\n\n 1. Every point on the earth is projected on a cylinder exactly like point A\n    which has point A’ on the cylinder.\n 2. Once all the required points/routes are projected on this cylinder. It is\n    unrolled, and we obtain a rectangle like the one shown above.\n 3. All the planar geometry can be applied with a very little margin of error on\n    this 2D projected map.\n 4. After processing all the points/routes they can be converted back to\n    latitude and longitude on the globe.\n\nSo, now we have the projected driver location on the route which we will fondly\ncall snapped point going forward.\n\n3.3: End-to-End animation\nThe new driver location that we receive can be present in any segment. It may be\nthat it is in the same segment or it may be that it is on the next segment or on\nthe next one or it may be that it is on the last segment.\n\nBut for linear animation, we need a start point and an end point. The start\npoint is the current position of the driver marker. We already got the snapped\nendpoint in the earlier section. But we can’t just animate from start to end at\nonce as that would seem like the car is flying and ignoring U-turns, routes,\netc. So, how do we prevent it from flying?\n\nWhat do you do when you can’t fly to a place? You follow the road. Right? That’s\nwhat we have to do as well. Make the driver marker follow the route/road. We\nneed to animate along each segment in the route until we reach the segment which\nhas the driver position that we received.\n\nThere are again two cases here 😜:\n\n3.3.1: The new driver location is on the same segment\nIn this case, we can directly animate from the current position of driver marker\nto the driver location that we received since this is just a straight line\nanimation.\n\nA segment is always a straight line. We will discuss more on how to do the\nanimation b/w 2 points in a later section.\n\n3.3.2: The new driver location is on a different segment\nIn this case, we need to animate to that segment along the route. We have to\nanimate along each of the segments in between to reach the final segment.\n\nFor animation along the first segment, we set the endpoint of the animation to\nthe beginning of the next segment in the route. We animate to the end of the\nfirst segment.\n\nThe next segment may also not have the driver location that we received. After a\ndriver has traversed the first segment, we move the end location of the\nanimation to the end of the next segment, and so on and so forth till we reach\nthe last segment. Confusing, ya? Let’s see an example.\n\nSo much zig-zag (huh!!)The car icon(A) represents the location in the segment\nwhere the driver marker currently is. The red pin(X) represents the new snapped\nlocation received.\n\nIn the 1st animation, we move the driver marker from A to the end of the first\nsegment (B).\n\nIn the 2nd animation, the driver marker is moved through the entire length of\nthe 2nd segment.\n\nAnd so on and so forth till we reach the segment which has the newly received\nsnapped location (X).\n\nAnimation in a segment\nWe now know how the overall animation would look like. But we also need to\nconfigure how the smallest unit of the animation i.e animation in a segment\nshould happen.\n\nStart point and End point: For case #1 above, the animation in a segment will\nhappen just once. For case #2 above, this animation in a segment will happen\nmultiple times. Start and endpoints will be determined before beginning each of\nthe animations.\n\nBearing b/w these two points: Bearing can be calculated using another one of\nGeometry/Maps Utils method.\n\nSphericalUtil.computeHeading(startPosition, endPosition)\n\nDuration of animation: Calculating duration is a bit tricky. And the duration is\nthe most important thing in any animation. Sometimes the difference b/w a smooth\nand a choppy animation is caused by the duration. It was very important that we\ngot it right. So, let’s take a break and see how to calculate the duration.\n\nWhat is Duration?\nIt’s the amount of time for which the animation should happen. But you already\nknow that. Going back to middle school maths (yeah, that far), how do you\ncalculate time? Time is nothing but distance divided by speed. Correct?\nCalculating straight line distance b/w the two points we want to animate through\nis pretty easy.\n\nSphericalUtil.computeDistanceBetween(startLocation, endLocation)\n\nCool, cool. But what about speed? How should we calculate speed?\n\nSpeed calculation\nFusedLocationProvider API in the driver app does provide the speed of the\nvehicle but it’s highly unreliable. So, we have to employ some tricks to\ncalculate the speed.\n\nSpeed is distance divided by time. Distance again!! Seems like we are running in\ncircles 😵. Not exactly. Here the distance is not the straight line distance b/w\nthe two points that we have to animate through.\n\nThis is the total distance along the route from the segment that the old driver\nlocation is currently located at, to the segment where the new driver location\nis. Yeah, that statement is a bit confusing. So, let’s take an example.\n\nThe car icon(A) represents the location in the segment where the driver marker\ncurrently is. The red pin(X) represents the new snapped location received. To\ncalculate the distance, we do the obvious:\n\nTotal distance = d1 + d2 + d3 + d4\n\nNow, we have the distance. We need the time interval.\n\nThe FusedLocationProvider API in the driver app does provide us the timestamp at\nwhich a location was updated. And this information is passed to our backend and\nsubsequently to the customer app.\n\nWe calculate the time difference b/w the old driver location and the new driver\nlocation using their timestamps. Wait, how do we know the old driver location?\nAs we had mentioned earlier, we cache the last available driver location and\nroute in an in-memory cache.\n\nTotal route distance divided by time and now we have the speed for the entire\nduration. Linear distance divided by this speed and now we have the durationfor\na single animation in a segment. Cool, so let’s get back to the point where we\nbroke off 😅.\n\nUpdate the animation\nWith all the above information, we start the animation. But wait? Aren’t we\nmissing something? We did start an animation b/w two points but how will our\nanimator know how to animate?\n\nAnimation is just a bunch of frame updates that happen every fast. How do we\nupdate the marker position, the starting point of the route, the rotation in\neach and every frame of the animation? Well, the mobile/web framework allows us\nto do something every time the frame is updated.\n\nBut what is this something that we should do?\n\n1. Update marker’s position\nFor markers, we need to update their position. Once we have the position, we can\nsimply update the marker position using the marker.setPosition(). To find the\nposition during each frame of the animation, we need the percentage of animation\nthat has elapsed.\n\nWe can get the percentage from the Animation framework. Using this percentage\nand the start and end position, we calculate the intermediate position/s like\nthis:\n\nSphericalUtil.interpolate(startPosition, endPosition, fraction)\n\n2. Update Routes\nRoutes need to be aligned with the marker’s movement. So, we update the routes\nas well using the values above and updating the polyline points of that route\nusing the polyline.setPoints().\n\nAnd that’s a wrap. The result that we get is a very smooth, measured movement of\nthe vehicle along the road.\n\nThere are a few more tips/tricks that we employ to ensure that there are no\nabrupt changes in the animation.\n\nBut that’s for next time. 😃\n\nWhat’s next?\nWe still need to go a long way to meet the standards that we have set for\nourselves. Currently, this new experience is only rolled out to GoRide, GoCar,\nand GoBluebird. We are working on bringing the same experience to other services\nlike GoFood, GoSend, and GoShop. Stay tuned for more!\n\nWant stories like this one beamed straight to your inbox? Sign up for our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\nThanks to Koushik Krishna, Abhay Sood, Anup Cowkur, Sooraj Rajmohan, and Kshitij\nChoudhary.","html":"<p><em><strong>By Divya Vikash</strong></em></p><p>It’s a nice Monday morning and you just ordered a GoRide (one of Gojek’s transport products) to go to your office. Voila!! You got a driver. That was fast. You can see your driver’s location on the map, and the estimated time they would take to come to you.</p><p><em><em>But hang on… It seems like the map is a bit messed up.</em></em></p><p>The driver location on the map goes back and forth at unreal speed, and even flies over buildings. Starring in an action movie is not exactly how you want to start your week. 😮</p><p>While our driver-partners sure are superman in their own unique way, they certainly can’t drive over buildings. This is clearly not how your driver is actually driving on the road. But then why is the map showing all this?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking2.gif\" class=\"kg-image\"></figure><p>Well, there are multiple factors that can lead to a bad experience like that. Some within our control, some not so much (as of now). We decided to go back to the drawing board and figure out the issues that are in our control and fix them for good. And that is how we built a world-class (arguably 😬) live-tracking experience.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image.png\" class=\"kg-image\"></figure><p>But what is live-tracking, you would ask?</p><p>Live tracking is a complete map experience. It doesn’t involve anything other than what you see on maps after you get a driver.</p><p>So, what do you see on maps?</p><ol><li>Driver's location depicted by a green marker.</li><li>The routes.</li><li>The change in driver marker as the driver moves closer to your pickup/your destination.</li><li>The change in route as the driver moves.</li></ol><p>And that’s it. That’s all live-tracking is.</p><blockquote><em><em>But that sounds quite simple. Right? Use some routing APIs and plot the markers and routes.</em></em></blockquote><p>Well, yes, it sounded easy to us when we first heard about it too. The real experience threw us a few curveballs. Let’s go through how we create a live-tracking experience.</p><p><strong>Input</strong></p><p>Let’s look at the input data that we need to create a live-tracking animation:</p><p><strong><strong>Driver Location and Routes</strong></strong></p><p>Our driver apps have an in-built mechanism to upload driver location to our backend at regular intervals. This is how we are able to find a driver close to your location when you order one of our services. The primary input to live-tracking is this driver location.</p><p>In our driver app, we get this location using Android’s <code>FusedLocationProvider</code> API which automatically uses the best location provider(GPS, Wifi, etc). The driver location is ingested into our backend system via a continuous stream. Routes are generated by our internal routing engine and provided to the customer app.</p><h3 id=\"input-source\">Input Source</h3><p>As you would have guessed, this data is provided via API calls initiated by the our Super App to the routing engine.</p><p>Making the API call just once won’t be sufficient. Right? The app needs to be informed every time the driver’s location has changed. So, the customer app polls this API every few seconds to get this data.</p><p>Now, we have a continuous stream of data flowing to our app which has all the information that we need to show the vehicle animation on the road.</p><h3 id=\"terminology\">Terminology</h3><p>Before moving forward, we should get acquainted with a few terminologies that we would use quite frequently in this post.</p><ol><li><strong><strong>Route</strong></strong>: The entire list of latitude-longitudes between the driver location to the pickup/destination location.</li><li><strong><strong>Segment</strong></strong>: A segment is the smallest unit of a route. It is a straight line from one position in the routes list to the very next position in the routes list.</li></ol><p>A route of length n has n-1 segments. Confused? Yeah, let’s take an example.</p><p>A <strong><strong>Route</strong></strong> looks like this:</p><p>[{-6<code>2441198, 106.8032959},<br>{-6.2440766, 106.80328}, <br>{-6.2439977, 106.8033275},<br>{-6.2434893, 106.8029214},<br>{-6.2433926, 106.8030539},<br>{-6.2436018, 106.803222}]</code></p><p>There are 5 <strong><strong>Segments</strong></strong> in this route.</p><p><code>Segment 1: {-6.2441198, 106.8032959,-6.2440766, 106.80328}</code><br><code>Segment 2: {-6.2440766, 106.80328,-6.2439977, 106.8033275}</code><br><code>Segment 3: {-6.2439977, 106.8033275,-6.2434893, 106.8029214}</code><br><code>Segment 4: {-6.2434893, 106.8029214,-6.2433926, 106.8030539}</code><br><code>Segment 5: {-6.2433926, 106.8030539,-6.2436018, 106.8032224}</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-1.png\" class=\"kg-image\"></figure><h3 id=\"the-initial-setup\">The initial setup</h3><p>When the user lands on the live tracking screen, the app immediately makes a call to our internal API to get the driver location and route. Once we get this data, we plot it on the map using the standard GoogleMap methods. <code><em><em>googleMap.addMarker()</em></em></code><em><em>, </em></em><code><em><em>googleMap.addPolyline()</em></em></code> etc.</p><p>Sometimes, we don’t have the routing information available immediately, so we just show the driver marker. We also store this data locally in an in-memory cache as we would need it later to do some comparisons.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/436/1*k9IpgQ4ss-bhKHBY5ETUgg.gif\" class=\"kg-image\"></figure><p>So, the customer is able to see the markers and routes on the map now. So far so good.</p><h3 id=\"the-subsequent-updates\">The subsequent updates</h3><p>As I mentioned earlier, we need to change the position of driver marker and route as the driver moves. The customer app makes a call to the same internal API every few seconds. After the first response, we don’t move any markers or routes on the map until the next response succeeds.</p><p>In the next response, we again get the same data points i.e the route and driver location but with different values, of course, <strong><strong>if the driver has moved</strong></strong>. The next set of data that we get can have the following characteristics:</p><ol><li>Route and driver location don’t change</li><li>Route changes</li><li>Route doesn’t change BUT driver location does</li></ol><p>Let’s discuss these cases one by one.</p><h3 id=\"1-route-and-driver-location-don-t-change\">1: Route and driver location don’t change</h3><p>If nothing has changed, we don’t need to do anything. Probably our driver partner is stuck in traffic. 😞</p><h3 id=\"2-route-changes\">2: Route changes</h3><p>This can happen either when:</p><ol><li>The app was not showing any route to the user before i.e the first response didn’t have the route.</li><li>The app was showing a route that is different from the newly received route. This usually happens in cases where the driver starts following a different route from the one they were following before. This can also happen due to road closures or simply because our driver-partner initially followed a wrong route by mistake 😅.</li></ol><p>In either of these cases, we simply ignore the old driver marker and routes which were shown and plot the new marker and routes.</p><h3 id=\"3-route-doesn-t-change-but-driver-location-does\">3: Route doesn’t change BUT driver location does</h3><p>The app was showing the same route to the user before i.e the old response had the same route as the new response. This means that the driver is following the original route that we determined.</p><p>In this case, we need to animate the driver marker on the map from the old location to the new location along the same route. This is the most common scenario, which can again be broken down further into multiple scenarios (yeah, I’m all about breaking things down 🤐).</p><h3 id=\"3-1-does-the-new-location-lie-on-the-route\">3.1: Does the new location lie on the route?</h3><p>To animate the driver marker from it’s current position to the new location, we first need to know whether the new location lies on the route or not.</p><p>Yeah, we can’t be sure that the driver location that we have received would always lie on the route/road because of various GPS inaccuracy issues.</p><p>We iterate through every segment in the route to find the segment which has the new location. For every segment, we use the Geometry/PolyUtil library to determine whether the driver location lies on that route.</p><p>We also specify a tolerance of a few meters to account for GPS inaccuracy. So, if the newly received location is within a radius of <strong><strong>X meters</strong></strong> near a segment, this method will return true.</p><p><strong><strong>Android</strong></strong></p><p><code>boolean isLocationOnPath(LatLng point,List&lt;LatLng&gt; polyline,boolean geodesic, double tolerance)</code></p><p><strong><strong>iOS</strong></strong></p><p><code>BOOL <a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/group___geometry_utils#ga580ba381b9d4fbc0ff430cf69e06e66d\" rel=\"noopener\">GMSGeometryIsLocationOnPathToleranc</a>e(CLLocationCoordinate2D point,<a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_path\" rel=\"noopener\">GMSPath</a> * path,BOOL geodesic,CLLocationDistance tolerance)</code></p><p>If the location doesn’t lie on any of the segments in the route, we are sad and so, we don’t animate anything. But if it does, we go forward with the next step which is….</p><h3 id=\"3-2-vehicle-projection-on-route\">3.2: Vehicle projection on route</h3><p>When we receive a new location, the start location is simply the position that the driver marker is already at. No logic required there to calculate that.</p><p>The end location should simply be the new location that we received. Well, in an ideal world, it <strong><strong>should be</strong></strong> but we live so far away from an ideal world 😞.</p><p>As we mentioned earlier, the raw driver location that we get from the driver app via GPS/other providers mostly doesn’t lie on the road. So, we have to find a projection of the driver location on the road/route.</p><p>If you have been reading carefully, you might wonder why we can’t just use the <em><em>isLocationOnPath()</em></em> method above 🤔.</p><p>Well, if you had been reading <em><em>more</em></em> carefully, you might have noticed that this method returns a boolean explaining whether the location is on/near the route or not 🤦‍♂. It doesn’t return the projected location. (Ohh..if someone from Maps Utils stumbled upon this by chance, please add that method, good sir).</p><p>So, we had to revise some maths. Yeah, folks, learn your maths well. You never know when a situation like this might arise 🤷‍♂.</p><p><em><em>“Find the projection of point (x,y) on the line y = mx + c”.</em></em> Does that ring a bell? Drawing a perpendicular line towards the segment and calculating the location of where the line and route intersect can give us the projected location. Right?</p><p>Well, the above approach works for 2-D systems but earth is not a 2-D space. We need a way to project the spherical surface of the earth onto a rectangle 2-D space. There are several ways to do that. All of them have certain drawbacks. We might lose information like direction or the shape of landmasses/countries or the area information.</p><p><strong><strong>Mercator Projection</strong></strong></p><p>Mercator projection is one of the available methods to project the spherical map of earth onto a rectangle to make usable maps. Most of the mapping tools used for navigation use this projection.</p><p>The key feature of Mercator projection is that it retains the direction information. That means if point A is 30deg east from north of point B on the globe, it will be in the same direction on its Mercator projection. Or say there is a turn of 90deg in some lane, it will be 90deg on Mercator projection as well. That is the reason it works really well for navigation purposes.</p><p><strong><strong>How to use a Mercator projection?</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-4.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-5.png\" class=\"kg-image\"></figure><ol><li>Every point on the earth is projected on a cylinder exactly like point A which has point A’ on the cylinder.</li><li>Once all the required points/routes are projected on this cylinder. It is unrolled, and we obtain a rectangle like the one shown above.</li><li>All the planar geometry can be applied with a very little margin of error on this 2D projected map.</li><li>After processing all the points/routes they can be converted back to latitude and longitude on the globe.</li></ol><p>So, now we have the projected driver location on the route which we will fondly call <code>snapped point</code> going forward.</p><h3 id=\"3-3-end-to-end-animation\">3.3: End-to-End animation</h3><p>The new driver location that we receive can be present in <strong><strong>any</strong></strong> segment. It may be that it is in the same segment or it may be that it is on the next segment or on the next one or it may be that it is on the last segment.</p><p>But for linear animation, we need a start point and an end point. The start point is the current position of the driver marker. We already got the snapped endpoint in the earlier section. But we can’t just animate from start to end <strong><strong>at once</strong></strong> as that would seem like the car is flying and ignoring U-turns, routes, etc. So, how do we prevent it from flying?</p><p>What do you do when you can’t fly to a place? You follow the road. Right? That’s what we have to do as well. Make the driver marker follow the route/road. We need to animate along each segment in the route until we reach the segment which has the driver position that we received.</p><p>There are again two cases here 😜:</p><h3 id=\"3-3-1-the-new-driver-location-is-on-the-same-segment\">3.3.1: The new driver location is on the same segment</h3><p>In this case, we can directly animate from the current position of driver marker to the driver location that we received since this is just a straight line animation.</p><p>A segment is always a straight line. We will discuss more on how to do the animation b/w 2 points in a later section.</p><h3 id=\"3-3-2-the-new-driver-location-is-on-a-different-segment\">3.3.2: The new driver location is on a different segment</h3><p>In this case, we need to animate to that segment along the route. We have to animate along each of the segments in between to reach the final segment.</p><p>For animation along the first segment, we set the endpoint of the animation to the beginning of the next segment in the route. We animate to the end of the first segment.</p><p>The next segment may also not have the driver location that we received. After a driver has traversed the first segment, we move the end location of the animation to the end of the next segment, and so on and so forth till we reach the last segment. Confusing, ya? Let’s see an example.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/Screenshot-2020-05-23-at-10.06.55-PM.png\" class=\"kg-image\"><figcaption>So much zig-zag (huh!!)</figcaption></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received.</p><p>In the 1st animation, we move the driver marker from A to the end of the first segment (B).</p><p>In the 2nd animation, the driver marker is moved through the entire length of the 2nd segment.</p><p>And so on and so forth till we reach the segment which has the newly received snapped location (X).</p><h2 id=\"animation-in-a-segment\">Animation in a segment</h2><p>We now know how the overall animation would look like. But we also need to configure how the smallest unit of the animation i.e animation in a segment should happen.</p><p><strong><strong>Start point and End point</strong></strong>: For case #1 above, the animation in a segment will happen just once. For case #2 above, this animation in a segment will happen multiple times. Start and endpoints will be determined before beginning each of the animations.</p><p><strong><strong>Bearing b/w these two points</strong></strong>: Bearing can be calculated using another one of Geometry/Maps Utils method.</p><p><code>SphericalUtil.computeHeading(startPosition, endPosition)</code></p><p><strong><strong>Duration of animation: </strong></strong>Calculating duration is a bit tricky. And the duration is the most important thing in any animation. Sometimes the difference b/w a smooth and a choppy animation is caused by the duration. It was very important that we got it right. So, let’s take a break and see how to calculate the duration.</p><h2 id=\"what-is-duration\">What is Duration?</h2><p>It’s the amount of time for which the animation should happen. But you already know that. Going back to middle school maths (yeah, that far), how do you calculate time? Time is nothing but distance divided by speed. Correct? Calculating straight line distance b/w the two points we want to animate through is pretty easy.</p><p><code>SphericalUtil.computeDistanceBetween(startLocation, endLocation)</code></p><p>Cool, cool. But what about speed? How should we calculate speed?</p><h2 id=\"speed-calculation\">Speed calculation</h2><p><code>FusedLocationProvider</code> API in the driver app does provide the speed of the vehicle but it’s highly unreliable. So, we have to employ some tricks to calculate the speed.</p><p>Speed is distance divided by time. Distance again!! Seems like we are running in circles 😵. Not exactly. Here the distance is not the straight line distance b/w the two points that we have to animate through.</p><p>This is the total distance along the route <strong><strong>from</strong></strong> the segment that the old driver location is currently located at, <strong><strong>to</strong></strong> the segment where the new driver location is. Yeah, that statement is a bit confusing. So, let’s take an example.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-8.png\" class=\"kg-image\"></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received. To calculate the distance, we do the obvious:</p><p><code>Total distance = d1 + d2 + d3 + d4</code></p><p>Now, we have the distance. We need the time interval.</p><p>The <code>FusedLocationProvider</code> API in the driver app does provide us the timestamp at which a location was updated. And this information is passed to our backend and subsequently to the customer app.</p><p>We calculate the time difference b/w the old driver location and the new driver location using their timestamps. Wait, how do we know the old driver location? As we had mentioned earlier, we cache the last available driver location and route in an in-memory cache.</p><p>Total route distance divided by time and now we have the speed for the entire duration. Linear distance divided by this speed and now we have the <strong><strong>duration</strong></strong>for a single animation in a segment. Cool, so let’s get back to the point where we broke off 😅.</p><h1 id=\"update-the-animation\">Update the animation</h1><p>With all the above information, we start the animation. But wait? Aren’t we missing something? We did start an animation b/w two points but how will our animator know <strong><strong>how</strong></strong> to animate?</p><p>Animation is just a bunch of frame updates that happen every fast. How do we update the marker position, the starting point of the route, the rotation in each and every frame of the animation? Well, the mobile/web framework allows us to do something every time the frame is updated.</p><p>But what is this something that we should do?</p><h2 id=\"1-update-marker-s-position\">1. Update marker’s position</h2><p>For markers, we need to update their position. Once we have the position, we can simply update the marker position using the <code>marker.setPosition()</code>. To find the position during each frame of the animation, we need the percentage of animation that has elapsed.</p><p>We can get the percentage from the Animation framework. Using this percentage and the start and end position, we calculate the intermediate position/s like this:</p><p><code>SphericalUtil.interpolate(startPosition, endPosition, fraction)</code></p><h2 id=\"2-update-routes\">2. Update Routes</h2><p>Routes need to be aligned with the marker’s movement. So, we update the routes as well using the values above and updating the polyline points of that route using the <code>polyline.setPoints()</code><em><em>.</em></em></p><p>And that’s a wrap. The result that we get is a very smooth, measured movement of the vehicle along the road.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/600/1*EtoKV1x7ufBgxOPdcsvnJg.gif\" class=\"kg-image\"></figure><p>There are a few more tips/tricks that we employ to ensure that there are no abrupt changes in the animation.</p><p>But that’s for next time. 😃</p><h3 id=\"what-s-next\">What’s next?</h3><p>We still need to go a long way to meet the standards that we have set for ourselves. Currently, this new experience is only rolled out to GoRide, GoCar, and GoBluebird. We are working on bringing the same experience to other services like GoFood, GoSend, and GoShop. Stay tuned for more!</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-9.png\" class=\"kg-image\"></figure><p>Want stories like this one beamed straight to your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p><p>Thanks to Koushik Krishna, Abhay Sood, Anup Cowkur, Sooraj Rajmohan, and Kshitij Choudhary.</p>","url":"https://gojek-ghost.zysk.in/tips-for-building-smooth-live-tracking/","canonical_url":null,"uuid":"90db33e9-3b67-4c66-a39f-7247172d3fa7","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec94e8c7aa22c4066f83db2","reading_time":13}},{"node":{"id":"Ghost__Post__5eb1066a5524cd001e7392a4","title":"Why We Swear by the RCA","slug":"why-we-swear-by-the-rca","featured":false,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_nOcToFzqvdWlHmOQ59v0sw.jpg","excerpt":"An account of how Gojek responds to production issues, and why the RCA is a critical part of the process.","custom_excerpt":"An account of how Gojek responds to production issues, and why the RCA is a critical part of the process.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"12 May, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T11:53:38.000+05:30","published_at":"2020-05-12T11:53:00.000+05:30","updated_at":"2020-05-12T11:53:20.000+05:30","meta_title":"Why We Swear by the RCA","meta_description":"An account of how Gojek responds to production issues, and why the RCA is a critical part of the process.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"When Gojek was still finding its feet, Fridays used to be a nightmare.\n\nJakarta, being the capital of the fourth most-populous country in the world, is\nhome to many people who work in the city and travel to their hometowns on\nweekends. Many of them rely on Gojek as their preferred first mile connectivity\noption — resulting in a traffic spike on our systems on Friday evening. In those\nearly days, this often triggered a system outage.\n\nEvery outage erodes the hard earned trust we build with our customers and driver\npartners.\n\nEnter the RCA\nWe knew we couldn’t fix the failures overnight, but we could learn from them.\nAfter all, so many of these mistakes were common and easily overlooked. So we\ndecided to embrace the ‘Root Cause Analysis’ (RCA). If something related to\nGojek’s Engineering division failed, the person(s) who attended the support call\nand had most context of what happened would prepare a document. This document\nwould contain a timeline, detail what went wrong, suggest corrective measures,\nand compile lessons learned.\n\nThis process ensured everyone across the organisation had visibility into what\nhappened. As a result, even unaffected teams cited in the RCA could analyse\ntheir systems to ensure the same problem would not happen to them. More\nimportantly, it provided a degree of accountability — and that’s important when\nyou have 20+ products.\n\nA post-mortem, and a prevention.\n\nThis post details what happens when a system failure happens at Gojek, and how\nit makes it way into an RCA.\n\n1. The What\nWhen something fails, it is important to understand the origin of the problem.\nEvery team in Gojek sets up alerts which monitor the state of their systems. If\na state change in the system causes a deviation from expected behaviour, an\nalerting service called pager duty automatically dials the phones of the people\nresponsible for that part of the system.\n\nHere’s an example:\n\nWhen a booking is created, we find a list of driver partners and send the order\ndetails to them, at which point they get a pop-up with trip details like\nestimated duration and approximate earnings. The idea is to give driver partners\nenough information to make the decision to accept the trip. But there was a\nproblem.\n\n2. The Why\nOne of the fields this prompt contains is a Booking ID, which is stored as an\ninteger (which, in technical speak, has a limit of 32 bits). Unfortunately for\nus, the ID generated exceeded this limit.\n\nWelcome to what we call Integer Overflow.\n\nAs a result of this, the driver app started crashing.\n\nHow bad can that be, you ask?\n\n3. The Fallout\nDrivers being unable to use the app means they can’t accept bookings. This means\ncustomers can’t book rides, send packages, get food, or use any service that\ndepends on our driver partners.\n\nAs a result, Gojek’s order numbers (or what we call ‘concurrence’, if you want\nto get all technical about it) plummeted. Pager duty is hit, and cell phones\nstart ringing off their proverbial hooks.\n\nWith driver partners stuck with malfunctioning apps, multiple Gojek services\nstart reporting errors. As customers try and figure out why the app is behaving\nthis way, engineers scramble to do the same.\n\n4. The Response\nWhen the phones ring, the team whose alerts have been triggered immediately get\nto work figuring out what happened. If they identify the problem quickly and\ndebug it, they notify other teams. The team then gets to work using information\nfrom the alerts and system dashboards to prepare an RCA.\n\nThis is, of course, the best case scenario.\n\nIf the concerned team cannot find a fix however, a war room is called.\n\nThe war room signifies a larger issue, and members of every available team drop\nwhat they’re doing and join the call. Sometimes, these are frantic Slack\ndiscussions and calls in the middle of the night. Other times, office boardrooms\nare blocked and everyone gathers to brainstorm collectively.\n\nDevs, Team Leads, Product Managers, all hands on deck.\n\nIn a war room scenario, whoever has most context on the situation takes charge\nand delegates tasks as required. This central person also plays a key role in\ndocumenting the happenings in the war room — how many people were present, which\nteams were represented, who was handling what, etc. All this information plays a\nkey role in the RCA. While this is going down, Driver and Customer Care centres\nare also notified, bracing for the inevitable flurry of complaints.\n\nThe fix may take the form of a few simple temporary hacks, or an hours long war\nroom — but in the end, there is always a fix.\n\nWords of appreciation from GoPay CEO Aldi Haryopratomo and Gojek CTO Ajey Gore\nAnd a sense of camaraderie ?\n\nOnce the dust settles, the investigation begins. The person who managed the war\nroom generally authors a document analysing what went wrong, using all the info\nfrom the alerts, dashboards, and firsthand accounts of the responders present.\nTypically every stakeholder in the organisation gets an email the next day with\ndetails of what went wrong — the RCA.\n\n5. The Learnings\n“Collaborate With Compassion”\n\nThese three words mean a lot at Gojek, and our RCAs reflect that. When you open\nan RCA mail, there is rarely even a mention of specific people, except to\nacknowledge those who responded to the distress call and played a role in\nfinding a fix. Call out the ones who made the effort, never the ones\nresponsible.\n\nMost RCAs instead dwell on relevant, actionable information. Information that\nwas being collected and monitored right from when the alert tripped:\n\nThe What: What was the problem?\n\nThe Why: Why did it happen?\n\nThe Fallout: Which services were affected, and for how long?\n\nThe Response: How was it fixed?\n\nThe Learnings: What can be done to avoid a repeat of this in future?\n\nThis simple process has helped us scale more safely and efficiently. It also\nallows for early identification of potential vulnerabilities in other systems.\nAs you may have noticed, there is no mention of who was responsible, no finger\npointing, no blame games. Collaborate with compassion.\n\nTo get a better sense of how we write RCAs at Gojek, read a sample RCA\n[https://docs.google.com/document/d/1r_PSsl7mBxbfAcibGTdFpnM5hm6ot82bF-_9VeV2J9w/edit?ts=5db7c330#heading=h.kreykp6cjau6]\n.\n\nIf you’d like to start a culture of RCAs as well, here’s our RCA template\n[https://docs.google.com/document/d/12Ims21IwFCNWi9MXcw2TVxPLB6YyWrIoTNaw3P-M_t4/edit]\n, courtesy GoPay CTO Ranjan Sakalley [https://twitter.com/rnjn], who also\noccasionally drops invaluable insights in the ‘Learnings’ section. ?\n\n\nRCAs have played an integral part in our journey to becoming a SuperApp.\nInvestigating, analysing, and documenting problems in production help us build\nbetter, more scalable systems, and tackle new problems in a mature manner\nwithout fear of retribution.\n\nThe days of weekly production issues are now a thing of the past. While we won’t\nbe so brash as to say we never have problems, embracing RCAs and a culture of\ncompassionate collaboration have helped us get to where we are today. ?\n\n\n--------------------------------------------------------------------------------\n\nWe’ll be writing about more interesting case studies on issues faced in\nproduction. Keep an eye on this blog, or subscribe to our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] for updates on our stories in\na neat little email.","html":"<p>When Gojek was still finding its feet, Fridays used to be a nightmare.</p><p>Jakarta, being the capital of the fourth most-populous country in the world, is home to many people who work in the city and travel to their hometowns on weekends. Many of them rely on Gojek as their preferred first mile connectivity option — resulting in a traffic spike on our systems on Friday evening. In those early days, this often triggered a system outage.</p><p><em><em>Every outage erodes the hard earned trust we build with our customers and driver partners.</em></em></p><h1 id=\"enter-the-rca\">Enter the RCA</h1><p>We knew we couldn’t fix the failures overnight, but we could learn from them. After all, so many of these mistakes were common and easily overlooked. So we decided to embrace the ‘Root Cause Analysis’ (RCA). If something related to Gojek’s Engineering division failed, the person(s) who attended the support call and had most context of what happened would prepare a document. This document would contain a timeline, detail what went wrong, suggest corrective measures, and compile lessons learned.</p><p>This process ensured everyone across the organisation had visibility into what happened. As a result, even unaffected teams cited in the RCA could analyse their systems to ensure the same problem would not happen to them. More importantly, it provided a degree of accountability — and that’s important when you have 20+ products.</p><p>A post-mortem, and a prevention.</p><p>This post details what happens when a system failure happens at Gojek, and how it makes it way into an RCA.</p><h2 id=\"1-the-what\">1. The What</h2><p>When something fails, it is important to understand the origin of the problem. Every team in Gojek sets up alerts which monitor the state of their systems. If a state change in the system causes a deviation from expected behaviour, an alerting service called <code>pager duty</code> automatically dials the phones of the people responsible for that part of the system.</p><p><strong><strong>Here’s an example:</strong></strong></p><p>When a booking is created, we find a list of driver partners and send the order details to them, at which point they get a pop-up with trip details like estimated duration and approximate earnings. The idea is to give driver partners enough information to make the decision to accept the trip. But there was a problem.</p><h2 id=\"2-the-why\">2. The Why</h2><p>One of the fields this prompt contains is a Booking ID, which is stored as an integer (which, in technical speak, has a limit of 32 bits). Unfortunately for us, the ID generated exceeded this limit.</p><p>Welcome to what we call Integer Overflow.</p><p>As a result of this, the driver app started crashing.</p><p><strong><strong><em><em>How bad can that be, you ask?</em></em></strong></strong></p><h2 id=\"3-the-fallout\">3. The Fallout</h2><p>Drivers being unable to use the app means they can’t accept bookings. This means customers can’t book rides, send packages, get food, or use any service that depends on our driver partners.</p><p>As a result, Gojek’s order numbers (or what we call ‘concurrence’, if you want to get all technical about it) plummeted. Pager duty is hit, and cell phones start ringing off their proverbial hooks.</p><p>With driver partners stuck with malfunctioning apps, multiple Gojek services start reporting errors. As customers try and figure out why the app is behaving this way, engineers scramble to do the same.</p><h2 id=\"4-the-response\">4. The Response</h2><p>When the phones ring, the team whose alerts have been triggered immediately get to work figuring out what happened. If they identify the problem quickly and debug it, they notify other teams. The team then gets to work using information from the alerts and system dashboards to prepare an RCA.</p><p><strong><strong>This is, of course, the best case scenario.</strong></strong></p><p>If the concerned team cannot find a fix however, a war room is called.</p><p>The war room signifies a larger issue, and members of every available team drop what they’re doing and join the call. Sometimes, these are frantic Slack discussions and calls in the middle of the night. Other times, office boardrooms are blocked and everyone gathers to brainstorm collectively.</p><p><em><em>Devs, Team Leads, Product Managers, all hands on deck.</em></em></p><p>In a war room scenario, whoever has most context on the situation takes charge and delegates tasks as required. This central person also plays a key role in documenting the happenings in the war room — <strong><strong>how many people were present, which teams were represented, who was handling what, etc.</strong></strong> <strong><strong>All this information plays a key role in the RCA.</strong></strong> While this is going down, Driver and Customer Care centres are also notified, bracing for the inevitable flurry of complaints.</p><p>The fix may take the form of a few simple temporary hacks, or an hours long war room — but in the end, there is always a fix.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1129/1*UFUYfO3Gw9tnKCiE1y40-Q.jpeg\" class=\"kg-image\"><figcaption>Words of appreciation from GoPay CEO Aldi Haryopratomo and Gojek CTO Ajey Gore</figcaption></figure><p><em><em>And a sense of camaraderie ?</em></em></p><p>Once the dust settles, the investigation begins. The person who managed the war room generally authors a document analysing what went wrong, using all the info from the alerts, dashboards, and firsthand accounts of the responders present. Typically every stakeholder in the organisation gets an email the next day with details of what went wrong — the RCA.</p><h2 id=\"5-the-learnings\">5. The Learnings</h2><p>“Collaborate With Compassion”</p><p>These three words mean a lot at Gojek, and our RCAs reflect that. When you open an RCA mail, there is rarely even a mention of specific people, except to acknowledge those who responded to the distress call and played a role in finding a fix. <strong><strong>Call out the ones who made the effort, never the ones responsible.</strong></strong></p><p>Most RCAs instead dwell on relevant, actionable information. Information that was being collected and monitored right from when the alert tripped:</p><p><em><em>The What: What was the problem?</em></em></p><p><em><em>The Why: Why did it happen?</em></em></p><p><em><em>The Fallout: Which services were affected, and for how long?</em></em></p><p><em><em>The Response: How was it fixed?</em></em></p><p><em><em>The Learnings: What can be done to avoid a repeat of this in future?</em></em></p><p>This simple process has helped us scale more safely and efficiently. It also allows for early identification of potential vulnerabilities in other systems. As you may have noticed, there is no mention of who was responsible, no finger pointing, no blame games. <em><em>Collaborate with compassion.</em></em></p><p>To get a better sense of how we write RCAs at Gojek, <a href=\"https://docs.google.com/document/d/1r_PSsl7mBxbfAcibGTdFpnM5hm6ot82bF-_9VeV2J9w/edit?ts=5db7c330#heading=h.kreykp6cjau6\" rel=\"noopener\"><strong><strong>read a sample RCA</strong></strong></a>.</p><p>If you’d like to start a culture of RCAs as well, <a href=\"https://docs.google.com/document/d/12Ims21IwFCNWi9MXcw2TVxPLB6YyWrIoTNaw3P-M_t4/edit\" rel=\"noopener\"><strong><strong>here’s our RCA template</strong></strong></a>, courtesy GoPay CTO <a href=\"https://twitter.com/rnjn\" rel=\"noopener\">Ranjan Sakalley</a>, who also occasionally drops invaluable insights in the ‘Learnings’ section. <strong><strong>?</strong></strong><br></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/480/1*2sosYEnk68lMaQTVjdZjWQ.jpeg\" class=\"kg-image\"></figure><p>RCAs have played an integral part in our journey to becoming a SuperApp. Investigating, analysing, and documenting problems in production help us build better, more scalable systems, and tackle new problems in a mature manner without fear of retribution.</p><p>The days of weekly production issues are now a thing of the past. While we won’t be so brash as to say we never have problems, embracing RCAs and a culture of compassionate collaboration have helped us get to where we are today. ?</p><hr><p>We’ll be writing about more interesting case studies on issues faced in production. Keep an eye on this blog, or <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">subscribe to our newsletter</a> for updates on our stories in a neat little email.</p>","url":"https://gojek-ghost.zysk.in/why-we-swear-by-the-rca/","canonical_url":null,"uuid":"ef04187f-7199-434a-8647-6dcd386043cd","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb1066a5524cd001e7392a4","reading_time":5}},{"node":{"id":"Ghost__Post__5eafa30734df85001e15f489","title":"How We Pushed a Million Keys to Redis in Seconds","slug":"how-we-pushed-a-million-keys-to-redis-in-seconds","featured":false,"feature_image":"https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_gN5KGQcKSipjSlQqEppJMA.jpg","excerpt":"Dealing with a lot of keys? Redis’ Pipe Mode is your friend.\nHello there!\n\nIn this post, I’ll share my ideas on how we populated Redis (running in a\nKubernetes cluster)… in a matter of seconds.\n\nHere’s what can you expect from this post:\n\n1. How to connect to Redis server running in a Kubernetes cluster ?\n\n2. What is Port-forwarding ?\n\n3. How to use Redis mass insertion & push millions of keys in seconds ?\n\n4. How to generate Redis Protocol ?\n\n5. How to read /parse a CSV in Ruby ?\n\nWait, but why","custom_excerpt":null,"visibility":"public","created_at_pretty":"04 May, 2020","published_at_pretty":"04 May, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-05-04T10:37:19.000+05:30","published_at":"2020-05-04T10:45:13.000+05:30","updated_at":"2020-05-12T11:50:45.000+05:30","meta_title":"How We Pushed a Million Keys to Redis in Seconds","meta_description":"Dealing with a lot of keys? Redis’ Pipe Mode is your friend.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Dealing with a lot of keys? Redis’ Pipe Mode is your friend.\nHello there!\n\nIn this post, I’ll share my ideas on how we populated Redis (running in a\nKubernetes cluster)… in a matter of seconds.\n\nHere’s what can you expect from this post:\n\n1. How to connect to Redis server running in a Kubernetes cluster ?\n\n2. What is Port-forwarding ?\n\n3. How to use Redis mass insertion & push millions of keys in seconds ?\n\n4. How to generate Redis Protocol ?\n\n5. How to read /parse a CSV in Ruby ?\n\nWait, but why do I need to do this? ?\n\nAt Gojek, we use Redis in one of the services for caching drivers for faster\nlookups. Since we have deployed this service to new clusters, we needed to\npopulate Redis with ~81K keys.\n\nWhat we didn’t do (and should not be done)\nWell, this. ?\n\n$ redis-cli -h \"hostname\" -p 6379 set \"key\" \"value\"\n\nThis simple and easy way of storing a key through redis-cli\n[https://redis.io/topics/rediscli] is okay, but not for thousands or millions of\nkeys. You don’t want to end up waiting for hours unless you are Regina Phalange\n[https://en.wikipedia.org/wiki/Phoebe_Buffay#%22Regina_Phalange%22]! ?\n\nUsing a normal Redis client to perform mass insertion is not a good idea. The\nnaive approach of sending one command after the other is slow, because you have\nto pay for the round trip time for every command.\n\nLet’s do something different!\nWe will use Redis mass insertion, but before going to that, let’s talk a bit\nabout Redis Protocol [https://redis.io/topics/protocol].\n\nRedis clients communicate with the Redis server using a protocol called RESP \n(REdis Serialization Protocol).\n\nWith that said, let’s go write some code! I like toying around with Ruby\n[https://www.ruby-lang.org/en/], so this was my language of choice.\n\nredis_mass_insert.rbgen_redis_proto function will generate the protocol required for mass insertion.\n\n> 2.6.3 > puts gen_redis_proto(\"SET\",\"mykey\",\"Hello World!\").inspect\nRunning the above command in Ruby console, will give us the following protocol.\n\n\"*3\\r\\n$3\\r\\nSET\\r\\n$5\\r\\nmykey\\r\\n$12\\r\\nHello World!\\r\\n\"\n\nWell, this is how a command is represented and sent to the Redis Server through \nRedis Protocol [https://redis.io/topics/protocol].\n\n*<args><cr><lf>\n$<len><cr><lf>\n<arg0><cr><lf>\n<arg1><cr><lf>\n...\n<argN><cr><lf>\n\nWhere <cr> means \"\\r\" (or ASCII character 13) and <lf> means \"\\n\" (or ASCII\ncharacter 10).\n\nWe can now run this script, but here’s a catch. Our Redis server runs in a\nKubernetes cluster and we didn’t want to install Ruby and its gems inside a\ncluster. So now?\n\nEnter port-forwarding! ?\n$ kubectl -n \"namespace\" port-forward \"pod-name\" 7000:6379\n\nConnections made to local port 7000 are forwarded to port 6379 of the pod that\nis running the Redis server. With this connection in place we can use our local\nworkstation to debug the database that is running in the pod.\n\nFinally, we run our script to populate Redis ?\n\n> $ ruby redis_mass_insert.rb | redis-cli -p 7000 --pipe\n> All data transferred. Waiting for the last reply...\nLast reply received from server.\nerrors: 0, replies: 81003\nWe ran this script and it completed within a fraction of seconds!\n\nBut, how?\nIn 2.6 or later versions of Redis the redis-cli utility supports a new mode\ncalled pipe mode that was designed in order to perform mass insertion.\n\nUnder the hood of pipe mode\nAccording to the official doc:\n\n * redis-cli — pipe tries to send data as fast as possible to the server.\n * At the same time it reads data when available, trying to parse it.\n * Once there is no more data to read from stdin, it sends a special ECHO \n   command with a random 20 bytes string: we are sure this is the latest command\n   sent, and we are sure we can match the reply checking if we receive the same\n   20 bytes as a bulk reply.\n * Once this special final command is sent, the code receiving replies starts to\n   match replies with these 20 bytes. When the matching reply is reached it can\n   exit with success.\n\nNaice, what’s next?\nWell, I tried populating Redis locally with a million keys.\n\nIt worked like a charm, in just ~2 seconds. ?\n\nThat’s it!\nI really hope that this post gave you some new insights.\n\nThanks for reading! ?\n\nReferences\n\n 1. Redis Mass Insertion [https://redis.io/topics/mass-insert]\n 2. Redis Protocol [https://redis.io/topics/protocol]\n 3. Port Forwarding in Kubernetes to access applications\n    [https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/]\n\nWant our stories to land in your inbox? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<h3 id=\"dealing-with-a-lot-of-keys-redis-pipe-mode-is-your-friend-\">Dealing with a lot of keys? Redis’ Pipe Mode is your friend.</h3><p>Hello there!</p><p>In this post, I’ll share my ideas on how we populated Redis (running in a Kubernetes cluster)… in a matter of seconds.</p><p>Here’s what can you expect from this post:</p><p><em><em>1. How to connect to Redis server running in a Kubernetes cluster ?</em></em></p><p><em><em>2. What is Port-forwarding ?</em></em></p><p><em><em>3. How to use Redis mass insertion &amp; push millions of keys in seconds ?</em></em></p><p><em><em>4. How to generate Redis Protocol ?</em></em></p><p><em><em>5. How to read /parse a CSV in Ruby ?</em></em></p><p>Wait, but why do I need to do this? ?</p><p>At Gojek, we use Redis in one of the services for caching drivers for faster lookups. Since we have deployed this service to new clusters, we needed to populate Redis with ~81K keys.</p><h2 id=\"what-we-didn-t-do-and-should-not-be-done-\">What we didn’t do (and should not be done)</h2><p>Well, this. ?</p><p><code>$ redis-cli -h \"hostname\" -p 6379 set \"key\" \"value\"</code></p><p>This simple and easy way of storing a key through <code><a href=\"https://redis.io/topics/rediscli\" rel=\"noopener\">redis-cli</a></code> is okay, but not for thousands or millions of keys. You don’t want to end up waiting for hours unless you are <a href=\"https://en.wikipedia.org/wiki/Phoebe_Buffay#%22Regina_Phalange%22\" rel=\"noopener\">Regina Phalange</a>! ?</p><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2F5xaOcLvROln5TmaaVOM%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fgiphy.com%2Fgifs%2Fthecomebackhbo-comeback-the-val-cherish-5xaOcLvROln5TmaaVOM&amp;image=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F5xaOcLvROln5TmaaVOM%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" allowfullscreen=\"\" frameborder=\"0\" height=\"301\" width=\"435\" title=\"Lisa Kudrow Thank You GIF by The Comeback HBO - Find &amp; Share on GIPHY\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 470.516px;\"></iframe></figure><p>Using a normal Redis client to perform mass insertion is not a good idea. The naive approach of sending one command after the other is slow, because you have to pay for the round trip time for every command.</p><h1 id=\"let-s-do-something-different-\">Let’s do something different!</h1><p>We will use Redis mass insertion, but before going to that, let’s talk a bit about <a href=\"https://redis.io/topics/protocol\" rel=\"noopener\">Redis Protocol</a>.</p><p><em><em>Redis clients communicate with the Redis server using a protocol called <strong><strong>RESP</strong></strong> (REdis Serialization Protocol).</em></em></p><p>With that said, let’s go write some code! I like toying around with <a href=\"https://www.ruby-lang.org/en/\" rel=\"noopener\">Ruby</a>, so this was my language of choice.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><iframe src=\"https://blog.gojekengineering.com/media/59319951b0d29feee60832a68f811a18\" allowfullscreen=\"\" frameborder=\"0\" height=\"364\" width=\"680\" title=\"Ruby Script for Redis Mass Insertion\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 364px;\"></iframe><figcaption>redis_mass_insert.rb</figcaption></figure><p><code>gen_redis_proto</code> function will generate the protocol required for mass insertion.</p><blockquote>2.6.3 &gt; <strong><strong>puts gen_redis_proto(\"SET\",\"mykey\",\"Hello World!\").inspect</strong></strong></blockquote><p>Running the above command in Ruby console, will give us the following protocol.</p><p><code>\"*3\\r\\n$3\\r\\nSET\\r\\n$5\\r\\nmykey\\r\\n$12\\r\\nHello World!\\r\\n\"</code></p><p>Well, this is how a command is represented and sent to the Redis Server through <a href=\"https://redis.io/topics/protocol\" rel=\"noopener\">Redis Protocol</a>.</p><p><code>*&lt;args&gt;&lt;cr&gt;&lt;lf&gt;<br>$&lt;len&gt;&lt;cr&gt;&lt;lf&gt;<br>&lt;arg0&gt;&lt;cr&gt;&lt;lf&gt;<br>&lt;arg1&gt;&lt;cr&gt;&lt;lf&gt;<br>...<br>&lt;argN&gt;&lt;cr&gt;&lt;lf&gt;</code></p><p><em><em>Where <code>&lt;cr&gt;</code> means \"\\r\" (or ASCII character 13) and <code>&lt;lf&gt;</code> means \"\\n\" (or ASCII character 10).</em></em></p><p>We can now run this script, but here’s a catch. Our Redis server runs in a Kubernetes cluster and we didn’t want to install Ruby and its gems inside a cluster. So now?</p><h1 id=\"enter-port-forwarding-\">Enter port-forwarding! ?</h1><p><strong><strong><code>$ kubectl -n \"namespace\" port-forward \"pod-name\" 7000:6379</code></strong></strong></p><p>Connections made to local port 7000 are forwarded to port 6379 of the pod that is running the Redis server. With this connection in place we can use our local workstation to debug the database that is running in the pod.</p><p><em><em><em>Finally, we run our script to populate Redis ?</em></em></em></p><blockquote><strong><strong>$ ruby redis_mass_insert.rb | redis-cli -p 7000 --pipe</strong></strong></blockquote><blockquote>All data transferred. Waiting for the last reply...<br>Last reply received from server.<br>errors: 0, replies: 81003</blockquote><p>We ran this script and it completed within a fraction of seconds!</p><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FjRARA4zqym98KmvkUy%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fgiphy.com%2Fgifs%2FjRARA4zqym98KmvkUy&amp;image=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FjRARA4zqym98KmvkUy%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" allowfullscreen=\"\" frameborder=\"0\" height=\"246\" width=\"435\" title=\"Bingo GIF - Find &amp; Share on GIPHY\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 384.547px;\"></iframe></figure><h1 id=\"but-how\">But, how?</h1><p>In 2.6 or later versions of Redis the <code>redis-cli</code> utility supports a new mode called <strong><strong>pipe mode</strong></strong> that was designed in order to perform mass insertion.</p><h2 id=\"under-the-hood-of-pipe-mode\">Under the hood of pipe mode</h2><p>According to the official doc:</p><ul><li><em><em>redis-cli — pipe tries to send data as fast as possible to the server.</em></em></li><li><em><em>At the same time it reads data when available, trying to parse it.</em></em></li><li><em><em>Once there is no more data to read from stdin, it sends a special </em></em><strong><strong><em><em>ECHO</em></em></strong></strong><em><em> command with a random 20 bytes string: we are sure this is the latest command sent, and we are sure we can match the reply checking if we receive the same 20 bytes as a bulk reply.</em></em></li><li><em><em>Once this special final command is sent, the code receiving replies starts to match replies with these 20 bytes. When the matching reply is reached it can exit with success.</em></em></li></ul><h1 id=\"naice-what-s-next\">Naice, what’s next?</h1><p>Well, I tried populating Redis locally with <em><em>a million keys.</em></em></p><p>It worked like a charm, in just ~2 seconds. ?</p><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2Fj6ZQKMy3W3629lDJSX%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fgiphy.com%2Fgifs%2Fhbo-avenue-5-avenue5-j6ZQKMy3W3629lDJSX&amp;image=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2Fj6ZQKMy3W3629lDJSX%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" allowfullscreen=\"\" frameborder=\"0\" height=\"244\" width=\"435\" title=\"Hugh Laurie Charm GIF by HBO - Find &amp; Share on GIPHY\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 381.422px;\"></iframe></figure><h1 id=\"that-s-it-\">That’s it!</h1><p>I really hope that this post gave you some new insights.</p><p>Thanks for reading! ?</p><p><strong><strong>References</strong></strong></p><ol><li><a href=\"https://redis.io/topics/mass-insert\" rel=\"noopener\">Redis Mass Insertion</a></li><li><a href=\"https://redis.io/topics/protocol\" rel=\"noopener\">Redis Protocol</a></li><li><a href=\"https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/\" rel=\"noopener\">Port Forwarding in Kubernetes to access applications</a></li></ol><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/60/1*Yigf1nGxRKjzV7vIC_YkYg.png?q=20\" class=\"kg-image\"></figure><p>Want our stories to land in your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/how-we-pushed-a-million-keys-to-redis-in-seconds/","canonical_url":null,"uuid":"399d0acb-04ee-4db6-8925-35c9dd3533e5","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eafa30734df85001e15f489","reading_time":3}},{"node":{"id":"Ghost__Post__5ec2ca217aa22c4066f83b64","title":"How Gojek Uses NLP to Name Pickup Locations at Scale","slug":"how-gojek-uses-nlp-to-name-pickup-locations-at-scale","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_dFalBje-vQCkEY8Zrq9P5g--1-.jpeg","excerpt":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","custom_excerpt":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"01 May, 2020","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T23:17:13.000+05:30","published_at":"2020-05-01T09:30:00.000+05:30","updated_at":"2020-05-18T23:22:43.000+05:30","meta_title":null,"meta_description":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Li Xiaohong\n\nWhen our customers want to use our ride hailing products like GoRide and GoCar,\nthey are presented with convenient, clearly named pickup points nearby. Here’s\nan example:\n\nThis saves customers the hassle of calling the driver partner, explaining where\nthey are, what colour clothes they are wearing, and so on. Our pickup points are\ndesigned to make lives easier for both customers and driver partners.\n\nThis is possible because the pickup points shown on the app are popular pickup\nlocations around the area. What’s more, the pickup point names are displayed\nexactly how customers driver partners usually refer to them.\n\nBut how do we manage to name so many pickup points accurately, and at scale?\n\nWe use past booking locations and their associated chat logs to discover named\npickup points. As our previous research has explained, we first perform \nclustering\n[https://blog.gojekengineering.com/fantastic-drivers-and-how-to-find-them-a88239ef3b29] \non historical bookings to form potential pickup points, then we use a language\nmodel\n[https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03] \nto select the best name. Here, we explain how we improved upon the previous\nstatistical language model with a state-of-the-art NLP model, which makes the\nentire naming exercise fully scalable. This is the magic behind all the pickup\npoints seen on the Gojek app.\n\nHow can we learn better?\nAs explained in our previous post, our original statistical language model\nselects the best pickup point name from the most probable n-grams extracted from\nbookings text. However, such a statistical language model doesn’t ‘understand’\nthe meaning of the texts, it simply chooses phrases with high frequencies\nwithout knowing the semantics. Sometimes it throws street names, sometimes even\ncommon phrases with no information about location. We have to manually check\neverything to make sure it reflects the right POI, before it appears on the app.\n\nThis creates a challenge — especially if we want to quickly expand the\nfrictionless pickup experience to customers across in new geographies. Hence, we\ndecided to go a step further with a deep-learning NLP model that ‘understands’\nand ‘learns’ to differentiate what is a valid pickup point name.\n\n> At Gojek, we never stop thinking and always go a step further\nMeet CartoBERT 💚\nOne of the most recent and impactful breakthroughs NLP was the publication of\nBERT[1] — a contextual language representation with transformer models — by\nGoogle in late 2018. It obtained state-of-the-art results on a wide array of NLP\ntasks. In the 2019, many NLP researches were influenced by BERT, including\nXLNet, RoBERTa, ERNIE etc.\n\nBERT Explained\nBERT, or Bidirectional Encoder Representations from Transformers, is composed of\nan embedding layer, followed by groups of transformer layers.\n\nBERT Architecture, Source [https://arxiv.org/pdf/1810.04805v1.pdf]Every word\n(token) in the input sentence will first get encoded into its embedding\nrepresentations in the embedding layer, and then go through bidirectional\ntransformer encoder layers. Every encoder layer will perform the multi-head\nattention computation on the token representation from the previous layer to\ncreate a new intermediate representation, which is then output to the next\nlayer. The output from the final layer is the contextual representation of the\ninput token. A pooled sentence level representation combining all token\nrepresentations could be created if needed by specific downstream tasks.\n\nWith the final contextual representations at either token or sentence level, a\npre-trained BERT on large unlabelled text corpus, could be further extended to a\nwide variety of NLP tasks, such as text classification, question answering,\nNamed Entity Recognition (NER) etc.\n\nALBERT[2], published by Google in Sep 2019, improved on BERT with embedding\nparameter factorisation and cross layer parameter sharing to reduce the number\nof parameters (by 9 times for base model). It also uses sequence order\nprediction instead of next sentence prediction for the pre-train task. In the\npaper, ALBERT also outperforms BERT on standard NLP tasks/datasets (SQUAD, RACE\netc), with fewer parameters.\n\nPre-train CartoBERT to learn language representation from Gojek bookings text\nInspired by ALBERT’s lightweight model and performance, we developed CartoBERT,\nGojek’s very own pickup point name recognition model, based on ALBERT’s\narchitecture.\n\nAs illustrated below, the uncased CartoBERT is pre-trained on Gojek’s own masked\nbookings text corpus of about 200 million sentences. Booking text is first\npre-processed for data masking to mask all customer sensitive information,\nlanguage detection, text normalisation (including text cleaning, slang,\nabbreviation transformations, lowercase transformation and emoji removal). The\npre-processed text is used to build subword vocabularies which handles\nOut-Of-Vocabulary (OOV) tokens that could be decomposed to frequent subword\npatterns. CartoBERT tokenizer is then created with the subword vocabularies and\nfurther used to encode and tokenize the same preprocessed bookings text to form\npre-trained input files.\n\nSame as ALBERT, the model is pre-trained to ‘understand’ Gojek’s bookings text\nusing Masked Language Model — which predicts randomly masked tokens in input\nsentences — and Sentence Order Prediction tasks, which predicts the order of\ninput sentences pair.\n\n\nCartoBERT Pre-trainFine-tuning CartoBERT to extract pickup point names from\nGojek bookings text\nWith the huge amount of bookings text we have at Gojek, now CartoBERT can better\n‘understand’ past bookings text. Theoretically, it ‘understands’ every word of a\nbooking text sentence.\n\nFor every token in the input sentence, CartoBERT will output a 768-dimension\nvector (we use the default hidden layer size of the ALBERT base model in\nCartoBERT, however this is configurable) from last transformer encoder layer,\nand we use that to represent CartoBERT’s ‘understanding’ of the token’s meaning\nin the sentence context for fine-tune step.\n\nAs illustrated in the diagram below, while fine-tuning CartoBERT for pickup\npoint name recognition, we replace the Masked Language Model and Sequence Order\nPrediction layers from CartoBERT in pre-train step with token classification\nlayer. The token classification layer learns to predict the probability of a\ntoken belonging to a pickup point name, with the final token representation\noutput from CartoBERT transformer layers, from labelled training data created\nwith bookings text sentences, and corresponding pickup point names. Here, we use\nweighted cross entropy loss to deal with class imbalance, as tokens tagged to\npickup point names are a minority.\n\nCartoBERT Fine-tuneWith this, CartoBERT is fine-tuned to extract pickup point\nnames from bookings text sentences, if any.\n\nHow does the model perform?\nCartoBERT gives a lift of more than 25% in pickup point name accuracy to ~93%\naccuracy, which is measured as the percentage of valid pick up point names out\nof generated names. With this high accuracy, we have achieved full scalability\nof automatic generation for named pickup points to quickly cover multiple\ngeographies without heavy reliance on human inputs.\n\nWhat’s next?\nWe are not stopping here and are exploring using active learning to further\nimprove CartoBERT. With active learning, we only flag out uncertain predictions,\nwhich are measured as sentence level least token probability[3] for human\nlabelling. We then use human-curated data as feedback for model learning. In\nthis way, we can improve model learning efficiency with minimum labelling\neffort.\n\nWhat’s more, with the success of CartoBERT, we are considering pre-training and\nopen sourcing a general Indonesia Bahasa ALBERT model with Indonesia open corpus\nfrom wiki, news, Twitter etc. Currently, the options for open-sourced language\nmodel in Indonesia Bahasa are very limited, only pre-trained static word\nembeddings such as word2vec, fasttext etc are available. It would be beneficial\nto the community if we have a good state-of-the-art attention-based transformer\nmodel for the language. Stay tuned for more updates from the Cartography Data\nScience team. 🙌\n\nLeave a 👏 if you liked what you read. Ping me with suggestions and feedback.\n\nThanks to all the amazing people who contributed to this post: Tan Funan, Zane\nLim, Dang Le, Lijuan Chia, Bani Widyatmiko, Maureen Koha, Ringga Saputra, Nur\nIzzahudinr, Sandya Ardi, Yeni Primasari, Ardya Dipta.\n\n\n--------------------------------------------------------------------------------\n\nReferences\n[1] J. Devlin [https://arxiv.org/search/cs?searchtype=author&query=Devlin%2C+J], \nM. Chang [https://arxiv.org/search/cs?searchtype=author&query=Chang%2C+M], K.\nLee [https://arxiv.org/search/cs?searchtype=author&query=Lee%2C+K], K. Toutanova\n[https://arxiv.org/search/cs?searchtype=author&query=Toutanova%2C+K]: BERT:\nPre-training of Deep Bidirectional Transformers for Language Understanding.\narXiv:1810.04805 [https://arxiv.org/abs/1810.04805] (2018)\n\n[2] Z. Lan [https://arxiv.org/search/cs?searchtype=author&query=Lan%2C+Z], M.\nChen [https://arxiv.org/search/cs?searchtype=author&query=Chen%2C+M], S. Goodman\n[https://arxiv.org/search/cs?searchtype=author&query=Goodman%2C+S], K. Gimpel\n[https://arxiv.org/search/cs?searchtype=author&query=Gimpel%2C+K], P. Sharma\n[https://arxiv.org/search/cs?searchtype=author&query=Sharma%2C+P], R. Soricut\n[https://arxiv.org/search/cs?searchtype=author&query=Soricut%2C+R]: ALBERT: A\nLite BERT for Self-supervised Learning of Language Representations. \narXiv:1909.11942 [https://arxiv.org/abs/1909.11942] (2019)\n\n[3] M.Liu [https://arxiv.org/search/cs?searchtype=author&query=Liu%2C+M], Z. Tu\n[https://arxiv.org/search/cs?searchtype=author&query=Tu%2C+Z], Z. Wang\n[https://arxiv.org/search/cs?searchtype=author&query=Wang%2C+Z], X. Xu\n[https://arxiv.org/search/cs?searchtype=author&query=Xu%2C+X]: LTP: A New Active\nLearning Strategy for Bert-CRF Based Named Entity Recognition. arXiv:2001.02524\n[https://arxiv.org/abs/2001.02524] (2020)\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] to have our latest stories\ndelivered straight to your inbox!","html":"<p>By Li Xiaohong</p><p>When our customers want to use our ride hailing products like GoRide and GoCar, they are presented with convenient, clearly named pickup points nearby. Here’s an example:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/180/1*msS7z4IN06LVM0XvClmmPQ.gif\" class=\"kg-image\"></figure><p>This saves customers the hassle of calling the driver partner, explaining where they are, what colour clothes they are wearing, and so on. Our pickup points are designed to make lives easier for both customers and driver partners.</p><p>This is possible because the pickup points shown on the app are popular pickup locations around the area. What’s more, the pickup point names are displayed exactly how customers driver partners usually refer to them.</p><p><strong><strong>But how do we manage to name so many pickup points accurately, and at scale?</strong></strong></p><p>We use past booking locations and their associated chat logs to discover named pickup points. As our previous research has explained, we first perform <a href=\"https://blog.gojekengineering.com/fantastic-drivers-and-how-to-find-them-a88239ef3b29\" rel=\"noopener\">clustering</a> on historical bookings to form potential pickup points, then we use a <a href=\"https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03\" rel=\"noopener\">language model</a> to select the best name. Here, we explain how we improved upon the previous statistical language model with a state-of-the-art NLP model, which makes the entire naming exercise fully scalable. This is the magic behind all the pickup points seen on the Gojek app.</p><h1 id=\"how-can-we-learn-better\">How can we learn better?</h1><p>As explained in our previous post, our original statistical language model selects the best pickup point name from the most probable n-grams extracted from bookings text. However, such a statistical language model doesn’t ‘understand’ the meaning of the texts, it simply chooses phrases with high frequencies without knowing the semantics. Sometimes it throws street names, sometimes even common phrases with no information about location. We have to manually check everything to make sure it reflects the right POI, before it appears on the app.</p><p>This creates a challenge — especially if we want to quickly expand the frictionless pickup experience to customers across in new geographies. Hence, we decided to go a step further with a deep-learning NLP model that ‘understands’ and ‘learns’ to differentiate what is a valid pickup point name.</p><blockquote><em><em>At Gojek, we never stop thinking and always go a step further</em></em></blockquote><h1 id=\"meet-cartobert-\">Meet CartoBERT 💚</h1><p>One of the most recent and impactful breakthroughs NLP was the publication of BERT[1] — a contextual language representation with transformer models — by Google in late 2018. It obtained state-of-the-art results on a wide array of NLP tasks. In the 2019, many NLP researches were influenced by BERT, including XLNet, RoBERTa, ERNIE etc.</p><h2 id=\"bert-explained\">BERT Explained</h2><p>BERT, or Bidirectional Encoder Representations from Transformers, is composed of an embedding layer, followed by groups of transformer layers.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1226/1*qHFXdPcW_3UkLEsRJy2FRg.png\" class=\"kg-image\"><figcaption>BERT Architecture, <a href=\"https://arxiv.org/pdf/1810.04805v1.pdf\" rel=\"noopener\">Source</a></figcaption></figure><p>Every word (token) in the input sentence will first get encoded into its embedding representations in the embedding layer, and then go through bidirectional transformer encoder layers. Every encoder layer will perform the multi-head attention computation on the token representation from the previous layer to create a new intermediate representation, which is then output to the next layer. The output from the final layer is the contextual representation of the input token. A pooled sentence level representation combining all token representations could be created if needed by specific downstream tasks.</p><p>With the final contextual representations at either token or sentence level, a pre-trained BERT on large unlabelled text corpus, could be further extended to a wide variety of NLP tasks, such as text classification, question answering, Named Entity Recognition (NER) etc.</p><p>ALBERT[2], published by Google in Sep 2019, improved on BERT with embedding parameter factorisation and cross layer parameter sharing to reduce the number of parameters (by 9 times for base model). It also uses sequence order prediction instead of next sentence prediction for the pre-train task. In the paper, ALBERT also outperforms BERT on standard NLP tasks/datasets (SQUAD, RACE etc), with fewer parameters.</p><h2 id=\"pre-train-cartobert-to-learn-language-representation-from-gojek-bookings-text\">Pre-train CartoBERT to learn language representation from Gojek bookings text</h2><p>Inspired by ALBERT’s lightweight model and performance, we developed CartoBERT, Gojek’s very own pickup point name recognition model, based on ALBERT’s architecture.</p><p>As illustrated below, the uncased CartoBERT is pre-trained on Gojek’s own masked bookings text corpus of about 200 million sentences. Booking text is first pre-processed for data masking to mask all customer sensitive information, language detection, text normalisation (including text cleaning, slang, abbreviation transformations, lowercase transformation and emoji removal). The pre-processed text is used to build subword vocabularies which handles Out-Of-Vocabulary (OOV) tokens that could be decomposed to frequent subword patterns. CartoBERT tokenizer is then created with the subword vocabularies and further used to encode and tokenize the same preprocessed bookings text to form pre-trained input files.</p><p>Same as ALBERT, the model is pre-trained to ‘understand’ Gojek’s bookings text using Masked Language Model — which predicts randomly masked tokens in input sentences — and Sentence Order Prediction tasks, which predicts the order of input sentences pair.<br></p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1386/1*STaqWssxlYPhFaDulLwJzg.png\" class=\"kg-image\"><figcaption>CartoBERT Pre-train</figcaption></figure><h2 id=\"fine-tuning-cartobert-to-extract-pickup-point-names-from-gojek-bookings-text\">Fine-tuning CartoBERT to extract pickup point names from Gojek bookings text</h2><p>With the huge amount of bookings text we have at Gojek, now CartoBERT can better ‘understand’ past bookings text. Theoretically, it ‘understands’ every word of a booking text sentence.</p><p>For every token in the input sentence, CartoBERT will output a 768-dimension vector (we use the default hidden layer size of the ALBERT base model in CartoBERT, however this is configurable) from last transformer encoder layer, and we use that to represent CartoBERT’s ‘understanding’ of the token’s meaning in the sentence context for fine-tune step.</p><p>As illustrated in the diagram below, while fine-tuning CartoBERT for pickup point name recognition, we replace the Masked Language Model and Sequence Order Prediction layers from CartoBERT in pre-train step with token classification layer. The token classification layer learns to predict the probability of a token belonging to a pickup point name, with the final token representation output from CartoBERT transformer layers, from labelled training data created with bookings text sentences, and corresponding pickup point names. Here, we use weighted cross entropy loss to deal with class imbalance, as tokens tagged to pickup point names are a minority.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1526/1*WO1LRHQPqAqzpLBMMl-NuA.png\" class=\"kg-image\"><figcaption>CartoBERT Fine-tune</figcaption></figure><p>With this, CartoBERT is fine-tuned to extract pickup point names from bookings text sentences, if any.</p><h2 id=\"how-does-the-model-perform\">How does the model perform?</h2><p>CartoBERT gives a lift of more than 25% in pickup point name accuracy to ~93% accuracy, which is measured as the percentage of valid pick up point names out of generated names. With this high accuracy, we have achieved full scalability of automatic generation for named pickup points to quickly cover multiple geographies without heavy reliance on human inputs.</p><h1 id=\"what-s-next\">What’s next?</h1><p>We are not stopping here and are exploring using active learning to further improve CartoBERT. With active learning, we only flag out uncertain predictions, which are measured as sentence level least token probability[3] for human labelling. We then use human-curated data as feedback for model learning. In this way, we can improve model learning efficiency with minimum labelling effort.</p><p>What’s more, with the success of CartoBERT, we are considering pre-training and open sourcing a general Indonesia Bahasa ALBERT model with Indonesia open corpus from wiki, news, Twitter etc. Currently, the options for open-sourced language model in Indonesia Bahasa are very limited, only pre-trained static word embeddings such as word2vec, fasttext etc are available. It would be beneficial to the community if we have a good state-of-the-art attention-based transformer model for the language. Stay tuned for more updates from the Cartography Data Science team. 🙌</p><p>Leave a 👏 if you liked what you read. Ping me with suggestions and feedback.</p><p>Thanks to all the amazing people who contributed to this post: Tan Funan, Zane Lim, Dang Le, Lijuan Chia, Bani Widyatmiko, Maureen Koha, Ringga Saputra, Nur Izzahudinr, Sandya Ardi, Yeni Primasari, Ardya Dipta.</p><hr><h1 id=\"references\">References</h1><p>[1] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Devlin%2C+J\" rel=\"noopener\">J. Devlin</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Chang%2C+M\" rel=\"noopener\">M. Chang</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Lee%2C+K\" rel=\"noopener\">K. Lee</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Toutanova%2C+K\" rel=\"noopener\">K. Toutanova</a>: BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.<br><a href=\"https://arxiv.org/abs/1810.04805\" rel=\"noopener\">arXiv:1810.04805</a> (2018)</p><p>[2] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Lan%2C+Z\" rel=\"noopener\">Z. Lan</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Chen%2C+M\" rel=\"noopener\">M. Chen</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Goodman%2C+S\" rel=\"noopener\">S. Goodman</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Gimpel%2C+K\" rel=\"noopener\">K. Gimpel</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Sharma%2C+P\" rel=\"noopener\">P. Sharma</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Soricut%2C+R\" rel=\"noopener\">R. Soricut</a>: ALBERT: A Lite BERT for Self-supervised Learning of Language Representations. <a href=\"https://arxiv.org/abs/1909.11942\" rel=\"noopener\">arXiv:1909.11942</a> (2019)</p><p>[3] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Liu%2C+M\" rel=\"noopener\">M.Liu</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Tu%2C+Z\" rel=\"noopener\">Z. Tu</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Wang%2C+Z\" rel=\"noopener\">Z. Wang</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Xu%2C+X\" rel=\"noopener\">X. Xu</a>: LTP: A New Active Learning Strategy for Bert-CRF Based Named Entity Recognition. <a href=\"https://arxiv.org/abs/2001.02524\" rel=\"noopener\">arXiv:2001.02524</a> (2020)</p><hr><p>Liked what you read? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a> to have our latest stories delivered straight to your inbox!</p>","url":"https://gojek-ghost.zysk.in/how-gojek-uses-nlp-to-name-pickup-locations-at-scale/","canonical_url":null,"uuid":"b4ebe040-85ec-4818-aff5-0dd14c44c596","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca217aa22c4066f83b64","reading_time":6}}]},"techFeaturedPost":{"edges":[{"node":{"id":"Ghost__Post__5eaf9f2234df85001e15f42d","title":"OK Google, Meet Gojek","slug":"ok-google-meet-gojekwe-added-gojeks-ride-hailing-and-food-ordering-functions-to-google-assistant-heres-what-we-learned-in-the-process","featured":true,"feature_image":"https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_QaQg1VnVWuhAebytXO-gKg.jpg","excerpt":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.","custom_excerpt":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.","visibility":"public","created_at_pretty":"04 May, 2020","published_at_pretty":"04 May, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-05-04T10:20:42.000+05:30","published_at":"2020-05-04T10:33:07.000+05:30","updated_at":"2020-05-12T11:46:27.000+05:30","meta_title":"Ok Google, Meet Gojek","meta_description":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant.\nHere’s what we learned in the process.\nBy Vikas Bajpayee and Lokesh Kalal\n\nOur aim behind building a Super App was to help our users get rid of the daily\nfrictions in their lives. But the journey doesn’t stop there. Even after\nbuilding all these convenient products, we still try and reduce frictions that\nmay be encountered even within our app — such as booking a ride or ordering\nfood.\n\nSo we thought, why don’t we integrate with Google Assistant, and let our users\ncommunicate with our products in a new way?\n\nIn this post, we explain how we integrated our food and transport products with\nthe Google Assistant.\n\nThe why\nWe’ve already addressed one part of the why — convenience. The other is user\nre-engagement. According to this survey\n[https://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/?utm_content=buffere4fa2&utm_medium=twitter.com&utm_source=social&utm_campaign=buffer] \nconducted by Silicon Valley researcher Andrew Chen 77% of users stop using an\napp three days after they install it. Within a month, that number goes up to\n90%. ?\n\nThe how\nTo help integrate Android apps with the Google Assistant, Google launched App\nActions:\n\nWhat are app actions?\nApp Actions are a new way to make your android app content available in places\nlike Google Search, Google Assistant etc. From a user’s perspective, App Actions\nbehave like shortcuts to parts of your Android app. When users invoke an App\nAction, the Assistant either launches a screen in the Android app that the user\nhas already installed or shows an embedded visual card (Android Slice) that\nusers can interact with.\n\nApp actions provide a faster way for users to access Android apps. It can be\nachieved in two ways:- either user can be directed to a specific\nactivity(screen) using a deep link or user may see relevant content on the\nAssistant itself called Slices.\n\nMore info on this can be found here: \nhttps://developers.google.com/assistant/app/overview\n\nWhat are Slices?\nSlices are super-powered app actions. They provide a way to interact with apps\nwithout moving away from Assistant by showing a small piece of UI within\nAssistant. Slices are UI templates that can display rich, dynamic, and\ninteractive content from the app in Google Assistant.\n\nSlices can help users perform tasks faster by enabling engagement outside of the\nfullscreen app experience.\n\nYou can build Slices as enhancements to App Actions.\n\nHere’s an example:\n\nWe choose to use slices to show food order status, as the order status will have\nlimited information (eg. Driver is on the way to Restaurant, with his location\non Map ) which can be easily shown in a small piece of UI segment.\n\nIn fact, this functionality was recently demoed on stage at a Google event in\nIndonesia. You can check it out below:\n\nApp Actions Demo at #Google4ID 2019How does it work?\nWhenever a user says or types something in Assistant, assistant parses the\nquery. If the query matches the built-in intent\n[https://developers.google.com/assistant/app/reference/built-in-intents] grammar\nthen Google Assistant extracts the query parameter in schema.org\n[https://schema.org/] and generates a deep link URL using the mapping we provide\nin an actions.xml file.\n\nGoogle then attaches those extracted parameters to the deep link URL and creates\na final deep link which allows a user to launch specific content or screens in\nthe app.\n\nLet’s dig a little deeper:\n\nGoogle applies Machine Learning and Artificial Intelligence (Natural Language\nProcessing) to understand all the sentences we type in Assistant.\n\nWhile users can type anything they want in Assistant and the system gets better\nat interpreting them over time, but there are some sentences for specific intent\nthat are fixed by Google. More info here\n[https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation]\n.\n\nHow did we integrate our services with Assistant?\nThe core of integrating Gojek with Assistant involved creating actions on Google\nAssistant with actions.xml file.\n\nLet’s explore how to do this:\n\n1. Create actions.xml file in your XML folder. This contains all the actions\nwith built-in intents which define what actions our app can support in the\nAssistant. Each action contains built-in intents\n[https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation] \nsupported by Google as a <intent-name> tag.\n\n2. Define a fulfilment mode for each app action — which can be deep links or\nslices. You have to pass a fulfilment mode in each action. This is compulsory.\n\n3. Pass the URL template which will allow a user to launch your app — this can\nbe the deep link to your app or URL to Slice provider.\n\n4. Define entity-set — the Gojek app is available in multiple locales, so to\nprovide locale for all the regions, we added the entity-set, which allows\nAssistant to understand more than one version of category. ex:- taxi can be\npronounced as taksi in Bahasa.\n\nSo, If you want locale for your specific parameter in deep-link URL, you can\nsimply attach an entity-set with that parameter, see how you can achieve this in\nbelow example\n\n<parameter name=”taxiReservation.category”><entity-set-reference\nentitySetId=”TransportCategoryEntitySet” /></parameter>\n\n5. Add a reference to actions.xml file using the <meta> tag in your app’s\nmanifest.xml file inside the application tag.\n\nIn order to integrate Slices:\n\n 1. Implement an Android Slice by following the steps described in the Slices\n    Getting Started guide\n    [https://developer.android.com/guide/slices/getting-started].\n 2. In the actions.xml file, in the <fulfillment> element, specify \n    fulfillmentMode=“actions.fulfillment.SLICE” to indicate that a user intent\n    can be fulfilled using a Slice in your app.\n\nA few quick notes on what we learnt\n 1. Testing this feature is pretty hard and things become weird when you have\n    multiple build types of your app. For testing, you need a build type on the\n    Play Store, (which means the package name of the testing build should match\n    the package name of the published app). You can use a plugin (developed by\n    Google) called App Actions Test Tool\n    [https://developers.google.com/assistant/app/test-tool] for testing this\n    feature.\n\n> Please make sure you are following points while testing with App Actions Test\nTool:\na) Log in to Android Studio and Google Assistant with the account which has\naccess to your published app on Play console.\nb) ApplicationId of the app should be the same as your published app.\nc) Your Gradle should be built successfully.\nd) Use App Action Tool to create and update preview and test the app actions and\nslice.\n2. If your app is used in different locales, you can create locales using \nentity-set\n[https://developers.google.com/assistant/app/action-schema#entity-set-reference] \nin the actions.xml file.\n\n3. In order to give early builds to QA or other users (if you have multiple\nbuild types in your app), you can create an internal test track on Play console\nand add relevant people to it. This allows you to share the build to production\nfor only some listed users.\n\n(See this\n[https://support.google.com/googleplay/android-developer/answer/3131213?hl=en] \nfor how you can create an internal test track for your app.)\n\n4. Actions.xml shouldn’t be obfuscated in release apk — it means if you are\nusing any obfuscated tools like proguard then actions.xml shouldn’t be\nobfuscated there.\n\n5. Slices can be requested before the onCreate of your application is completed.\nYou can run into issues if you are using something which is initialised in \nonCreate while creating slices.\n\n6. Don't refresh slices from onBindSlice() method, it will end up in an infinite\nloop where Google Assistant will call onBindSlice() infinitely.\n\nThat’s all from us folks. Hope this post gave you a better understanding of how\nApp Actions and Slices work with Google Assistant. Working on this feature was\nan amazing experience for us. If you use the Gojek app, make sure to give them a\ntry and let us know what you think. ?\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] and we’ll send you updates\nfrom the blog straight to your inbox! ?","html":"<h3 id=\"we-added-gojek-s-ride-hailing-and-food-ordering-functions-to-google-assistant-here-s-what-we-learned-in-the-process-\">We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.</h3><p><strong><strong><em>By Vikas Bajpayee and Lokesh Kalal</em></strong></strong></p><p>Our aim behind building a Super App was to help our users get rid of the daily frictions in their lives. But the journey doesn’t stop there. Even after building all these convenient products, we still try and reduce frictions that may be encountered even within our app — such as booking a ride or ordering food.</p><p>So we thought, why don’t we integrate with Google Assistant, and let our users communicate with our products in a new way?</p><p>In this post, we explain how we integrated our food and transport products with the Google Assistant.</p><h1 id=\"the-why\">The why</h1><p>We’ve already addressed one part of the <em><em>why — </em></em>convenience. The other is user re-engagement. According to <a href=\"https://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/?utm_content=buffere4fa2&amp;utm_medium=twitter.com&amp;utm_source=social&amp;utm_campaign=buffer\" rel=\"noopener\">this survey</a> conducted by Silicon Valley researcher Andrew Chen 77% of users stop using an app three days after they install it. Within a month, that number goes up to 90%. ?</p><h1 id=\"the-how\">The how</h1><p>To help integrate Android apps with the Google Assistant, Google launched App Actions:</p><h2 id=\"what-are-app-actions\">What are app actions?</h2><p>App Actions are a new way to make your android app content available in places like Google Search, Google Assistant etc. From a user’s perspective, App Actions behave like shortcuts to parts of your Android app. When users invoke an App Action, the Assistant either launches a screen in the Android app that the user has already installed or shows an embedded visual card (Android Slice) that users can interact with.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/260/1*w4jk-CTME9amkb5dsIQDzw.gif\" class=\"kg-image\"></figure><p>App actions provide a faster way for users to access Android apps. It can be achieved in two ways:- either user can be directed to a specific activity(screen) using a deep link or user may see relevant content on the Assistant itself called Slices.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/260/1*KPBLtVMjiHBOPEJ53E9F8A.gif\" class=\"kg-image\"></figure><p>More info on this can be found here: <a href=\"https://developers.google.com/assistant/app/overview\" rel=\"noopener\">https://developers.google.com/assistant/app/overview</a></p><h2 id=\"what-are-slices\"><strong>What are Slices?</strong></h2><p>Slices are super-powered app actions. They provide a way to interact with apps without moving away from Assistant by showing a small piece of UI within Assistant. Slices are UI templates that can display rich, dynamic, and interactive content from the app in Google Assistant.</p><p><em><em>Slices can help users perform tasks faster by enabling engagement outside of the fullscreen app experience.</em></em></p><p>You can build Slices as enhancements to App Actions.</p><p>Here’s an example:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1080/1*EFF30b3185UtwKYjx0VP1A.jpeg\" class=\"kg-image\"></figure><p>We choose to use slices to show food order status, as the order status will have limited information (eg. Driver is on the way to Restaurant, with his location on Map ) which can be easily shown in a small piece of UI segment.</p><p>In fact, this functionality was recently demoed on stage at a Google event in Indonesia. You can check it out below:</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F0u20Iu4m2Co%3Fstart%3D5805%26feature%3Doembed%26start%3D5805&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0u20Iu4m2Co&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F0u20Iu4m2Co%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" allowfullscreen=\"\" frameborder=\"0\" height=\"480\" width=\"854\" title=\"#Google4ID 2019\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 382.188px;\"></iframe><figcaption>App Actions Demo at #Google4ID 2019</figcaption></figure><h1 id=\"how-does-it-work\"><strong>How does it work?</strong></h1><p>Whenever a user says or types something in Assistant, assistant parses the query. If the query matches the<a href=\"https://developers.google.com/assistant/app/reference/built-in-intents\" rel=\"noopener\"> built-in intent</a> grammar then Google Assistant extracts the query parameter in<a href=\"https://schema.org/\" rel=\"noopener\"> schema.org</a> and generates a deep link URL using the mapping we provide in an actions.xml file.</p><p>Google then attaches those extracted parameters to the deep link URL and creates a final deep link which allows a user to launch specific content or screens in the app.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1490/0*jUlpzwbXbFIgGy7s\" class=\"kg-image\"></figure><p>Let’s dig a little deeper:</p><p>Google applies Machine Learning and Artificial Intelligence (Natural Language Processing) to understand all the sentences we type in Assistant.</p><p>While users can type anything they want in Assistant and the system gets better at interpreting them over time, but there are some sentences for specific intent that are fixed by Google. More info <a href=\"https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation\" rel=\"noopener\">here</a>.</p><h1 id=\"how-did-we-integrate-our-services-with-assistant\"><strong>How did we integrate our services with Assistant?</strong></h1><p>The core of integrating Gojek with Assistant involved creating actions on Google Assistant with actions.xml file.</p><p>Let’s explore how to do this:</p><p>1. Create <strong><strong>actions.xml</strong></strong> file in your XML folder. This contains all the actions with built-in intents which define what actions our app can support in the Assistant. Each action contains<a href=\"https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation\" rel=\"noopener\"> built-in intents</a> supported by Google as a &lt;intent-name&gt; tag.</p><p>2. Define a fulfilment mode for each app action — which can be deep links or slices. You have to pass a fulfilment mode in each action. This is compulsory.</p><p>3. Pass the URL template which will allow a user to launch your app — this can be the deep link to your app or URL to Slice provider.</p><p>4. Define entity-set — the Gojek app is available in multiple locales, so to provide locale for all the regions, we added the entity-set, which allows Assistant to understand more than one version of category. ex:- taxi can be pronounced as taksi in Bahasa.</p><p>So, If you want locale for your specific parameter in deep-link URL, you can simply attach an entity-set with that parameter, see how you can achieve this in below example</p><p><em>&lt;parameter name=”taxiReservation.category”&gt;&lt;entity-set-reference entitySetId=”TransportCategoryEntitySet” /&gt;&lt;/parameter&gt;</em></p><p>5. Add a reference to <strong><strong>actions.xml</strong></strong> file using the &lt;meta&gt; tag in your app’s manifest.xml file inside the application tag.</p><p><strong><strong>In order to integrate Slices:</strong></strong></p><ol><li>Implement an Android Slice by following the steps described in the <a href=\"https://developer.android.com/guide/slices/getting-started\" rel=\"noopener\">Slices Getting Started guide</a>.</li><li>In the actions.xml file, in the <code>&lt;fulfillment&gt;</code> element, specify <code>fulfillmentMode=“actions.fulfillment.SLICE”</code> to indicate that a user intent can be fulfilled using a Slice in your app.</li></ol><h1 id=\"a-few-quick-notes-on-what-we-learnt\"><strong>A few quick notes on what we learnt</strong></h1><ol><li>Testing this feature is pretty hard and things become weird when you have multiple build types of your app. For testing, you need a build type on the Play Store, (which means the package name of the testing build should match the package name of the published app). You can use a plugin (developed by Google) called<a href=\"https://developers.google.com/assistant/app/test-tool\" rel=\"noopener\"> <strong><strong>App Actions Test Tool</strong></strong></a> for testing this feature.</li></ol><blockquote><em><em>Please make sure you are following points while testing with App Actions Test Tool:</em></em><br><em><em>a) Log in to Android Studio and Google Assistant with the account which has access to your published app on Play console.</em></em><br><em><em>b) <code>ApplicationId</code> of the app should be the same as your published app.</em></em><br><em><em>c) Your Gradle should be built successfully.</em></em><br><em><em>d) Use App Action Tool to create and update preview and test the app actions and slice.</em></em></blockquote><p>2. If your app is used in different locales, you can create locales using <a href=\"https://developers.google.com/assistant/app/action-schema#entity-set-reference\" rel=\"noopener\">entity-set</a> in the actions.xml file.</p><p>3. In order to give early builds to QA or other users (if you have multiple build types in your app), you can create an internal test track on Play console and add relevant people to it. This allows you to share the build to production for only some listed users.</p><p>(See <a href=\"https://support.google.com/googleplay/android-developer/answer/3131213?hl=en\" rel=\"noopener\">this</a> for how you can create an internal test track for your app.)</p><p>4. Actions.xml shouldn’t be <strong><strong>obfuscated</strong></strong> in release apk — it means if you are using any obfuscated tools like proguard then actions.xml shouldn’t be obfuscated there.</p><p>5. Slices can be requested before the <code>onCreate</code> of your application is completed. You can run into issues if you are using something which is initialised in <code>onCreate</code> while creating slices.</p><p>6. Don't refresh slices from <code>onBindSlice()</code> method, it will end up in an infinite loop where Google Assistant will call <code>onBindSlice()</code> infinitely.</p><p>That’s all from us folks. Hope this post gave you a better understanding of how App Actions and Slices work with Google Assistant. Working on this feature was an amazing experience for us. If you use the Gojek app, make sure to give them a try and let us know what you think. ?</p><hr><p>Liked what you read? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a> and we’ll send you updates from the blog straight to your inbox! ?</p>","url":"https://gojek-ghost.zysk.in/ok-google-meet-gojekwe-added-gojeks-ride-hailing-and-food-ordering-functions-to-google-assistant-heres-what-we-learned-in-the-process/","canonical_url":null,"uuid":"a980d332-756f-4f47-a97f-921a11196ed7","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eaf9f2234df85001e15f42d","reading_time":6}}]},"techPosts":{"edges":[{"node":{"id":"Ghost__Post__5ec94e8c7aa22c4066f83db2","title":"Tips for Building Smooth Live Tracking","slug":"tips-for-building-smooth-live-tracking","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking-1.jpeg","excerpt":"How did we manage to build accurate tracking and smooth animations in our app? Here are your answers.","custom_excerpt":"How did we manage to build accurate tracking and smooth animations in our app? Here are your answers.","visibility":"public","created_at_pretty":"23 May, 2020","published_at_pretty":"22 May, 2020","updated_at_pretty":"23 May, 2020","created_at":"2020-05-23T21:55:48.000+05:30","published_at":"2020-05-22T09:00:00.000+05:30","updated_at":"2020-05-23T22:31:54.000+05:30","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Ride Hailing","slug":"ride-hailing","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Startup","slug":"startup","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Maps","slug":"maps","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Software Engineering","slug":"software-engineering","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Divya Vikash\n\nIt’s a nice Monday morning and you just ordered a GoRide (one of Gojek’s\ntransport products) to go to your office. Voila!! You got a driver. That was\nfast. You can see your driver’s location on the map, and the estimated time they\nwould take to come to you.\n\nBut hang on… It seems like the map is a bit messed up.\n\nThe driver location on the map goes back and forth at unreal speed, and even\nflies over buildings. Starring in an action movie is not exactly how you want to\nstart your week. 😮\n\nWhile our driver-partners sure are superman in their own unique way, they\ncertainly can’t drive over buildings. This is clearly not how your driver is\nactually driving on the road. But then why is the map showing all this?\n\nWell, there are multiple factors that can lead to a bad experience like that.\nSome within our control, some not so much (as of now). We decided to go back to\nthe drawing board and figure out the issues that are in our control and fix them\nfor good. And that is how we built a world-class (arguably 😬) live-tracking\nexperience.\n\nBut what is live-tracking, you would ask?\n\nLive tracking is a complete map experience. It doesn’t involve anything other\nthan what you see on maps after you get a driver.\n\nSo, what do you see on maps?\n\n 1. Driver's location depicted by a green marker.\n 2. The routes.\n 3. The change in driver marker as the driver moves closer to your pickup/your\n    destination.\n 4. The change in route as the driver moves.\n\nAnd that’s it. That’s all live-tracking is.\n\n> But that sounds quite simple. Right? Use some routing APIs and plot the markers\nand routes.\nWell, yes, it sounded easy to us when we first heard about it too. The real\nexperience threw us a few curveballs. Let’s go through how we create a\nlive-tracking experience.\n\nInput\n\nLet’s look at the input data that we need to create a live-tracking animation:\n\nDriver Location and Routes\n\nOur driver apps have an in-built mechanism to upload driver location to our\nbackend at regular intervals. This is how we are able to find a driver close to\nyour location when you order one of our services. The primary input to\nlive-tracking is this driver location.\n\nIn our driver app, we get this location using Android’s FusedLocationProvider \nAPI which automatically uses the best location provider(GPS, Wifi, etc). The\ndriver location is ingested into our backend system via a continuous stream.\nRoutes are generated by our internal routing engine and provided to the customer\napp.\n\nInput Source\nAs you would have guessed, this data is provided via API calls initiated by the\nour Super App to the routing engine.\n\nMaking the API call just once won’t be sufficient. Right? The app needs to be\ninformed every time the driver’s location has changed. So, the customer app\npolls this API every few seconds to get this data.\n\nNow, we have a continuous stream of data flowing to our app which has all the\ninformation that we need to show the vehicle animation on the road.\n\nTerminology\nBefore moving forward, we should get acquainted with a few terminologies that we\nwould use quite frequently in this post.\n\n 1. Route: The entire list of latitude-longitudes between the driver location to\n    the pickup/destination location.\n 2. Segment: A segment is the smallest unit of a route. It is a straight line\n    from one position in the routes list to the very next position in the routes\n    list.\n\nA route of length n has n-1 segments. Confused? Yeah, let’s take an example.\n\nA Route looks like this:\n\n[{-62441198, 106.8032959},\n{-6.2440766, 106.80328}, \n{-6.2439977, 106.8033275},\n{-6.2434893, 106.8029214},\n{-6.2433926, 106.8030539},\n{-6.2436018, 106.803222}]\n\nThere are 5 Segments in this route.\n\nSegment 1: {-6.2441198, 106.8032959,-6.2440766, 106.80328}\nSegment 2: {-6.2440766, 106.80328,-6.2439977, 106.8033275}\nSegment 3: {-6.2439977, 106.8033275,-6.2434893, 106.8029214}\nSegment 4: {-6.2434893, 106.8029214,-6.2433926, 106.8030539}\nSegment 5: {-6.2433926, 106.8030539,-6.2436018, 106.8032224}\n\nThe initial setup\nWhen the user lands on the live tracking screen, the app immediately makes a\ncall to our internal API to get the driver location and route. Once we get this\ndata, we plot it on the map using the standard GoogleMap methods. \ngoogleMap.addMarker(), googleMap.addPolyline() etc.\n\nSometimes, we don’t have the routing information available immediately, so we\njust show the driver marker. We also store this data locally in an in-memory\ncache as we would need it later to do some comparisons.\n\nSo, the customer is able to see the markers and routes on the map now. So far so\ngood.\n\nThe subsequent updates\nAs I mentioned earlier, we need to change the position of driver marker and\nroute as the driver moves. The customer app makes a call to the same internal\nAPI every few seconds. After the first response, we don’t move any markers or\nroutes on the map until the next response succeeds.\n\nIn the next response, we again get the same data points i.e the route and driver\nlocation but with different values, of course, if the driver has moved. The next\nset of data that we get can have the following characteristics:\n\n 1. Route and driver location don’t change\n 2. Route changes\n 3. Route doesn’t change BUT driver location does\n\nLet’s discuss these cases one by one.\n\n1: Route and driver location don’t change\nIf nothing has changed, we don’t need to do anything. Probably our driver\npartner is stuck in traffic. 😞\n\n2: Route changes\nThis can happen either when:\n\n 1. The app was not showing any route to the user before i.e the first response\n    didn’t have the route.\n 2. The app was showing a route that is different from the newly received route.\n    This usually happens in cases where the driver starts following a different\n    route from the one they were following before. This can also happen due to\n    road closures or simply because our driver-partner initially followed a\n    wrong route by mistake 😅.\n\nIn either of these cases, we simply ignore the old driver marker and routes\nwhich were shown and plot the new marker and routes.\n\n3: Route doesn’t change BUT driver location does\nThe app was showing the same route to the user before i.e the old response had\nthe same route as the new response. This means that the driver is following the\noriginal route that we determined.\n\nIn this case, we need to animate the driver marker on the map from the old\nlocation to the new location along the same route. This is the most common\nscenario, which can again be broken down further into multiple scenarios (yeah,\nI’m all about breaking things down 🤐).\n\n3.1: Does the new location lie on the route?\nTo animate the driver marker from it’s current position to the new location, we\nfirst need to know whether the new location lies on the route or not.\n\nYeah, we can’t be sure that the driver location that we have received would\nalways lie on the route/road because of various GPS inaccuracy issues.\n\nWe iterate through every segment in the route to find the segment which has the\nnew location. For every segment, we use the Geometry/PolyUtil library to\ndetermine whether the driver location lies on that route.\n\nWe also specify a tolerance of a few meters to account for GPS inaccuracy. So,\nif the newly received location is within a radius of X meters near a segment,\nthis method will return true.\n\nAndroid\n\nboolean isLocationOnPath(LatLng point,List<LatLng> polyline,boolean geodesic,\ndouble tolerance)\n\niOS\n\nBOOL GMSGeometryIsLocationOnPathToleranc\n[https://developers.google.com/maps/documentation/ios-sdk/reference/group___geometry_utils#ga580ba381b9d4fbc0ff430cf69e06e66d]\ne(CLLocationCoordinate2D point,GMSPath\n[https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_path] \n* path,BOOL geodesic,CLLocationDistance tolerance)\n\nIf the location doesn’t lie on any of the segments in the route, we are sad and\nso, we don’t animate anything. But if it does, we go forward with the next step\nwhich is….\n\n3.2: Vehicle projection on route\nWhen we receive a new location, the start location is simply the position that\nthe driver marker is already at. No logic required there to calculate that.\n\nThe end location should simply be the new location that we received. Well, in an\nideal world, it should be but we live so far away from an ideal world 😞.\n\nAs we mentioned earlier, the raw driver location that we get from the driver app\nvia GPS/other providers mostly doesn’t lie on the road. So, we have to find a\nprojection of the driver location on the road/route.\n\nIf you have been reading carefully, you might wonder why we can’t just use the \nisLocationOnPath() method above 🤔.\n\nWell, if you had been reading more carefully, you might have noticed that this\nmethod returns a boolean explaining whether the location is on/near the route or\nnot 🤦‍♂. It doesn’t return the projected location. (Ohh..if someone from Maps\nUtils stumbled upon this by chance, please add that method, good sir).\n\nSo, we had to revise some maths. Yeah, folks, learn your maths well. You never\nknow when a situation like this might arise 🤷‍♂.\n\n“Find the projection of point (x,y) on the line y = mx + c”. Does that ring a\nbell? Drawing a perpendicular line towards the segment and calculating the\nlocation of where the line and route intersect can give us the projected\nlocation. Right?\n\nWell, the above approach works for 2-D systems but earth is not a 2-D space. We\nneed a way to project the spherical surface of the earth onto a rectangle 2-D\nspace. There are several ways to do that. All of them have certain drawbacks. We\nmight lose information like direction or the shape of landmasses/countries or\nthe area information.\n\nMercator Projection\n\nMercator projection is one of the available methods to project the spherical map\nof earth onto a rectangle to make usable maps. Most of the mapping tools used\nfor navigation use this projection.\n\nThe key feature of Mercator projection is that it retains the direction\ninformation. That means if point A is 30deg east from north of point B on the\nglobe, it will be in the same direction on its Mercator projection. Or say there\nis a turn of 90deg in some lane, it will be 90deg on Mercator projection as\nwell. That is the reason it works really well for navigation purposes.\n\nHow to use a Mercator projection?\n\n 1. Every point on the earth is projected on a cylinder exactly like point A\n    which has point A’ on the cylinder.\n 2. Once all the required points/routes are projected on this cylinder. It is\n    unrolled, and we obtain a rectangle like the one shown above.\n 3. All the planar geometry can be applied with a very little margin of error on\n    this 2D projected map.\n 4. After processing all the points/routes they can be converted back to\n    latitude and longitude on the globe.\n\nSo, now we have the projected driver location on the route which we will fondly\ncall snapped point going forward.\n\n3.3: End-to-End animation\nThe new driver location that we receive can be present in any segment. It may be\nthat it is in the same segment or it may be that it is on the next segment or on\nthe next one or it may be that it is on the last segment.\n\nBut for linear animation, we need a start point and an end point. The start\npoint is the current position of the driver marker. We already got the snapped\nendpoint in the earlier section. But we can’t just animate from start to end at\nonce as that would seem like the car is flying and ignoring U-turns, routes,\netc. So, how do we prevent it from flying?\n\nWhat do you do when you can’t fly to a place? You follow the road. Right? That’s\nwhat we have to do as well. Make the driver marker follow the route/road. We\nneed to animate along each segment in the route until we reach the segment which\nhas the driver position that we received.\n\nThere are again two cases here 😜:\n\n3.3.1: The new driver location is on the same segment\nIn this case, we can directly animate from the current position of driver marker\nto the driver location that we received since this is just a straight line\nanimation.\n\nA segment is always a straight line. We will discuss more on how to do the\nanimation b/w 2 points in a later section.\n\n3.3.2: The new driver location is on a different segment\nIn this case, we need to animate to that segment along the route. We have to\nanimate along each of the segments in between to reach the final segment.\n\nFor animation along the first segment, we set the endpoint of the animation to\nthe beginning of the next segment in the route. We animate to the end of the\nfirst segment.\n\nThe next segment may also not have the driver location that we received. After a\ndriver has traversed the first segment, we move the end location of the\nanimation to the end of the next segment, and so on and so forth till we reach\nthe last segment. Confusing, ya? Let’s see an example.\n\nSo much zig-zag (huh!!)The car icon(A) represents the location in the segment\nwhere the driver marker currently is. The red pin(X) represents the new snapped\nlocation received.\n\nIn the 1st animation, we move the driver marker from A to the end of the first\nsegment (B).\n\nIn the 2nd animation, the driver marker is moved through the entire length of\nthe 2nd segment.\n\nAnd so on and so forth till we reach the segment which has the newly received\nsnapped location (X).\n\nAnimation in a segment\nWe now know how the overall animation would look like. But we also need to\nconfigure how the smallest unit of the animation i.e animation in a segment\nshould happen.\n\nStart point and End point: For case #1 above, the animation in a segment will\nhappen just once. For case #2 above, this animation in a segment will happen\nmultiple times. Start and endpoints will be determined before beginning each of\nthe animations.\n\nBearing b/w these two points: Bearing can be calculated using another one of\nGeometry/Maps Utils method.\n\nSphericalUtil.computeHeading(startPosition, endPosition)\n\nDuration of animation: Calculating duration is a bit tricky. And the duration is\nthe most important thing in any animation. Sometimes the difference b/w a smooth\nand a choppy animation is caused by the duration. It was very important that we\ngot it right. So, let’s take a break and see how to calculate the duration.\n\nWhat is Duration?\nIt’s the amount of time for which the animation should happen. But you already\nknow that. Going back to middle school maths (yeah, that far), how do you\ncalculate time? Time is nothing but distance divided by speed. Correct?\nCalculating straight line distance b/w the two points we want to animate through\nis pretty easy.\n\nSphericalUtil.computeDistanceBetween(startLocation, endLocation)\n\nCool, cool. But what about speed? How should we calculate speed?\n\nSpeed calculation\nFusedLocationProvider API in the driver app does provide the speed of the\nvehicle but it’s highly unreliable. So, we have to employ some tricks to\ncalculate the speed.\n\nSpeed is distance divided by time. Distance again!! Seems like we are running in\ncircles 😵. Not exactly. Here the distance is not the straight line distance b/w\nthe two points that we have to animate through.\n\nThis is the total distance along the route from the segment that the old driver\nlocation is currently located at, to the segment where the new driver location\nis. Yeah, that statement is a bit confusing. So, let’s take an example.\n\nThe car icon(A) represents the location in the segment where the driver marker\ncurrently is. The red pin(X) represents the new snapped location received. To\ncalculate the distance, we do the obvious:\n\nTotal distance = d1 + d2 + d3 + d4\n\nNow, we have the distance. We need the time interval.\n\nThe FusedLocationProvider API in the driver app does provide us the timestamp at\nwhich a location was updated. And this information is passed to our backend and\nsubsequently to the customer app.\n\nWe calculate the time difference b/w the old driver location and the new driver\nlocation using their timestamps. Wait, how do we know the old driver location?\nAs we had mentioned earlier, we cache the last available driver location and\nroute in an in-memory cache.\n\nTotal route distance divided by time and now we have the speed for the entire\nduration. Linear distance divided by this speed and now we have the durationfor\na single animation in a segment. Cool, so let’s get back to the point where we\nbroke off 😅.\n\nUpdate the animation\nWith all the above information, we start the animation. But wait? Aren’t we\nmissing something? We did start an animation b/w two points but how will our\nanimator know how to animate?\n\nAnimation is just a bunch of frame updates that happen every fast. How do we\nupdate the marker position, the starting point of the route, the rotation in\neach and every frame of the animation? Well, the mobile/web framework allows us\nto do something every time the frame is updated.\n\nBut what is this something that we should do?\n\n1. Update marker’s position\nFor markers, we need to update their position. Once we have the position, we can\nsimply update the marker position using the marker.setPosition(). To find the\nposition during each frame of the animation, we need the percentage of animation\nthat has elapsed.\n\nWe can get the percentage from the Animation framework. Using this percentage\nand the start and end position, we calculate the intermediate position/s like\nthis:\n\nSphericalUtil.interpolate(startPosition, endPosition, fraction)\n\n2. Update Routes\nRoutes need to be aligned with the marker’s movement. So, we update the routes\nas well using the values above and updating the polyline points of that route\nusing the polyline.setPoints().\n\nAnd that’s a wrap. The result that we get is a very smooth, measured movement of\nthe vehicle along the road.\n\nThere are a few more tips/tricks that we employ to ensure that there are no\nabrupt changes in the animation.\n\nBut that’s for next time. 😃\n\nWhat’s next?\nWe still need to go a long way to meet the standards that we have set for\nourselves. Currently, this new experience is only rolled out to GoRide, GoCar,\nand GoBluebird. We are working on bringing the same experience to other services\nlike GoFood, GoSend, and GoShop. Stay tuned for more!\n\nWant stories like this one beamed straight to your inbox? Sign up for our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\nThanks to Koushik Krishna, Abhay Sood, Anup Cowkur, Sooraj Rajmohan, and Kshitij\nChoudhary.","html":"<p><em><strong>By Divya Vikash</strong></em></p><p>It’s a nice Monday morning and you just ordered a GoRide (one of Gojek’s transport products) to go to your office. Voila!! You got a driver. That was fast. You can see your driver’s location on the map, and the estimated time they would take to come to you.</p><p><em><em>But hang on… It seems like the map is a bit messed up.</em></em></p><p>The driver location on the map goes back and forth at unreal speed, and even flies over buildings. Starring in an action movie is not exactly how you want to start your week. 😮</p><p>While our driver-partners sure are superman in their own unique way, they certainly can’t drive over buildings. This is clearly not how your driver is actually driving on the road. But then why is the map showing all this?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking2.gif\" class=\"kg-image\"></figure><p>Well, there are multiple factors that can lead to a bad experience like that. Some within our control, some not so much (as of now). We decided to go back to the drawing board and figure out the issues that are in our control and fix them for good. And that is how we built a world-class (arguably 😬) live-tracking experience.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image.png\" class=\"kg-image\"></figure><p>But what is live-tracking, you would ask?</p><p>Live tracking is a complete map experience. It doesn’t involve anything other than what you see on maps after you get a driver.</p><p>So, what do you see on maps?</p><ol><li>Driver's location depicted by a green marker.</li><li>The routes.</li><li>The change in driver marker as the driver moves closer to your pickup/your destination.</li><li>The change in route as the driver moves.</li></ol><p>And that’s it. That’s all live-tracking is.</p><blockquote><em><em>But that sounds quite simple. Right? Use some routing APIs and plot the markers and routes.</em></em></blockquote><p>Well, yes, it sounded easy to us when we first heard about it too. The real experience threw us a few curveballs. Let’s go through how we create a live-tracking experience.</p><p><strong>Input</strong></p><p>Let’s look at the input data that we need to create a live-tracking animation:</p><p><strong><strong>Driver Location and Routes</strong></strong></p><p>Our driver apps have an in-built mechanism to upload driver location to our backend at regular intervals. This is how we are able to find a driver close to your location when you order one of our services. The primary input to live-tracking is this driver location.</p><p>In our driver app, we get this location using Android’s <code>FusedLocationProvider</code> API which automatically uses the best location provider(GPS, Wifi, etc). The driver location is ingested into our backend system via a continuous stream. Routes are generated by our internal routing engine and provided to the customer app.</p><h3 id=\"input-source\">Input Source</h3><p>As you would have guessed, this data is provided via API calls initiated by the our Super App to the routing engine.</p><p>Making the API call just once won’t be sufficient. Right? The app needs to be informed every time the driver’s location has changed. So, the customer app polls this API every few seconds to get this data.</p><p>Now, we have a continuous stream of data flowing to our app which has all the information that we need to show the vehicle animation on the road.</p><h3 id=\"terminology\">Terminology</h3><p>Before moving forward, we should get acquainted with a few terminologies that we would use quite frequently in this post.</p><ol><li><strong><strong>Route</strong></strong>: The entire list of latitude-longitudes between the driver location to the pickup/destination location.</li><li><strong><strong>Segment</strong></strong>: A segment is the smallest unit of a route. It is a straight line from one position in the routes list to the very next position in the routes list.</li></ol><p>A route of length n has n-1 segments. Confused? Yeah, let’s take an example.</p><p>A <strong><strong>Route</strong></strong> looks like this:</p><p>[{-6<code>2441198, 106.8032959},<br>{-6.2440766, 106.80328}, <br>{-6.2439977, 106.8033275},<br>{-6.2434893, 106.8029214},<br>{-6.2433926, 106.8030539},<br>{-6.2436018, 106.803222}]</code></p><p>There are 5 <strong><strong>Segments</strong></strong> in this route.</p><p><code>Segment 1: {-6.2441198, 106.8032959,-6.2440766, 106.80328}</code><br><code>Segment 2: {-6.2440766, 106.80328,-6.2439977, 106.8033275}</code><br><code>Segment 3: {-6.2439977, 106.8033275,-6.2434893, 106.8029214}</code><br><code>Segment 4: {-6.2434893, 106.8029214,-6.2433926, 106.8030539}</code><br><code>Segment 5: {-6.2433926, 106.8030539,-6.2436018, 106.8032224}</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-1.png\" class=\"kg-image\"></figure><h3 id=\"the-initial-setup\">The initial setup</h3><p>When the user lands on the live tracking screen, the app immediately makes a call to our internal API to get the driver location and route. Once we get this data, we plot it on the map using the standard GoogleMap methods. <code><em><em>googleMap.addMarker()</em></em></code><em><em>, </em></em><code><em><em>googleMap.addPolyline()</em></em></code> etc.</p><p>Sometimes, we don’t have the routing information available immediately, so we just show the driver marker. We also store this data locally in an in-memory cache as we would need it later to do some comparisons.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/436/1*k9IpgQ4ss-bhKHBY5ETUgg.gif\" class=\"kg-image\"></figure><p>So, the customer is able to see the markers and routes on the map now. So far so good.</p><h3 id=\"the-subsequent-updates\">The subsequent updates</h3><p>As I mentioned earlier, we need to change the position of driver marker and route as the driver moves. The customer app makes a call to the same internal API every few seconds. After the first response, we don’t move any markers or routes on the map until the next response succeeds.</p><p>In the next response, we again get the same data points i.e the route and driver location but with different values, of course, <strong><strong>if the driver has moved</strong></strong>. The next set of data that we get can have the following characteristics:</p><ol><li>Route and driver location don’t change</li><li>Route changes</li><li>Route doesn’t change BUT driver location does</li></ol><p>Let’s discuss these cases one by one.</p><h3 id=\"1-route-and-driver-location-don-t-change\">1: Route and driver location don’t change</h3><p>If nothing has changed, we don’t need to do anything. Probably our driver partner is stuck in traffic. 😞</p><h3 id=\"2-route-changes\">2: Route changes</h3><p>This can happen either when:</p><ol><li>The app was not showing any route to the user before i.e the first response didn’t have the route.</li><li>The app was showing a route that is different from the newly received route. This usually happens in cases where the driver starts following a different route from the one they were following before. This can also happen due to road closures or simply because our driver-partner initially followed a wrong route by mistake 😅.</li></ol><p>In either of these cases, we simply ignore the old driver marker and routes which were shown and plot the new marker and routes.</p><h3 id=\"3-route-doesn-t-change-but-driver-location-does\">3: Route doesn’t change BUT driver location does</h3><p>The app was showing the same route to the user before i.e the old response had the same route as the new response. This means that the driver is following the original route that we determined.</p><p>In this case, we need to animate the driver marker on the map from the old location to the new location along the same route. This is the most common scenario, which can again be broken down further into multiple scenarios (yeah, I’m all about breaking things down 🤐).</p><h3 id=\"3-1-does-the-new-location-lie-on-the-route\">3.1: Does the new location lie on the route?</h3><p>To animate the driver marker from it’s current position to the new location, we first need to know whether the new location lies on the route or not.</p><p>Yeah, we can’t be sure that the driver location that we have received would always lie on the route/road because of various GPS inaccuracy issues.</p><p>We iterate through every segment in the route to find the segment which has the new location. For every segment, we use the Geometry/PolyUtil library to determine whether the driver location lies on that route.</p><p>We also specify a tolerance of a few meters to account for GPS inaccuracy. So, if the newly received location is within a radius of <strong><strong>X meters</strong></strong> near a segment, this method will return true.</p><p><strong><strong>Android</strong></strong></p><p><code>boolean isLocationOnPath(LatLng point,List&lt;LatLng&gt; polyline,boolean geodesic, double tolerance)</code></p><p><strong><strong>iOS</strong></strong></p><p><code>BOOL <a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/group___geometry_utils#ga580ba381b9d4fbc0ff430cf69e06e66d\" rel=\"noopener\">GMSGeometryIsLocationOnPathToleranc</a>e(CLLocationCoordinate2D point,<a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_path\" rel=\"noopener\">GMSPath</a> * path,BOOL geodesic,CLLocationDistance tolerance)</code></p><p>If the location doesn’t lie on any of the segments in the route, we are sad and so, we don’t animate anything. But if it does, we go forward with the next step which is….</p><h3 id=\"3-2-vehicle-projection-on-route\">3.2: Vehicle projection on route</h3><p>When we receive a new location, the start location is simply the position that the driver marker is already at. No logic required there to calculate that.</p><p>The end location should simply be the new location that we received. Well, in an ideal world, it <strong><strong>should be</strong></strong> but we live so far away from an ideal world 😞.</p><p>As we mentioned earlier, the raw driver location that we get from the driver app via GPS/other providers mostly doesn’t lie on the road. So, we have to find a projection of the driver location on the road/route.</p><p>If you have been reading carefully, you might wonder why we can’t just use the <em><em>isLocationOnPath()</em></em> method above 🤔.</p><p>Well, if you had been reading <em><em>more</em></em> carefully, you might have noticed that this method returns a boolean explaining whether the location is on/near the route or not 🤦‍♂. It doesn’t return the projected location. (Ohh..if someone from Maps Utils stumbled upon this by chance, please add that method, good sir).</p><p>So, we had to revise some maths. Yeah, folks, learn your maths well. You never know when a situation like this might arise 🤷‍♂.</p><p><em><em>“Find the projection of point (x,y) on the line y = mx + c”.</em></em> Does that ring a bell? Drawing a perpendicular line towards the segment and calculating the location of where the line and route intersect can give us the projected location. Right?</p><p>Well, the above approach works for 2-D systems but earth is not a 2-D space. We need a way to project the spherical surface of the earth onto a rectangle 2-D space. There are several ways to do that. All of them have certain drawbacks. We might lose information like direction or the shape of landmasses/countries or the area information.</p><p><strong><strong>Mercator Projection</strong></strong></p><p>Mercator projection is one of the available methods to project the spherical map of earth onto a rectangle to make usable maps. Most of the mapping tools used for navigation use this projection.</p><p>The key feature of Mercator projection is that it retains the direction information. That means if point A is 30deg east from north of point B on the globe, it will be in the same direction on its Mercator projection. Or say there is a turn of 90deg in some lane, it will be 90deg on Mercator projection as well. That is the reason it works really well for navigation purposes.</p><p><strong><strong>How to use a Mercator projection?</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-4.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-5.png\" class=\"kg-image\"></figure><ol><li>Every point on the earth is projected on a cylinder exactly like point A which has point A’ on the cylinder.</li><li>Once all the required points/routes are projected on this cylinder. It is unrolled, and we obtain a rectangle like the one shown above.</li><li>All the planar geometry can be applied with a very little margin of error on this 2D projected map.</li><li>After processing all the points/routes they can be converted back to latitude and longitude on the globe.</li></ol><p>So, now we have the projected driver location on the route which we will fondly call <code>snapped point</code> going forward.</p><h3 id=\"3-3-end-to-end-animation\">3.3: End-to-End animation</h3><p>The new driver location that we receive can be present in <strong><strong>any</strong></strong> segment. It may be that it is in the same segment or it may be that it is on the next segment or on the next one or it may be that it is on the last segment.</p><p>But for linear animation, we need a start point and an end point. The start point is the current position of the driver marker. We already got the snapped endpoint in the earlier section. But we can’t just animate from start to end <strong><strong>at once</strong></strong> as that would seem like the car is flying and ignoring U-turns, routes, etc. So, how do we prevent it from flying?</p><p>What do you do when you can’t fly to a place? You follow the road. Right? That’s what we have to do as well. Make the driver marker follow the route/road. We need to animate along each segment in the route until we reach the segment which has the driver position that we received.</p><p>There are again two cases here 😜:</p><h3 id=\"3-3-1-the-new-driver-location-is-on-the-same-segment\">3.3.1: The new driver location is on the same segment</h3><p>In this case, we can directly animate from the current position of driver marker to the driver location that we received since this is just a straight line animation.</p><p>A segment is always a straight line. We will discuss more on how to do the animation b/w 2 points in a later section.</p><h3 id=\"3-3-2-the-new-driver-location-is-on-a-different-segment\">3.3.2: The new driver location is on a different segment</h3><p>In this case, we need to animate to that segment along the route. We have to animate along each of the segments in between to reach the final segment.</p><p>For animation along the first segment, we set the endpoint of the animation to the beginning of the next segment in the route. We animate to the end of the first segment.</p><p>The next segment may also not have the driver location that we received. After a driver has traversed the first segment, we move the end location of the animation to the end of the next segment, and so on and so forth till we reach the last segment. Confusing, ya? Let’s see an example.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/Screenshot-2020-05-23-at-10.06.55-PM.png\" class=\"kg-image\"><figcaption>So much zig-zag (huh!!)</figcaption></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received.</p><p>In the 1st animation, we move the driver marker from A to the end of the first segment (B).</p><p>In the 2nd animation, the driver marker is moved through the entire length of the 2nd segment.</p><p>And so on and so forth till we reach the segment which has the newly received snapped location (X).</p><h2 id=\"animation-in-a-segment\">Animation in a segment</h2><p>We now know how the overall animation would look like. But we also need to configure how the smallest unit of the animation i.e animation in a segment should happen.</p><p><strong><strong>Start point and End point</strong></strong>: For case #1 above, the animation in a segment will happen just once. For case #2 above, this animation in a segment will happen multiple times. Start and endpoints will be determined before beginning each of the animations.</p><p><strong><strong>Bearing b/w these two points</strong></strong>: Bearing can be calculated using another one of Geometry/Maps Utils method.</p><p><code>SphericalUtil.computeHeading(startPosition, endPosition)</code></p><p><strong><strong>Duration of animation: </strong></strong>Calculating duration is a bit tricky. And the duration is the most important thing in any animation. Sometimes the difference b/w a smooth and a choppy animation is caused by the duration. It was very important that we got it right. So, let’s take a break and see how to calculate the duration.</p><h2 id=\"what-is-duration\">What is Duration?</h2><p>It’s the amount of time for which the animation should happen. But you already know that. Going back to middle school maths (yeah, that far), how do you calculate time? Time is nothing but distance divided by speed. Correct? Calculating straight line distance b/w the two points we want to animate through is pretty easy.</p><p><code>SphericalUtil.computeDistanceBetween(startLocation, endLocation)</code></p><p>Cool, cool. But what about speed? How should we calculate speed?</p><h2 id=\"speed-calculation\">Speed calculation</h2><p><code>FusedLocationProvider</code> API in the driver app does provide the speed of the vehicle but it’s highly unreliable. So, we have to employ some tricks to calculate the speed.</p><p>Speed is distance divided by time. Distance again!! Seems like we are running in circles 😵. Not exactly. Here the distance is not the straight line distance b/w the two points that we have to animate through.</p><p>This is the total distance along the route <strong><strong>from</strong></strong> the segment that the old driver location is currently located at, <strong><strong>to</strong></strong> the segment where the new driver location is. Yeah, that statement is a bit confusing. So, let’s take an example.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-8.png\" class=\"kg-image\"></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received. To calculate the distance, we do the obvious:</p><p><code>Total distance = d1 + d2 + d3 + d4</code></p><p>Now, we have the distance. We need the time interval.</p><p>The <code>FusedLocationProvider</code> API in the driver app does provide us the timestamp at which a location was updated. And this information is passed to our backend and subsequently to the customer app.</p><p>We calculate the time difference b/w the old driver location and the new driver location using their timestamps. Wait, how do we know the old driver location? As we had mentioned earlier, we cache the last available driver location and route in an in-memory cache.</p><p>Total route distance divided by time and now we have the speed for the entire duration. Linear distance divided by this speed and now we have the <strong><strong>duration</strong></strong>for a single animation in a segment. Cool, so let’s get back to the point where we broke off 😅.</p><h1 id=\"update-the-animation\">Update the animation</h1><p>With all the above information, we start the animation. But wait? Aren’t we missing something? We did start an animation b/w two points but how will our animator know <strong><strong>how</strong></strong> to animate?</p><p>Animation is just a bunch of frame updates that happen every fast. How do we update the marker position, the starting point of the route, the rotation in each and every frame of the animation? Well, the mobile/web framework allows us to do something every time the frame is updated.</p><p>But what is this something that we should do?</p><h2 id=\"1-update-marker-s-position\">1. Update marker’s position</h2><p>For markers, we need to update their position. Once we have the position, we can simply update the marker position using the <code>marker.setPosition()</code>. To find the position during each frame of the animation, we need the percentage of animation that has elapsed.</p><p>We can get the percentage from the Animation framework. Using this percentage and the start and end position, we calculate the intermediate position/s like this:</p><p><code>SphericalUtil.interpolate(startPosition, endPosition, fraction)</code></p><h2 id=\"2-update-routes\">2. Update Routes</h2><p>Routes need to be aligned with the marker’s movement. So, we update the routes as well using the values above and updating the polyline points of that route using the <code>polyline.setPoints()</code><em><em>.</em></em></p><p>And that’s a wrap. The result that we get is a very smooth, measured movement of the vehicle along the road.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/600/1*EtoKV1x7ufBgxOPdcsvnJg.gif\" class=\"kg-image\"></figure><p>There are a few more tips/tricks that we employ to ensure that there are no abrupt changes in the animation.</p><p>But that’s for next time. 😃</p><h3 id=\"what-s-next\">What’s next?</h3><p>We still need to go a long way to meet the standards that we have set for ourselves. Currently, this new experience is only rolled out to GoRide, GoCar, and GoBluebird. We are working on bringing the same experience to other services like GoFood, GoSend, and GoShop. Stay tuned for more!</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-9.png\" class=\"kg-image\"></figure><p>Want stories like this one beamed straight to your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p><p>Thanks to Koushik Krishna, Abhay Sood, Anup Cowkur, Sooraj Rajmohan, and Kshitij Choudhary.</p>","url":"https://gojek-ghost.zysk.in/tips-for-building-smooth-live-tracking/","canonical_url":null,"uuid":"90db33e9-3b67-4c66-a39f-7247172d3fa7","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec94e8c7aa22c4066f83db2","reading_time":13}},{"node":{"id":"Ghost__Post__5eafa30734df85001e15f489","title":"How We Pushed a Million Keys to Redis in Seconds","slug":"how-we-pushed-a-million-keys-to-redis-in-seconds","featured":false,"feature_image":"https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_gN5KGQcKSipjSlQqEppJMA.jpg","excerpt":"Dealing with a lot of keys? Redis’ Pipe Mode is your friend.\nHello there!\n\nIn this post, I’ll share my ideas on how we populated Redis (running in a\nKubernetes cluster)… in a matter of seconds.\n\nHere’s what can you expect from this post:\n\n1. How to connect to Redis server running in a Kubernetes cluster ?\n\n2. What is Port-forwarding ?\n\n3. How to use Redis mass insertion & push millions of keys in seconds ?\n\n4. How to generate Redis Protocol ?\n\n5. How to read /parse a CSV in Ruby ?\n\nWait, but why","custom_excerpt":null,"visibility":"public","created_at_pretty":"04 May, 2020","published_at_pretty":"04 May, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-05-04T10:37:19.000+05:30","published_at":"2020-05-04T10:45:13.000+05:30","updated_at":"2020-05-12T11:50:45.000+05:30","meta_title":"How We Pushed a Million Keys to Redis in Seconds","meta_description":"Dealing with a lot of keys? Redis’ Pipe Mode is your friend.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Dealing with a lot of keys? Redis’ Pipe Mode is your friend.\nHello there!\n\nIn this post, I’ll share my ideas on how we populated Redis (running in a\nKubernetes cluster)… in a matter of seconds.\n\nHere’s what can you expect from this post:\n\n1. How to connect to Redis server running in a Kubernetes cluster ?\n\n2. What is Port-forwarding ?\n\n3. How to use Redis mass insertion & push millions of keys in seconds ?\n\n4. How to generate Redis Protocol ?\n\n5. How to read /parse a CSV in Ruby ?\n\nWait, but why do I need to do this? ?\n\nAt Gojek, we use Redis in one of the services for caching drivers for faster\nlookups. Since we have deployed this service to new clusters, we needed to\npopulate Redis with ~81K keys.\n\nWhat we didn’t do (and should not be done)\nWell, this. ?\n\n$ redis-cli -h \"hostname\" -p 6379 set \"key\" \"value\"\n\nThis simple and easy way of storing a key through redis-cli\n[https://redis.io/topics/rediscli] is okay, but not for thousands or millions of\nkeys. You don’t want to end up waiting for hours unless you are Regina Phalange\n[https://en.wikipedia.org/wiki/Phoebe_Buffay#%22Regina_Phalange%22]! ?\n\nUsing a normal Redis client to perform mass insertion is not a good idea. The\nnaive approach of sending one command after the other is slow, because you have\nto pay for the round trip time for every command.\n\nLet’s do something different!\nWe will use Redis mass insertion, but before going to that, let’s talk a bit\nabout Redis Protocol [https://redis.io/topics/protocol].\n\nRedis clients communicate with the Redis server using a protocol called RESP \n(REdis Serialization Protocol).\n\nWith that said, let’s go write some code! I like toying around with Ruby\n[https://www.ruby-lang.org/en/], so this was my language of choice.\n\nredis_mass_insert.rbgen_redis_proto function will generate the protocol required for mass insertion.\n\n> 2.6.3 > puts gen_redis_proto(\"SET\",\"mykey\",\"Hello World!\").inspect\nRunning the above command in Ruby console, will give us the following protocol.\n\n\"*3\\r\\n$3\\r\\nSET\\r\\n$5\\r\\nmykey\\r\\n$12\\r\\nHello World!\\r\\n\"\n\nWell, this is how a command is represented and sent to the Redis Server through \nRedis Protocol [https://redis.io/topics/protocol].\n\n*<args><cr><lf>\n$<len><cr><lf>\n<arg0><cr><lf>\n<arg1><cr><lf>\n...\n<argN><cr><lf>\n\nWhere <cr> means \"\\r\" (or ASCII character 13) and <lf> means \"\\n\" (or ASCII\ncharacter 10).\n\nWe can now run this script, but here’s a catch. Our Redis server runs in a\nKubernetes cluster and we didn’t want to install Ruby and its gems inside a\ncluster. So now?\n\nEnter port-forwarding! ?\n$ kubectl -n \"namespace\" port-forward \"pod-name\" 7000:6379\n\nConnections made to local port 7000 are forwarded to port 6379 of the pod that\nis running the Redis server. With this connection in place we can use our local\nworkstation to debug the database that is running in the pod.\n\nFinally, we run our script to populate Redis ?\n\n> $ ruby redis_mass_insert.rb | redis-cli -p 7000 --pipe\n> All data transferred. Waiting for the last reply...\nLast reply received from server.\nerrors: 0, replies: 81003\nWe ran this script and it completed within a fraction of seconds!\n\nBut, how?\nIn 2.6 or later versions of Redis the redis-cli utility supports a new mode\ncalled pipe mode that was designed in order to perform mass insertion.\n\nUnder the hood of pipe mode\nAccording to the official doc:\n\n * redis-cli — pipe tries to send data as fast as possible to the server.\n * At the same time it reads data when available, trying to parse it.\n * Once there is no more data to read from stdin, it sends a special ECHO \n   command with a random 20 bytes string: we are sure this is the latest command\n   sent, and we are sure we can match the reply checking if we receive the same\n   20 bytes as a bulk reply.\n * Once this special final command is sent, the code receiving replies starts to\n   match replies with these 20 bytes. When the matching reply is reached it can\n   exit with success.\n\nNaice, what’s next?\nWell, I tried populating Redis locally with a million keys.\n\nIt worked like a charm, in just ~2 seconds. ?\n\nThat’s it!\nI really hope that this post gave you some new insights.\n\nThanks for reading! ?\n\nReferences\n\n 1. Redis Mass Insertion [https://redis.io/topics/mass-insert]\n 2. Redis Protocol [https://redis.io/topics/protocol]\n 3. Port Forwarding in Kubernetes to access applications\n    [https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/]\n\nWant our stories to land in your inbox? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<h3 id=\"dealing-with-a-lot-of-keys-redis-pipe-mode-is-your-friend-\">Dealing with a lot of keys? Redis’ Pipe Mode is your friend.</h3><p>Hello there!</p><p>In this post, I’ll share my ideas on how we populated Redis (running in a Kubernetes cluster)… in a matter of seconds.</p><p>Here’s what can you expect from this post:</p><p><em><em>1. How to connect to Redis server running in a Kubernetes cluster ?</em></em></p><p><em><em>2. What is Port-forwarding ?</em></em></p><p><em><em>3. How to use Redis mass insertion &amp; push millions of keys in seconds ?</em></em></p><p><em><em>4. How to generate Redis Protocol ?</em></em></p><p><em><em>5. How to read /parse a CSV in Ruby ?</em></em></p><p>Wait, but why do I need to do this? ?</p><p>At Gojek, we use Redis in one of the services for caching drivers for faster lookups. Since we have deployed this service to new clusters, we needed to populate Redis with ~81K keys.</p><h2 id=\"what-we-didn-t-do-and-should-not-be-done-\">What we didn’t do (and should not be done)</h2><p>Well, this. ?</p><p><code>$ redis-cli -h \"hostname\" -p 6379 set \"key\" \"value\"</code></p><p>This simple and easy way of storing a key through <code><a href=\"https://redis.io/topics/rediscli\" rel=\"noopener\">redis-cli</a></code> is okay, but not for thousands or millions of keys. You don’t want to end up waiting for hours unless you are <a href=\"https://en.wikipedia.org/wiki/Phoebe_Buffay#%22Regina_Phalange%22\" rel=\"noopener\">Regina Phalange</a>! ?</p><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2F5xaOcLvROln5TmaaVOM%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fgiphy.com%2Fgifs%2Fthecomebackhbo-comeback-the-val-cherish-5xaOcLvROln5TmaaVOM&amp;image=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2F5xaOcLvROln5TmaaVOM%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" allowfullscreen=\"\" frameborder=\"0\" height=\"301\" width=\"435\" title=\"Lisa Kudrow Thank You GIF by The Comeback HBO - Find &amp; Share on GIPHY\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 470.516px;\"></iframe></figure><p>Using a normal Redis client to perform mass insertion is not a good idea. The naive approach of sending one command after the other is slow, because you have to pay for the round trip time for every command.</p><h1 id=\"let-s-do-something-different-\">Let’s do something different!</h1><p>We will use Redis mass insertion, but before going to that, let’s talk a bit about <a href=\"https://redis.io/topics/protocol\" rel=\"noopener\">Redis Protocol</a>.</p><p><em><em>Redis clients communicate with the Redis server using a protocol called <strong><strong>RESP</strong></strong> (REdis Serialization Protocol).</em></em></p><p>With that said, let’s go write some code! I like toying around with <a href=\"https://www.ruby-lang.org/en/\" rel=\"noopener\">Ruby</a>, so this was my language of choice.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><iframe src=\"https://blog.gojekengineering.com/media/59319951b0d29feee60832a68f811a18\" allowfullscreen=\"\" frameborder=\"0\" height=\"364\" width=\"680\" title=\"Ruby Script for Redis Mass Insertion\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 364px;\"></iframe><figcaption>redis_mass_insert.rb</figcaption></figure><p><code>gen_redis_proto</code> function will generate the protocol required for mass insertion.</p><blockquote>2.6.3 &gt; <strong><strong>puts gen_redis_proto(\"SET\",\"mykey\",\"Hello World!\").inspect</strong></strong></blockquote><p>Running the above command in Ruby console, will give us the following protocol.</p><p><code>\"*3\\r\\n$3\\r\\nSET\\r\\n$5\\r\\nmykey\\r\\n$12\\r\\nHello World!\\r\\n\"</code></p><p>Well, this is how a command is represented and sent to the Redis Server through <a href=\"https://redis.io/topics/protocol\" rel=\"noopener\">Redis Protocol</a>.</p><p><code>*&lt;args&gt;&lt;cr&gt;&lt;lf&gt;<br>$&lt;len&gt;&lt;cr&gt;&lt;lf&gt;<br>&lt;arg0&gt;&lt;cr&gt;&lt;lf&gt;<br>&lt;arg1&gt;&lt;cr&gt;&lt;lf&gt;<br>...<br>&lt;argN&gt;&lt;cr&gt;&lt;lf&gt;</code></p><p><em><em>Where <code>&lt;cr&gt;</code> means \"\\r\" (or ASCII character 13) and <code>&lt;lf&gt;</code> means \"\\n\" (or ASCII character 10).</em></em></p><p>We can now run this script, but here’s a catch. Our Redis server runs in a Kubernetes cluster and we didn’t want to install Ruby and its gems inside a cluster. So now?</p><h1 id=\"enter-port-forwarding-\">Enter port-forwarding! ?</h1><p><strong><strong><code>$ kubectl -n \"namespace\" port-forward \"pod-name\" 7000:6379</code></strong></strong></p><p>Connections made to local port 7000 are forwarded to port 6379 of the pod that is running the Redis server. With this connection in place we can use our local workstation to debug the database that is running in the pod.</p><p><em><em><em>Finally, we run our script to populate Redis ?</em></em></em></p><blockquote><strong><strong>$ ruby redis_mass_insert.rb | redis-cli -p 7000 --pipe</strong></strong></blockquote><blockquote>All data transferred. Waiting for the last reply...<br>Last reply received from server.<br>errors: 0, replies: 81003</blockquote><p>We ran this script and it completed within a fraction of seconds!</p><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FjRARA4zqym98KmvkUy%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fgiphy.com%2Fgifs%2FjRARA4zqym98KmvkUy&amp;image=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FjRARA4zqym98KmvkUy%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" allowfullscreen=\"\" frameborder=\"0\" height=\"246\" width=\"435\" title=\"Bingo GIF - Find &amp; Share on GIPHY\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 384.547px;\"></iframe></figure><h1 id=\"but-how\">But, how?</h1><p>In 2.6 or later versions of Redis the <code>redis-cli</code> utility supports a new mode called <strong><strong>pipe mode</strong></strong> that was designed in order to perform mass insertion.</p><h2 id=\"under-the-hood-of-pipe-mode\">Under the hood of pipe mode</h2><p>According to the official doc:</p><ul><li><em><em>redis-cli — pipe tries to send data as fast as possible to the server.</em></em></li><li><em><em>At the same time it reads data when available, trying to parse it.</em></em></li><li><em><em>Once there is no more data to read from stdin, it sends a special </em></em><strong><strong><em><em>ECHO</em></em></strong></strong><em><em> command with a random 20 bytes string: we are sure this is the latest command sent, and we are sure we can match the reply checking if we receive the same 20 bytes as a bulk reply.</em></em></li><li><em><em>Once this special final command is sent, the code receiving replies starts to match replies with these 20 bytes. When the matching reply is reached it can exit with success.</em></em></li></ul><h1 id=\"naice-what-s-next\">Naice, what’s next?</h1><p>Well, I tried populating Redis locally with <em><em>a million keys.</em></em></p><p>It worked like a charm, in just ~2 seconds. ?</p><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2Fj6ZQKMy3W3629lDJSX%2Ftwitter%2Fiframe&amp;display_name=Giphy&amp;url=https%3A%2F%2Fgiphy.com%2Fgifs%2Fhbo-avenue-5-avenue5-j6ZQKMy3W3629lDJSX&amp;image=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2Fj6ZQKMy3W3629lDJSX%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy\" allowfullscreen=\"\" frameborder=\"0\" height=\"244\" width=\"435\" title=\"Hugh Laurie Charm GIF by HBO - Find &amp; Share on GIPHY\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 381.422px;\"></iframe></figure><h1 id=\"that-s-it-\">That’s it!</h1><p>I really hope that this post gave you some new insights.</p><p>Thanks for reading! ?</p><p><strong><strong>References</strong></strong></p><ol><li><a href=\"https://redis.io/topics/mass-insert\" rel=\"noopener\">Redis Mass Insertion</a></li><li><a href=\"https://redis.io/topics/protocol\" rel=\"noopener\">Redis Protocol</a></li><li><a href=\"https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/\" rel=\"noopener\">Port Forwarding in Kubernetes to access applications</a></li></ol><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/60/1*Yigf1nGxRKjzV7vIC_YkYg.png?q=20\" class=\"kg-image\"></figure><p>Want our stories to land in your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/how-we-pushed-a-million-keys-to-redis-in-seconds/","canonical_url":null,"uuid":"399d0acb-04ee-4db6-8925-35c9dd3533e5","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eafa30734df85001e15f489","reading_time":3}},{"node":{"id":"Ghost__Post__5ecb65447aa22c4066f83f64","title":"Speed Up Your Workflow With IntelliJ","slug":"speed-up-your-workflow-with-intellij","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_ygP4I6VnLARQODtQvTzheQ.jpeg","excerpt":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","custom_excerpt":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","visibility":"public","created_at_pretty":"25 May, 2020","published_at_pretty":"27 January, 2020","updated_at_pretty":"25 May, 2020","created_at":"2020-05-25T11:57:16.000+05:30","published_at":"2020-01-27T09:30:00.000+05:30","updated_at":"2020-05-25T12:07:15.000+05:30","meta_title":"Speed Up Your Workflow With IntelliJ","meta_description":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"I do the bulk of my test automation development in Kotlin/Java or Python\nlanguages. After the programming language, a very important component for the\ndev workflow is a good IDE.\n\nPurists generally rave about the use of Editors like Sublime, VSCode or even use\nof Vim/Emacs over full-fledged IDE’s like Jetbrains IntelliJ, Pycharm or\nEclipse. However, the truth is most modern devs in this day and age use/prefer\nIDE’s for the host of convenience features, speed, and flexibility they provide.\n\nPersonally, I am a big fan of IDE’s provided by Jetbrains\n[https://www.jetbrains.com/], and they are generally my tools of choice—saving\nme a ton of time while performing refactoring and greatly decreasing development\ntime.\n\n> Not convinced yet?\nIf you’ve used IntelliJ, then ppen up IntelliJ > Help > Productivity Guide and\nsee how much time it has saved you.\n\nThis is my breakdown in the past two years:\n\nHowever,\n\n * Do we really extract the maximum juice out of these tools?\n * How many of the IDE’s features do we really use on a day-to-day basis?\n\nWell, fret not. This post will share some awesome tips that you can also follow\nto become more productive with your editors. I got to know some of these\nfeatures when the prolific Dev evangelist Hadi Hariri [https://hadihariri.com/] \nfrom Jetbrains visited Gojek [https://www.gojek.io/] Bengaluru and shared these\nduring a meetup.\n\nTo demonstrate these features, I would be using appium Java client\n[https://github.com/appium/java-client] project but the same features can be\napplied in any Java/Kotlin (IntelliJ IDEA) project of your choice or Python\nproject (In Pycharm).\n\nIdeavim\nTo start with, did you know all Jetbrains editors come with a very good VIM\nsupport via IdeaVim plugin? Vim commands are amazing.\n\nOnce you get used to them, your editing and code navigation speed is easily\nmultiplied 2X and it’s so easy to use it within IntelliJ. If you want to know\nVIM basics, I wrote a post\n[https://automationhacks.blog/2018/09/23/vim-the-editor-you-need-but-not-the-one-you-deserve/] \non it some time back.\n\nTo install this plugin, either opt for it when freshly installing IntelliJ or Go\nto preferences > Plugins and search for IdeaVim in marketplace, don't worry, you\ncan always temporarily disable it and practice first before starting to use it\nin your day to day workflow.\n\nThe most common commands that you should be aware of are mentioned right when\nyou open it.\n\nI use the IntelliJ IDEA classic keybindings, however, you should be able to\nquickly find the short cuts for these operations in the binding of your choice ( \nLook into Preferences > Keymap)\n\nSearch Shortcuts\nDouble Shift brings up the search console and this is the single place to either\n\n * Search Classes or Files (Shift + Cmd + N): with certain names in your project\n   or\n * Perform any action (Shift + Cmd + A): for example, refactoring certain\n   components inside a class\n\nYou can also easily learn the keyboard shortcuts for the common operations\nwithin the editor by seeing the shortcut right beside the command on this\nscreen. Trust me, the investment in learning these has huge payoffs.\n\n> The number of times that you avoid using the trackpad or mouse is one time less \nthat you have to context switch while coding. Believe me, that makes a\ndifference.\nSearch by file initials\nWhile trying to find a file, often we just know the name vaguely by memory. In\nSearch, it is sufficient to just mention the initials of the file and IntelliJ\nwill list out all the files which match that criteria\n\nLet’s say, for example, I want to search for all test files which start with A \nand have Test suffix, I can just enter ATes and see all the file names which\nmatch this.\n\nSearch method inside a file matching a pattern\nWhat if I want to search for all methods having find keyword inside test files\nnamed AndTes?\n\nWell you just use a dot . in these search queries and you can easily search for\neven methods inside classes based on partial pattern search.\n\nIn this case, AndTest.find would show all the methods with find keyword in them.\nNeat huh?\n\nSearch for file names inside a particular folder\nIn the example below, I am searching for file names starting with KeyE under \nnativekey folder by separating them with a forward slash /\n\nnativekey/KeyE\n\nNavigating options all within the search\nIf you type a forward slash / in the search bar, you can see different IDE\nactions that you can take right there.\n\nFind usages\nYou can quickly find out usages of a given function, class, interface, etc by\nhitting Cmd + B, This saves a ton of time over manually searching for code. You\ncan either navigate right inside the result pop up or open it in dedicated\nwindow by selecting Open in find window.\n\nWhat if I want to see all the classes and methods that are present in \nAndroidTest.java class?\n\nWe can open the Structure tab (Cmd + 7) and glance at all the available methods\nwith options to even show anonymous classes/lambdas inside the class.\n\nNow, this could be very useful when you have a long class and want to see all\nthe methods and then quickly navigate to them. Too many methods might hint at a\npotential refactoring candidate.\n\nSwitcher\nTo switch between open files and open tabs\n\nUse Ctrl + Tab and then to move down continue pressing Ctrl + Tab and to move up\nin switcher use Ctrl + Shift + Tab\n\nThis is a useful way to quickly navigate among files and menu options again\nwithout using mouse or trackpad\n\nRecent files\nYou do not need to remember what files were recently opened. To view recent\nfiles accessed, execute Cmd + E\n\nNavigation bar\nHow many times have you switched the project tree using Cmd + 1 and gone one\nlevel up to open a file? Before observing this, I know I kept on doing this\nagain and again.\n\nHowever, IntelliJ has a navigation bar on top of the editor which can be used to\nvery quickly navigate up the project tree.\n\nLive templates\nIntelliJ has a bunch of templates already created which can be quickly used to\ncreate a base skeleton code for many common constructs.\n\nIt is also aware of what type of file is currently opened and can show available\noptions by opening Cmd + J, once you select the one that you are looking for,\nexpand this code using Tab key\n\nTo open these templates and maybe even add your own, open Preferences > Editor >\nLive Templates\n\nInject language reference\nIntelliJ allows us to insert the context of a particular language and allows to\nwork with it within another file. Seems confusing? Let me explain why this is a\nsuper neat feature.\n\nLet’s assume you want to store JSON string inside a Java file. Typically Java 8\ndoes not have support for multi-line string (Added in Java 12 though\n[https://dzone.com/articles/jdk-12-raw-string-literals])\n\nYou can start with a simple string variable. Press Option + Enter and select \nInject language or reference\n\nAnd then select the file type. Let’s say JSON\n\nNow that we have provided the context, You can again press Option + Enter and\nthen select Edit JSON fragment . This opens up a new window where you can create\nand edit JSON freely and the corresponding concatenated string is automagically\ninserted.\n\nValidate regex inside the editor\nRegexes are a very powerful concept to learn and use. How many times have you\nhad to write small scratch files (or use regex sites [https://regexr.com/]) with\nbelow snippet to test whether a given string matches a regex?\n\nI have personally done this many times.\n\nclass Scratch {\npublic static void main(String[] args) {\nString regex = \"\\w+ world!\";\nString testString = \"Hello world!\";\nSystem.out.println(testString.matches(regex));\n}\n}\n\nIntelliJ makes this even easier. Given a regex, enter Option + Enter and select \nCheck RegExp\n\nEnter test strings and IntelliJ would automatically test whether the sample\nstring is a match or not. Neat right?\n\nDrop frames while debugging\nWhile developing it’s very important to be good at debugging. IntelliJ allows a\nvery rich set of inspection features to know the state of variables/classes at a\ngiven point in the code.\n\nIn this below example, we have a simple fooBar() method which is a wrapper over \nfoo and bar methods where foo has a debug point.\n\nWhat if we want to move a step back from the current frame? It turns out we can\nselect the current frame and select Drop frame and that would move the debug\nflow back to foo method.\n\nIt’s amazing how much time this saves since we do not need to rewire the\ndebugging session from scratch.\n\nHopefully, this post encouraged you to also explore the feature-rich IDEs that\nJetbrains provides, and give your automation development a literal nitro boost.\n(NFS reference anyone? 😋)\n\nWhat other IDE tricks have been lifesavers for you? Let me know in the comments.\nIf you found this useful, do share it with a friend or colleague.\n\nFor more such stories sent to your inbox once a week, sign up for our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\ngojek.jobs [http://bit.ly/2UcJEI0]","html":"<p>I do the bulk of my test automation development in Kotlin/Java or Python languages. After the programming language, a very important component for the dev workflow is a good IDE.</p><p>Purists generally rave about the use of Editors like Sublime, VSCode or even use of Vim/Emacs over full-fledged IDE’s like Jetbrains IntelliJ, Pycharm or Eclipse. However, the truth is most modern devs in this day and age use/prefer IDE’s for the host of convenience features, speed, and flexibility they provide.</p><p>Personally, I am a big fan of IDE’s provided by <a href=\"https://www.jetbrains.com/\" rel=\"noopener\">Jetbrains</a>, and they are generally my tools of choice—saving me a ton of time while performing refactoring and greatly decreasing development time.</p><blockquote><em><em>Not convinced yet?</em></em></blockquote><p>If you’ve used IntelliJ, then ppen up <code>IntelliJ &gt; Help &gt; Productivity Guide</code> and see how much time it has saved you.</p><p>This is my breakdown in the past two years:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_mRHQ5HihrnXqU7bh.png\" class=\"kg-image\"></figure><p>However,</p><ul><li>Do we really extract the maximum juice out of these tools?</li><li>How many of the IDE’s features do we really use on a day-to-day basis?</li></ul><p>Well, fret not. This post will share some awesome tips that you can also follow to become more productive with your editors. I got to know some of these features when the prolific Dev evangelist <a href=\"https://hadihariri.com/\" rel=\"noopener\">Hadi Hariri</a> from Jetbrains visited <a href=\"https://www.gojek.io/\" rel=\"noopener\">Gojek</a> Bengaluru and shared these during a meetup.</p><p>To demonstrate these features, I would be using appium <a href=\"https://github.com/appium/java-client\" rel=\"noopener\">Java client</a> project but the same features can be applied in any <strong><strong>Java/Kotlin (IntelliJ IDEA)</strong></strong> project of your choice or <strong><strong>Python project (In Pycharm).</strong></strong></p><h3 id=\"ideavim\">Ideavim</h3><p>To start with, did you know all Jetbrains editors come with a very good VIM support via IdeaVim plugin? Vim commands are amazing.</p><p>Once you get used to them, your editing and code navigation speed is easily multiplied 2X and it’s so easy to use it within IntelliJ. If you want to know VIM basics, I wrote a <a href=\"https://automationhacks.blog/2018/09/23/vim-the-editor-you-need-but-not-the-one-you-deserve/\" rel=\"noopener\">post</a> on it some time back.</p><p>To install this plugin, either opt for it when freshly installing IntelliJ or <code>Go to preferences &gt; Plugins and search for IdeaVim in marketplace</code>, don't worry, you can always temporarily disable it and practice first before starting to use it in your day to day workflow.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_mMdadKP3FjJ2Jj9c.png\" class=\"kg-image\"></figure><p>The most common commands that you should be aware of are mentioned right when you open it.</p><p>I use the IntelliJ IDEA classic keybindings, however, you should be able to quickly find the short cuts for these operations in the binding of your choice ( <code>Look into Preferences &gt; Keymap</code>)</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_2xCQI_tMRl7RQpAv.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_dndhilLo2bXVYO_D.png\" class=\"kg-image\"></figure><h3 id=\"search-shortcuts\">Search Shortcuts</h3><p>Double Shift brings up the search console and this is the single place to either</p><ul><li>Search Classes or Files <strong><strong>(Shift + Cmd + N):</strong></strong> with certain names in your project or</li><li>Perform any action <strong><strong>(Shift + Cmd + A):</strong></strong> for example, refactoring certain components inside a class</li></ul><p>You can also easily learn the keyboard shortcuts for the common operations within the editor by seeing the shortcut right beside the command on this screen. Trust me, the investment in learning these has huge payoffs.</p><blockquote><em><em><em>The number of times that you avoid using the trackpad or mouse is </em><strong><strong><em>one time less</em></strong></strong><em> that you have to context switch while coding. Believe me, that makes a difference.</em></em></em></blockquote><h3 id=\"search-by-file-initials\">Search by file initials</h3><p>While trying to find a file, often we just know the name vaguely by memory. In Search, it is sufficient to just mention the initials of the file and IntelliJ will list out all the files which match that criteria</p><p>Let’s say, for example, I want to search for all test files which start with <code>A</code> and have Test suffix, I can just enter <code>ATes</code> and see all the file names which match this.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0__Q-aR5Yl8g_PYSvr.png\" class=\"kg-image\"></figure><h3 id=\"search-method-inside-a-file-matching-a-pattern\">Search method inside a file matching a pattern</h3><p>What if I want to search for all methods having <code>find</code> keyword inside test files named <code>AndTes</code>?</p><p>Well you just use a <code>dot .</code> in these search queries and you can easily search for even methods inside classes based on partial pattern search.</p><p>In this case, <code>AndTest.find</code> would show all the methods with <code>find</code> keyword in them. Neat huh?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_-tEBZAYAl_oD6DHS.png\" class=\"kg-image\"></figure><h3 id=\"search-for-file-names-inside-a-particular-folder\">Search for file names inside a particular folder</h3><p>In the example below, I am searching for file names starting with <code>KeyE</code> under <code>nativekey</code> folder by separating them with a forward slash <code>/</code></p><p><code>nativekey/KeyE</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_IW8jxxtq6cyfMpSC.png\" class=\"kg-image\"></figure><h3 id=\"navigating-options-all-within-the-search\">Navigating options all within the search</h3><p>If you type a forward slash <code>/</code> in the search bar, you can see different IDE actions that you can take right there.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_9tsFLNRrv1Y3lTjt.png\" class=\"kg-image\"></figure><h3 id=\"find-usages\">Find usages</h3><p>You can quickly find out usages of a given function, class, interface, etc by hitting <code>Cmd + B</code>, This saves a ton of time over manually searching for code. You can either navigate right inside the result pop up or open it in dedicated window by selecting <code>Open in find window</code>.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_CJOyIsf7nGojY9Lg.png\" class=\"kg-image\"></figure><p>What if I want to see all the classes and methods that are present in <code>AndroidTest.java</code> class?</p><p>We can open the <strong><strong>Structure</strong></strong> tab <strong><strong>(Cmd + 7)</strong></strong> and glance at all the available methods with options to even show <strong><strong>anonymous classes/lambdas</strong></strong> inside the class.</p><p>Now, this could be very useful when you have a long class and want to see all the methods and then quickly navigate to them. Too many methods might hint at a potential refactoring candidate.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_RH_TICWZf2VTasMN.png\" class=\"kg-image\"></figure><h3 id=\"switcher\">Switcher</h3><p>To switch between open files and open tabs</p><p>Use <code>Ctrl + Tab</code> and then to move down continue pressing <code>Ctrl + Tab</code> and to move up in switcher use <code>Ctrl + Shift + Tab</code></p><p>This is a useful way to quickly navigate among files and menu options again without using mouse or trackpad</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_u1OO-wpwoKH39BQs.png\" class=\"kg-image\"></figure><h3 id=\"recent-files\">Recent files</h3><p>You do not need to remember what files were recently opened. To view recent files accessed, execute <code>Cmd + E</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_ZaMfMJ8LsxnnQk7F.png\" class=\"kg-image\"></figure><h3 id=\"navigation-bar\">Navigation bar</h3><p>How many times have you switched the project tree using <code>Cmd + 1</code> and gone one level up to open a file? Before observing this, I know I kept on doing this again and again.</p><p>However, IntelliJ has a navigation bar on top of the editor which can be used to very quickly navigate up the project tree.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_ZCHnmBhFtgljalI2.png\" class=\"kg-image\"></figure><h3 id=\"live-templates\">Live templates</h3><p>IntelliJ has a bunch of templates already created which can be quickly used to create a base skeleton code for many common constructs.</p><p>It is also aware of what type of file is currently opened and can show available options by opening <code>Cmd + J</code>, once you select the one that you are looking for, expand this code using <code>Tab</code> key</p><p>To open these templates and maybe even add your own, open <code>Preferences &gt; Editor &gt; Live Templates</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_lgWhZ-WL3zco-U5W.png\" class=\"kg-image\"></figure><h3 id=\"inject-language-reference\">Inject language reference</h3><p>IntelliJ allows us to insert the context of a particular language and allows to work with it within another file. Seems confusing? Let me explain why this is a super neat feature.</p><p>Let’s assume you want to store JSON string inside a Java file. Typically Java 8 does not have support for multi-line string (Added in <a href=\"https://dzone.com/articles/jdk-12-raw-string-literals\" rel=\"noopener\">Java 12 though</a>)</p><p>You can start with a simple string variable. Press <code>Option + Enter</code> and select <code>Inject language or reference</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_-aSyY4KPrz8ZJ0rS.png\" class=\"kg-image\"></figure><p>And then select the file type. Let’s say JSON</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_jHjlLhAkzjtluqcG.png\" class=\"kg-image\"></figure><p>Now that we have provided the context, You can again press <code>Option + Enter</code> and then select <code>Edit JSON fragment</code> . This opens up a new window where you can create and edit JSON freely and the corresponding concatenated string is automagically inserted.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_beIcluwz5QOnPmVu.png\" class=\"kg-image\"></figure><h3 id=\"validate-regex-inside-the-editor\">Validate regex inside the editor</h3><p>Regexes are a very powerful concept to learn and use. How many times have you had to write small scratch files (or use <a href=\"https://regexr.com/\" rel=\"noopener\">regex sites</a>) with below snippet to test whether a given string matches a regex?</p><p>I have personally done this many times.</p><!--kg-card-begin: markdown--><p>class Scratch {<br>\npublic static void main(String[] args) {<br>\nString regex = &quot;\\w+ world!&quot;;<br>\nString testString = &quot;Hello world!&quot;;<br>\nSystem.out.println(testString.matches(regex));<br>\n}<br>\n}</p>\n<!--kg-card-end: markdown--><p>IntelliJ makes this even easier. Given a regex, enter <code>Option + Enter</code> and select <strong><strong>Check RegExp</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_0NBq6qgPT14_zYIn.png\" class=\"kg-image\"></figure><p>Enter test strings and IntelliJ would automatically test whether the sample string is a match or not. Neat right?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_PPZYME7bt4PGZtrR.png\" class=\"kg-image\"></figure><h3 id=\"drop-frames-while-debugging\">Drop frames while debugging</h3><p>While developing it’s very important to be good at debugging. IntelliJ allows a very rich set of inspection features to know the state of variables/classes at a given point in the code.</p><p>In this below example, we have a simple <code>fooBar()</code> method which is a wrapper over <code>foo</code> and <code>bar</code> methods where <code>foo</code> has a debug point.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_P7eZVtk2sSDPiUFD.png\" class=\"kg-image\"></figure><p>What if we want to move a step back from the current frame? It turns out we can select the current frame and select <code>Drop frame</code> and that would move the debug flow back to <code>foo</code> method.</p><p>It’s amazing how much time this saves since we do not need to rewire the debugging session from scratch.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_DdZ775opHOP0z_uL.png\" class=\"kg-image\"></figure><p>Hopefully, this post encouraged you to also explore the feature-rich IDEs that Jetbrains provides, and give your automation development a literal nitro boost. (NFS reference anyone? 😋)</p><p>What other IDE tricks have been lifesavers for you? Let me know in the comments. If you found this useful, do share it with a friend or colleague.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-3.png\" class=\"kg-image\"></figure><p>For more such stories sent to your inbox once a week, <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">sign up for our newsletter!</a></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA-2.jpeg\" class=\"kg-image\" alt=\"gojek.jobs\"><figcaption><a href=\"http://bit.ly/2UcJEI0\">gojek.jobs</a></figcaption></figure>","url":"https://gojek-ghost.zysk.in/speed-up-your-workflow-with-intellij/","canonical_url":null,"uuid":"c97cb86d-8608-410e-9740-e4e613b1c3bf","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ecb65447aa22c4066f83f64","reading_time":7}},{"node":{"id":"Ghost__Post__5eb12eb3f7c7da001effce0b","title":"How We Supercharged Chat","slug":"how-we-supercharged-chat","featured":false,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_tuDgHHPUouXxzsK4OEzPaw.jpg","excerpt":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","custom_excerpt":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"10 January, 2020","updated_at_pretty":"18 May, 2020","created_at":"2020-05-05T14:45:31.000+05:30","published_at":"2020-01-10T09:30:00.000+05:30","updated_at":"2020-05-18T20:45:50.000+05:30","meta_title":null,"meta_description":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Benzi Ahamed\n\nThe Gojek consumer app comes with a chat feature. This allows users to have\nconversations with:\n\n * The currently assigned driver partner in relation to a booking.\n * Other Gojek users, provided they are known contacts in your address book.\n   These can be either personal or group chats.\n\nIn order to use the chat platform as springboard to other services within\nGojek’s vast ecosystem, we wanted to expose some features that integrate with\nour other offerings — within the convenience of a chat window.\n\nOne of the first service options we wanted to focus on was payments — paying and\nrequesting for money between individuals and groups. Chat had the platform to\ncreate connections between people, GoPay had payments — it was time to marry the\ntwo.\n\nArchitecture\nTo start with, as a chat platform team, we did not really know anything about\nthe payments domain. In fact, most of the integrations we planned for required\ncollaborating with other product teams within Gojek.\n\nWe decided early on that we needed a plugin-based framework that other product\nteams (and even chat team’s core services) could use. We also decided that the\nAPI surface area for this new framework should have as much as possible in\ncommon between the Android and iOS implementations.\n\nThe first use case we focused on was integrating payment options within chat —\nwhich would help us kickstart our design and feature rollout.\n\nApproach\nIn the vein of keeping things as simple as possible, we came up with the\nfollowing set of guidelines:\n\n * The chat subsystem can expose add-on features to the user\n * These features will not be part of the core chat offering, but can be\n   plugged-in externally\n * These plugin-based entities — chat extensions — can have mainly two\n   capabilities\n * Display a button (widget) in a chat window to trigger the chat extension’s\n   functionality\n * Display chat extension messages that can support rich text, images,\n   call-to-actions\n\nChat extension messages are merely text messages with additional metadata. While\nplain text-based messages are rendered by the core chat rendering system, chat\nextension messages need to be rendered by the chat extension that created the\nmessage.\n\nChat Extension Framework — Key ActorsThe illustration above depicts the final\nframework components we came up with.\n\n * Chat Extension Providers are responsible for vending Chat Extensions based on\n   the active Chat Session (there might be cases where we want to enable a\n   certain feature only for certain types of chats e.g. those between our\n   drivers and customers).\n * Chat Extensions are the components responsible for vending trigger points (\n   Widget Views) and custom message views (Extension Message Views).\n\nWhile the core subsystem takes care of managing life cycles of the chat\nextensions, widgets, and message views, it is the responsibility of extension\nauthors to purely focus on the implementation details of their feature.\n\nWith the above design in place, we were ready to start collaborating and start\nimplementing features.\n\nLet’s take a look at some integrations we were able to build collaboratively.\n\nSample Integrations\nPayments\nThe first integration we did was Request and Pay flows. Utilising GoPay,\ncustomers can make payments and request for money from friends.\n\nHere’s the Request Flow in action, within a personal chat:\n\nRequest Money from an IndividualIn a group chat, Request Flow translates to a\nSplit Bill flow:\n\nRequest Money in a GroupHere’s the Pay flow in action:\n\nPay via GoPay, continue conversation in ChatIn the Pay Flow, we start with\nmaking a payment from the home-screen of the Gojek App. Once a payment is done,\nyou have an option to continue to chat with the person you made the payment to.\nThis flow is of course in addition to similar flows for Request where you can\ntrigger a payment within chat itself.\n\nThe payments team were able to create a UX flow that could be triggered either\nfrom the home screen or the chat window.\n\nRestaurant Sharing\nNext up, our GoFood team wanted to explore sharing restaurant information via\nchat. Since we already had support for extensions at this point in time, we\ncreated a generic Share Via Chat flow that supports sharing simple text messages\nor custom extension message content.\n\nIn the Pay Flow, we start with making a payment from the home-screen of the\nGojek App. Once a payment is done, you have an option to continue to chat with\nthe person you made the payment to. This flow is of course in addition to\nsimilar flows for Request where you can trigger a payment within chat itself.\n\nThe payments team were able to create a UX flow that could be triggered either\nfrom the home screen or the chat window.\n\nRestaurant Sharing\nNext up, our GoFood team wanted to explore sharing restaurant information via\nchat. Since we already had support for extensions at this point in time, we\ncreated a generic Share Via Chat flow that supports sharing simple text messages\nor custom extension message content.\n\n\nShare Restaurant Details via ChatWhat’s interesting is that once a Restaurant\nCard has been shared via chat, a recipient clicking on that card can proceed to\nmake a food order, directly from the chat window itself. This is made possible\nby the fact that Extension Message Views can be fully interactive (e.g. detect\nuser taps), and the chat window provides contextual navigation controls to them.\n\nImage Sharing\nLastly, let us take a look at the most recent feature we rolled out to\nproduction — image sharing in our customer-driver chats.\n\nImage Sharing via ChatDuring the implementation of this feature, we recognised\nthat image sharing would be better triggered from the chat window if there was a\ndirect shortcut button (e.g. a camera icon) within the bottom text input area of\nthe chat window.\n\nThis leads us to enhance our extension framework to allow Chat Extensions to\nprovide Chat Extension Shortcuts as well. Our updated framework looks like\nbelow:\n\nLessons Learned\nIt has been a great journey so far exploring various kinds of integrations in a\nsimple chat window. We have a lot more planned, but in the meanwhile, here are a\nfew key things we learned along the way\n\n * When you are developing a platform, evangelising what your platform provides\n   is key. This is equally relevant if you are a platform-product company, or a\n   platform team within a company. We conducted an internal chat extension\n   hackathon which helped broaden our outreach, and saw some pretty cool ideas\n   implemented including Live Location Sharing, Booking Sharing, Games, Sticker\n   Packs etc.\n * Document your public API! Teams are more willing to collaborate if you have\n   proper, up-to-date documentation in place. We created detailed technical\n   documents, integration guides, and even provided a sample chat extension (a\n   starter-pack, if you will) — these greatly helped teams adopting these new\n   features. Also, the feedback we got during the internal hackathon fed\n   directly back into improving our documentation.\n * Having a common design language helped our Android and iOS engineers to\n   collaborate more closely. It was easier for the team to work on implementing\n   the feature by focussing on the common characteristics during tech\n   discussion, design ratification sessions etc. and leaving the nuances of each\n   platform to respective teams during development. Having a common language\n   that engineers can speak (irrespective of their specialisations) improves\n   cross-communications and collaboration.\n * It is important to design solutions exercising self-imposed constraints.\n   These constraints should directly limit the engineering scope of the\n   solution. As engineers, we are all too comfortable going down the technical\n   analysis rabbit-hole in our pursuit of coming up with a well rounded, albeit\n   (possibly) over-engineered solution. This usually ends up in complicated\n   designs, which translate into complicated code. It is better to design\n   simpler systems and iteratively add smaller features, where each iteration\n   cycle should also incorporate refactoring every step of the way. Even though\n   we knew having something like Extension Shortcuts was nice to have from the\n   get go, we had to exercise restraint and only implemented the feature when it\n   was actually required.\n * We cannot stress this enough, but continuous refactoring (whenever required)\n   is one surefire way to reduce the build-up of tech debt in any codebase.\n   Improve a function here, rename a variable there, refactor a class into two —\n   every little bit helps. It is the responsibility of the entire team to be\n   engaged in this exercise.\n\nSo there you have it, a quick look at the way the core chat team developed a\nbase extension framework that is currently being used to build richer\nintegrations into chat.\n\n\n--------------------------------------------------------------------------------\n\nWant more where that come from? Have our updates delivered straight to your\ninbox by signing up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Benzi Ahamed</p><p>The Gojek consumer app comes with a chat feature. This allows users to have conversations with:</p><ul><li>The currently assigned driver partner in relation to a booking.</li><li>Other Gojek users, provided they are known contacts in your address book. These can be either personal or group chats.</li></ul><p>In order to use the chat platform as springboard to other services within Gojek’s vast ecosystem, we wanted to expose some features that integrate with our other offerings — within the convenience of a chat window.</p><p>One of the first service options we wanted to focus on was payments — paying and requesting for money between individuals and groups. Chat had the platform to create connections between people, GoPay had payments — it was time to marry the two.</p><h1 id=\"architecture\">Architecture</h1><p>To start with, as a chat platform team, we did not really know anything about the payments domain. In fact, most of the integrations we planned for required collaborating with other product teams within Gojek.</p><p>We decided early on that we needed a plugin-based framework that other product teams (and even chat team’s core services) could use. We also decided that the API surface area for this new framework should have as much as possible in common between the Android and iOS implementations.</p><p>The first use case we focused on was integrating payment options within chat — which would help us kickstart our design and feature rollout.</p><h2 id=\"approach\">Approach</h2><p>In the vein of keeping things as simple as possible, we came up with the following set of guidelines:</p><ul><li>The chat subsystem can expose add-on features to the user</li><li>These features will not be part of the core chat offering, but can be plugged-in externally</li><li>These plugin-based entities — chat extensions — can have mainly two capabilities</li><li>Display a button (widget) in a chat window to trigger the chat extension’s functionality</li><li>Display chat extension messages that can support rich text, images, call-to-actions</li></ul><p>Chat extension messages are merely text messages with additional metadata. While plain text-based messages are rendered by the core chat rendering system, chat extension messages need to be rendered by the chat extension that created the message.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1980/1*yZbylgYQ7Q7jaF8cooEpeQ.png\" class=\"kg-image\"><figcaption>Chat Extension Framework — Key Actors</figcaption></figure><p>The illustration above depicts the final framework components we came up with.</p><ul><li><strong><strong>Chat Extension Providers</strong></strong> are responsible for vending <strong><strong>Chat Extension</strong></strong>s based on the active <strong><strong>Chat Session</strong></strong> (there might be cases where we want to enable a certain feature only for certain types of chats e.g. those between our drivers and customers).</li><li><strong><strong>Chat Extensions</strong></strong> are the components responsible for vending trigger points (<strong><strong>Widget Views</strong></strong>) and custom message views (<strong><strong>Extension Message Views</strong></strong>).</li></ul><p>While the core subsystem takes care of managing life cycles of the chat extensions, widgets, and message views, it is the responsibility of extension authors to purely focus on the implementation details of their feature.</p><p>With the above design in place, we were ready to start collaborating and start implementing features.</p><p>Let’s take a look at some integrations we were able to build collaboratively.</p><h1 id=\"sample-integrations\">Sample Integrations</h1><h2 id=\"payments\">Payments</h2><p>The first integration we did was Request and Pay flows. Utilising GoPay, customers can make payments and request for money from friends.</p><p>Here’s the Request Flow in action, within a personal chat:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*2mJZ8btzdO7bVq5rXtwvoQ.gif\" class=\"kg-image\"><figcaption>Request Money from an Individual</figcaption></figure><p>In a group chat, Request Flow translates to a Split Bill flow:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/402/1*OHgw8oUSuN6n1d8sjWCw7A.gif\" class=\"kg-image\"><figcaption>Request Money in a Group</figcaption></figure><p>Here’s the Pay flow in action:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*6z12Pjg1Vgy8Y-0P1jFPSw.gif\" class=\"kg-image\"><figcaption>Pay via GoPay, continue conversation in Chat</figcaption></figure><p>In the Pay Flow, we start with making a payment from the home-screen of the Gojek App. Once a payment is done, you have an option to continue to chat with the person you made the payment to. This flow is of course in addition to similar flows for Request where you can trigger a payment within chat itself.</p><p>The payments team were able to create a UX flow that could be triggered either from the home screen or the chat window.</p><h2 id=\"restaurant-sharing\">Restaurant Sharing</h2><p>Next up, our GoFood team wanted to explore sharing restaurant information via chat. Since we already had support for extensions at this point in time, we created a generic Share Via Chat flow that supports sharing simple text messages or custom extension message content.</p><p>In the Pay Flow, we start with making a payment from the home-screen of the Gojek App. Once a payment is done, you have an option to continue to chat with the person you made the payment to. This flow is of course in addition to similar flows for Request where you can trigger a payment within chat itself.</p><p>The payments team were able to create a UX flow that could be triggered either from the home screen or the chat window.</p><h2 id=\"restaurant-sharing-1\">Restaurant Sharing</h2><p>Next up, our GoFood team wanted to explore sharing restaurant information via chat. Since we already had support for extensions at this point in time, we created a generic Share Via Chat flow that supports sharing simple text messages or custom extension message content.<br></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*iMz_DNDwFwiCM4aiMRilAg.gif\" class=\"kg-image\"><figcaption>Share Restaurant Details via Chat</figcaption></figure><p>What’s interesting is that once a Restaurant Card has been shared via chat, a recipient clicking on that card can proceed to make a food order, directly from the chat window itself. This is made possible by the fact that Extension Message Views can be fully interactive (e.g. detect user taps), and the chat window provides contextual navigation controls to them.</p><h2 id=\"image-sharing\">Image Sharing</h2><p>Lastly, let us take a look at the most recent feature we rolled out to production — image sharing in our customer-driver chats.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/600/1*uFGU-NAQrIM2L4USdNLuWA.gif\" class=\"kg-image\"><figcaption>Image Sharing via Chat</figcaption></figure><p>During the implementation of this feature, we recognised that image sharing would be better triggered from the chat window if there was a direct shortcut button (e.g. a camera icon) within the bottom text input area of the chat window.</p><p>This leads us to enhance our extension framework to allow Chat Extensions to provide Chat Extension Shortcuts as well. Our updated framework looks like below:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/2140/1*BDMz2IPpUJcX3M80qI_7bw.png\" class=\"kg-image\"></figure><h1 id=\"lessons-learned\">Lessons Learned</h1><p>It has been a great journey so far exploring various kinds of integrations in a simple chat window. We have a lot more planned, but in the meanwhile, here are a few key things we learned along the way</p><ul><li>When you are developing a platform, evangelising what your platform provides is key. This is equally relevant if you are a platform-product company, or a platform team within a company. We conducted an internal chat extension hackathon which helped broaden our outreach, and saw some pretty cool ideas implemented including Live Location Sharing, Booking Sharing, Games, Sticker Packs etc.</li><li>Document your public API! Teams are more willing to collaborate if you have proper, up-to-date documentation in place. We created detailed technical documents, integration guides, and even provided a sample chat extension (a starter-pack, if you will) — these greatly helped teams adopting these new features. Also, the feedback we got during the internal hackathon fed directly back into improving our documentation.</li><li>Having a common design language helped our Android and iOS engineers to collaborate more closely. It was easier for the team to work on implementing the feature by focussing on the common characteristics during tech discussion, design ratification sessions etc. and leaving the nuances of each platform to respective teams during development. Having a common language that engineers can speak (irrespective of their specialisations) improves cross-communications and collaboration.</li><li>It is important to design solutions exercising self-imposed constraints. These constraints should directly limit the engineering scope of the solution. As engineers, we are all too comfortable going down the technical analysis rabbit-hole in our pursuit of coming up with a well rounded, albeit (possibly) over-engineered solution. This usually ends up in complicated designs, which translate into complicated code. It is better to design simpler systems and iteratively add smaller features, where each iteration cycle should also incorporate refactoring every step of the way. Even though we knew having something like Extension Shortcuts was nice to have from the get go, we had to exercise restraint and only implemented the feature when it was actually required.</li><li>We cannot stress this enough, but <em><em>continuous refactoring</em></em> (whenever required) is one surefire way to reduce the build-up of tech debt in any codebase. Improve a function here, rename a variable there, refactor a class into two — every little bit helps. It is the responsibility of the entire team to be engaged in this exercise.</li></ul><p>So there you have it, a quick look at the way the core chat team developed a base extension framework that is currently being used to build richer integrations into chat.</p><hr><p>Want more where that come from? Have our updates delivered straight to your inbox by <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">signing up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/how-we-supercharged-chat/","canonical_url":null,"uuid":"a5657369-e813-44f1-af8d-aa2e306bfafd","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb12eb3f7c7da001effce0b","reading_time":6}}]},"dataFeaturedPost":{"edges":[]},"dataPosts":{"edges":[{"node":{"id":"Ghost__Post__5ec2ca217aa22c4066f83b64","title":"How Gojek Uses NLP to Name Pickup Locations at Scale","slug":"how-gojek-uses-nlp-to-name-pickup-locations-at-scale","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_dFalBje-vQCkEY8Zrq9P5g--1-.jpeg","excerpt":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","custom_excerpt":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"01 May, 2020","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T23:17:13.000+05:30","published_at":"2020-05-01T09:30:00.000+05:30","updated_at":"2020-05-18T23:22:43.000+05:30","meta_title":null,"meta_description":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Li Xiaohong\n\nWhen our customers want to use our ride hailing products like GoRide and GoCar,\nthey are presented with convenient, clearly named pickup points nearby. Here’s\nan example:\n\nThis saves customers the hassle of calling the driver partner, explaining where\nthey are, what colour clothes they are wearing, and so on. Our pickup points are\ndesigned to make lives easier for both customers and driver partners.\n\nThis is possible because the pickup points shown on the app are popular pickup\nlocations around the area. What’s more, the pickup point names are displayed\nexactly how customers driver partners usually refer to them.\n\nBut how do we manage to name so many pickup points accurately, and at scale?\n\nWe use past booking locations and their associated chat logs to discover named\npickup points. As our previous research has explained, we first perform \nclustering\n[https://blog.gojekengineering.com/fantastic-drivers-and-how-to-find-them-a88239ef3b29] \non historical bookings to form potential pickup points, then we use a language\nmodel\n[https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03] \nto select the best name. Here, we explain how we improved upon the previous\nstatistical language model with a state-of-the-art NLP model, which makes the\nentire naming exercise fully scalable. This is the magic behind all the pickup\npoints seen on the Gojek app.\n\nHow can we learn better?\nAs explained in our previous post, our original statistical language model\nselects the best pickup point name from the most probable n-grams extracted from\nbookings text. However, such a statistical language model doesn’t ‘understand’\nthe meaning of the texts, it simply chooses phrases with high frequencies\nwithout knowing the semantics. Sometimes it throws street names, sometimes even\ncommon phrases with no information about location. We have to manually check\neverything to make sure it reflects the right POI, before it appears on the app.\n\nThis creates a challenge — especially if we want to quickly expand the\nfrictionless pickup experience to customers across in new geographies. Hence, we\ndecided to go a step further with a deep-learning NLP model that ‘understands’\nand ‘learns’ to differentiate what is a valid pickup point name.\n\n> At Gojek, we never stop thinking and always go a step further\nMeet CartoBERT 💚\nOne of the most recent and impactful breakthroughs NLP was the publication of\nBERT[1] — a contextual language representation with transformer models — by\nGoogle in late 2018. It obtained state-of-the-art results on a wide array of NLP\ntasks. In the 2019, many NLP researches were influenced by BERT, including\nXLNet, RoBERTa, ERNIE etc.\n\nBERT Explained\nBERT, or Bidirectional Encoder Representations from Transformers, is composed of\nan embedding layer, followed by groups of transformer layers.\n\nBERT Architecture, Source [https://arxiv.org/pdf/1810.04805v1.pdf]Every word\n(token) in the input sentence will first get encoded into its embedding\nrepresentations in the embedding layer, and then go through bidirectional\ntransformer encoder layers. Every encoder layer will perform the multi-head\nattention computation on the token representation from the previous layer to\ncreate a new intermediate representation, which is then output to the next\nlayer. The output from the final layer is the contextual representation of the\ninput token. A pooled sentence level representation combining all token\nrepresentations could be created if needed by specific downstream tasks.\n\nWith the final contextual representations at either token or sentence level, a\npre-trained BERT on large unlabelled text corpus, could be further extended to a\nwide variety of NLP tasks, such as text classification, question answering,\nNamed Entity Recognition (NER) etc.\n\nALBERT[2], published by Google in Sep 2019, improved on BERT with embedding\nparameter factorisation and cross layer parameter sharing to reduce the number\nof parameters (by 9 times for base model). It also uses sequence order\nprediction instead of next sentence prediction for the pre-train task. In the\npaper, ALBERT also outperforms BERT on standard NLP tasks/datasets (SQUAD, RACE\netc), with fewer parameters.\n\nPre-train CartoBERT to learn language representation from Gojek bookings text\nInspired by ALBERT’s lightweight model and performance, we developed CartoBERT,\nGojek’s very own pickup point name recognition model, based on ALBERT’s\narchitecture.\n\nAs illustrated below, the uncased CartoBERT is pre-trained on Gojek’s own masked\nbookings text corpus of about 200 million sentences. Booking text is first\npre-processed for data masking to mask all customer sensitive information,\nlanguage detection, text normalisation (including text cleaning, slang,\nabbreviation transformations, lowercase transformation and emoji removal). The\npre-processed text is used to build subword vocabularies which handles\nOut-Of-Vocabulary (OOV) tokens that could be decomposed to frequent subword\npatterns. CartoBERT tokenizer is then created with the subword vocabularies and\nfurther used to encode and tokenize the same preprocessed bookings text to form\npre-trained input files.\n\nSame as ALBERT, the model is pre-trained to ‘understand’ Gojek’s bookings text\nusing Masked Language Model — which predicts randomly masked tokens in input\nsentences — and Sentence Order Prediction tasks, which predicts the order of\ninput sentences pair.\n\n\nCartoBERT Pre-trainFine-tuning CartoBERT to extract pickup point names from\nGojek bookings text\nWith the huge amount of bookings text we have at Gojek, now CartoBERT can better\n‘understand’ past bookings text. Theoretically, it ‘understands’ every word of a\nbooking text sentence.\n\nFor every token in the input sentence, CartoBERT will output a 768-dimension\nvector (we use the default hidden layer size of the ALBERT base model in\nCartoBERT, however this is configurable) from last transformer encoder layer,\nand we use that to represent CartoBERT’s ‘understanding’ of the token’s meaning\nin the sentence context for fine-tune step.\n\nAs illustrated in the diagram below, while fine-tuning CartoBERT for pickup\npoint name recognition, we replace the Masked Language Model and Sequence Order\nPrediction layers from CartoBERT in pre-train step with token classification\nlayer. The token classification layer learns to predict the probability of a\ntoken belonging to a pickup point name, with the final token representation\noutput from CartoBERT transformer layers, from labelled training data created\nwith bookings text sentences, and corresponding pickup point names. Here, we use\nweighted cross entropy loss to deal with class imbalance, as tokens tagged to\npickup point names are a minority.\n\nCartoBERT Fine-tuneWith this, CartoBERT is fine-tuned to extract pickup point\nnames from bookings text sentences, if any.\n\nHow does the model perform?\nCartoBERT gives a lift of more than 25% in pickup point name accuracy to ~93%\naccuracy, which is measured as the percentage of valid pick up point names out\nof generated names. With this high accuracy, we have achieved full scalability\nof automatic generation for named pickup points to quickly cover multiple\ngeographies without heavy reliance on human inputs.\n\nWhat’s next?\nWe are not stopping here and are exploring using active learning to further\nimprove CartoBERT. With active learning, we only flag out uncertain predictions,\nwhich are measured as sentence level least token probability[3] for human\nlabelling. We then use human-curated data as feedback for model learning. In\nthis way, we can improve model learning efficiency with minimum labelling\neffort.\n\nWhat’s more, with the success of CartoBERT, we are considering pre-training and\nopen sourcing a general Indonesia Bahasa ALBERT model with Indonesia open corpus\nfrom wiki, news, Twitter etc. Currently, the options for open-sourced language\nmodel in Indonesia Bahasa are very limited, only pre-trained static word\nembeddings such as word2vec, fasttext etc are available. It would be beneficial\nto the community if we have a good state-of-the-art attention-based transformer\nmodel for the language. Stay tuned for more updates from the Cartography Data\nScience team. 🙌\n\nLeave a 👏 if you liked what you read. Ping me with suggestions and feedback.\n\nThanks to all the amazing people who contributed to this post: Tan Funan, Zane\nLim, Dang Le, Lijuan Chia, Bani Widyatmiko, Maureen Koha, Ringga Saputra, Nur\nIzzahudinr, Sandya Ardi, Yeni Primasari, Ardya Dipta.\n\n\n--------------------------------------------------------------------------------\n\nReferences\n[1] J. Devlin [https://arxiv.org/search/cs?searchtype=author&query=Devlin%2C+J], \nM. Chang [https://arxiv.org/search/cs?searchtype=author&query=Chang%2C+M], K.\nLee [https://arxiv.org/search/cs?searchtype=author&query=Lee%2C+K], K. Toutanova\n[https://arxiv.org/search/cs?searchtype=author&query=Toutanova%2C+K]: BERT:\nPre-training of Deep Bidirectional Transformers for Language Understanding.\narXiv:1810.04805 [https://arxiv.org/abs/1810.04805] (2018)\n\n[2] Z. Lan [https://arxiv.org/search/cs?searchtype=author&query=Lan%2C+Z], M.\nChen [https://arxiv.org/search/cs?searchtype=author&query=Chen%2C+M], S. Goodman\n[https://arxiv.org/search/cs?searchtype=author&query=Goodman%2C+S], K. Gimpel\n[https://arxiv.org/search/cs?searchtype=author&query=Gimpel%2C+K], P. Sharma\n[https://arxiv.org/search/cs?searchtype=author&query=Sharma%2C+P], R. Soricut\n[https://arxiv.org/search/cs?searchtype=author&query=Soricut%2C+R]: ALBERT: A\nLite BERT for Self-supervised Learning of Language Representations. \narXiv:1909.11942 [https://arxiv.org/abs/1909.11942] (2019)\n\n[3] M.Liu [https://arxiv.org/search/cs?searchtype=author&query=Liu%2C+M], Z. Tu\n[https://arxiv.org/search/cs?searchtype=author&query=Tu%2C+Z], Z. Wang\n[https://arxiv.org/search/cs?searchtype=author&query=Wang%2C+Z], X. Xu\n[https://arxiv.org/search/cs?searchtype=author&query=Xu%2C+X]: LTP: A New Active\nLearning Strategy for Bert-CRF Based Named Entity Recognition. arXiv:2001.02524\n[https://arxiv.org/abs/2001.02524] (2020)\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] to have our latest stories\ndelivered straight to your inbox!","html":"<p>By Li Xiaohong</p><p>When our customers want to use our ride hailing products like GoRide and GoCar, they are presented with convenient, clearly named pickup points nearby. Here’s an example:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/180/1*msS7z4IN06LVM0XvClmmPQ.gif\" class=\"kg-image\"></figure><p>This saves customers the hassle of calling the driver partner, explaining where they are, what colour clothes they are wearing, and so on. Our pickup points are designed to make lives easier for both customers and driver partners.</p><p>This is possible because the pickup points shown on the app are popular pickup locations around the area. What’s more, the pickup point names are displayed exactly how customers driver partners usually refer to them.</p><p><strong><strong>But how do we manage to name so many pickup points accurately, and at scale?</strong></strong></p><p>We use past booking locations and their associated chat logs to discover named pickup points. As our previous research has explained, we first perform <a href=\"https://blog.gojekengineering.com/fantastic-drivers-and-how-to-find-them-a88239ef3b29\" rel=\"noopener\">clustering</a> on historical bookings to form potential pickup points, then we use a <a href=\"https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03\" rel=\"noopener\">language model</a> to select the best name. Here, we explain how we improved upon the previous statistical language model with a state-of-the-art NLP model, which makes the entire naming exercise fully scalable. This is the magic behind all the pickup points seen on the Gojek app.</p><h1 id=\"how-can-we-learn-better\">How can we learn better?</h1><p>As explained in our previous post, our original statistical language model selects the best pickup point name from the most probable n-grams extracted from bookings text. However, such a statistical language model doesn’t ‘understand’ the meaning of the texts, it simply chooses phrases with high frequencies without knowing the semantics. Sometimes it throws street names, sometimes even common phrases with no information about location. We have to manually check everything to make sure it reflects the right POI, before it appears on the app.</p><p>This creates a challenge — especially if we want to quickly expand the frictionless pickup experience to customers across in new geographies. Hence, we decided to go a step further with a deep-learning NLP model that ‘understands’ and ‘learns’ to differentiate what is a valid pickup point name.</p><blockquote><em><em>At Gojek, we never stop thinking and always go a step further</em></em></blockquote><h1 id=\"meet-cartobert-\">Meet CartoBERT 💚</h1><p>One of the most recent and impactful breakthroughs NLP was the publication of BERT[1] — a contextual language representation with transformer models — by Google in late 2018. It obtained state-of-the-art results on a wide array of NLP tasks. In the 2019, many NLP researches were influenced by BERT, including XLNet, RoBERTa, ERNIE etc.</p><h2 id=\"bert-explained\">BERT Explained</h2><p>BERT, or Bidirectional Encoder Representations from Transformers, is composed of an embedding layer, followed by groups of transformer layers.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1226/1*qHFXdPcW_3UkLEsRJy2FRg.png\" class=\"kg-image\"><figcaption>BERT Architecture, <a href=\"https://arxiv.org/pdf/1810.04805v1.pdf\" rel=\"noopener\">Source</a></figcaption></figure><p>Every word (token) in the input sentence will first get encoded into its embedding representations in the embedding layer, and then go through bidirectional transformer encoder layers. Every encoder layer will perform the multi-head attention computation on the token representation from the previous layer to create a new intermediate representation, which is then output to the next layer. The output from the final layer is the contextual representation of the input token. A pooled sentence level representation combining all token representations could be created if needed by specific downstream tasks.</p><p>With the final contextual representations at either token or sentence level, a pre-trained BERT on large unlabelled text corpus, could be further extended to a wide variety of NLP tasks, such as text classification, question answering, Named Entity Recognition (NER) etc.</p><p>ALBERT[2], published by Google in Sep 2019, improved on BERT with embedding parameter factorisation and cross layer parameter sharing to reduce the number of parameters (by 9 times for base model). It also uses sequence order prediction instead of next sentence prediction for the pre-train task. In the paper, ALBERT also outperforms BERT on standard NLP tasks/datasets (SQUAD, RACE etc), with fewer parameters.</p><h2 id=\"pre-train-cartobert-to-learn-language-representation-from-gojek-bookings-text\">Pre-train CartoBERT to learn language representation from Gojek bookings text</h2><p>Inspired by ALBERT’s lightweight model and performance, we developed CartoBERT, Gojek’s very own pickup point name recognition model, based on ALBERT’s architecture.</p><p>As illustrated below, the uncased CartoBERT is pre-trained on Gojek’s own masked bookings text corpus of about 200 million sentences. Booking text is first pre-processed for data masking to mask all customer sensitive information, language detection, text normalisation (including text cleaning, slang, abbreviation transformations, lowercase transformation and emoji removal). The pre-processed text is used to build subword vocabularies which handles Out-Of-Vocabulary (OOV) tokens that could be decomposed to frequent subword patterns. CartoBERT tokenizer is then created with the subword vocabularies and further used to encode and tokenize the same preprocessed bookings text to form pre-trained input files.</p><p>Same as ALBERT, the model is pre-trained to ‘understand’ Gojek’s bookings text using Masked Language Model — which predicts randomly masked tokens in input sentences — and Sentence Order Prediction tasks, which predicts the order of input sentences pair.<br></p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1386/1*STaqWssxlYPhFaDulLwJzg.png\" class=\"kg-image\"><figcaption>CartoBERT Pre-train</figcaption></figure><h2 id=\"fine-tuning-cartobert-to-extract-pickup-point-names-from-gojek-bookings-text\">Fine-tuning CartoBERT to extract pickup point names from Gojek bookings text</h2><p>With the huge amount of bookings text we have at Gojek, now CartoBERT can better ‘understand’ past bookings text. Theoretically, it ‘understands’ every word of a booking text sentence.</p><p>For every token in the input sentence, CartoBERT will output a 768-dimension vector (we use the default hidden layer size of the ALBERT base model in CartoBERT, however this is configurable) from last transformer encoder layer, and we use that to represent CartoBERT’s ‘understanding’ of the token’s meaning in the sentence context for fine-tune step.</p><p>As illustrated in the diagram below, while fine-tuning CartoBERT for pickup point name recognition, we replace the Masked Language Model and Sequence Order Prediction layers from CartoBERT in pre-train step with token classification layer. The token classification layer learns to predict the probability of a token belonging to a pickup point name, with the final token representation output from CartoBERT transformer layers, from labelled training data created with bookings text sentences, and corresponding pickup point names. Here, we use weighted cross entropy loss to deal with class imbalance, as tokens tagged to pickup point names are a minority.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1526/1*WO1LRHQPqAqzpLBMMl-NuA.png\" class=\"kg-image\"><figcaption>CartoBERT Fine-tune</figcaption></figure><p>With this, CartoBERT is fine-tuned to extract pickup point names from bookings text sentences, if any.</p><h2 id=\"how-does-the-model-perform\">How does the model perform?</h2><p>CartoBERT gives a lift of more than 25% in pickup point name accuracy to ~93% accuracy, which is measured as the percentage of valid pick up point names out of generated names. With this high accuracy, we have achieved full scalability of automatic generation for named pickup points to quickly cover multiple geographies without heavy reliance on human inputs.</p><h1 id=\"what-s-next\">What’s next?</h1><p>We are not stopping here and are exploring using active learning to further improve CartoBERT. With active learning, we only flag out uncertain predictions, which are measured as sentence level least token probability[3] for human labelling. We then use human-curated data as feedback for model learning. In this way, we can improve model learning efficiency with minimum labelling effort.</p><p>What’s more, with the success of CartoBERT, we are considering pre-training and open sourcing a general Indonesia Bahasa ALBERT model with Indonesia open corpus from wiki, news, Twitter etc. Currently, the options for open-sourced language model in Indonesia Bahasa are very limited, only pre-trained static word embeddings such as word2vec, fasttext etc are available. It would be beneficial to the community if we have a good state-of-the-art attention-based transformer model for the language. Stay tuned for more updates from the Cartography Data Science team. 🙌</p><p>Leave a 👏 if you liked what you read. Ping me with suggestions and feedback.</p><p>Thanks to all the amazing people who contributed to this post: Tan Funan, Zane Lim, Dang Le, Lijuan Chia, Bani Widyatmiko, Maureen Koha, Ringga Saputra, Nur Izzahudinr, Sandya Ardi, Yeni Primasari, Ardya Dipta.</p><hr><h1 id=\"references\">References</h1><p>[1] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Devlin%2C+J\" rel=\"noopener\">J. Devlin</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Chang%2C+M\" rel=\"noopener\">M. Chang</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Lee%2C+K\" rel=\"noopener\">K. Lee</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Toutanova%2C+K\" rel=\"noopener\">K. Toutanova</a>: BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.<br><a href=\"https://arxiv.org/abs/1810.04805\" rel=\"noopener\">arXiv:1810.04805</a> (2018)</p><p>[2] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Lan%2C+Z\" rel=\"noopener\">Z. Lan</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Chen%2C+M\" rel=\"noopener\">M. Chen</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Goodman%2C+S\" rel=\"noopener\">S. Goodman</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Gimpel%2C+K\" rel=\"noopener\">K. Gimpel</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Sharma%2C+P\" rel=\"noopener\">P. Sharma</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Soricut%2C+R\" rel=\"noopener\">R. Soricut</a>: ALBERT: A Lite BERT for Self-supervised Learning of Language Representations. <a href=\"https://arxiv.org/abs/1909.11942\" rel=\"noopener\">arXiv:1909.11942</a> (2019)</p><p>[3] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Liu%2C+M\" rel=\"noopener\">M.Liu</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Tu%2C+Z\" rel=\"noopener\">Z. Tu</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Wang%2C+Z\" rel=\"noopener\">Z. Wang</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Xu%2C+X\" rel=\"noopener\">X. Xu</a>: LTP: A New Active Learning Strategy for Bert-CRF Based Named Entity Recognition. <a href=\"https://arxiv.org/abs/2001.02524\" rel=\"noopener\">arXiv:2001.02524</a> (2020)</p><hr><p>Liked what you read? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a> to have our latest stories delivered straight to your inbox!</p>","url":"https://gojek-ghost.zysk.in/how-gojek-uses-nlp-to-name-pickup-locations-at-scale/","canonical_url":null,"uuid":"b4ebe040-85ec-4818-aff5-0dd14c44c596","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca217aa22c4066f83b64","reading_time":6}},{"node":{"id":"Ghost__Post__5eb0f8af5524cd001e7391f4","title":"How Gojek Uses NLP to Name Pickup Locations at Scale","slug":"how-gojek-uses-nlp-to-name-pickup-locations-at-scale-2","featured":false,"feature_image":"https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dFalBje-vQCkEY8Zrq9P5g.jpg","excerpt":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","custom_excerpt":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"01 May, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T10:55:03.000+05:30","published_at":"2020-05-01T09:30:00.000+05:30","updated_at":"2020-05-12T11:51:38.000+05:30","meta_title":"How Gojek Uses NLP to Name Pickup Points at Scale","meta_description":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"When our customers want to use our ride hailing products like GoRide and GoCar,\nthey are presented with convenient, clearly named pickup points nearby. Here’s\nan example:\n\nThis saves customers the hassle of calling the driver partner, explaining where\nthey are, what colour clothes they are wearing, and so on. Our pickup points are\ndesigned to make lives easier for both customers and driver partners.\n\nThis is possible because the pickup points shown on the app are popular pickup\nlocations around the area. What’s more, the pickup point names are displayed\nexactly how customers driver partners usually refer to them.\n\nBut how do we manage to name so many pickup points accurately, and at scale?\n\nWe use past booking locations and their associated chat logs to discover named\npickup points. As our previous research has explained, we first perform \nclustering\n[https://blog.gojekengineering.com/fantastic-drivers-and-how-to-find-them-a88239ef3b29] \non historical bookings to form potential pickup points, then we use a language\nmodel\n[https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03] \nto select the best name. Here, we explain how we improved upon the previous\nstatistical language model with a state-of-the-art NLP model, which makes the\nentire naming exercise fully scalable. This is the magic behind all the pickup\npoints seen on the Gojek app.\n\nHow can we learn better?\nAs explained in our previous post, our original statistical language model\nselects the best pickup point name from the most probable n-grams extracted from\nbookings text. However, such a statistical language model doesn’t ‘understand’\nthe meaning of the texts, it simply chooses phrases with high frequencies\nwithout knowing the semantics. Sometimes it throws street names, sometimes even\ncommon phrases with no information about location. We have to manually check\neverything to make sure it reflects the right POI, before it appears on the app.\n\nThis creates a challenge — especially if we want to quickly expand the\nfrictionless pickup experience to customers across in new geographies. Hence, we\ndecided to go a step further with a deep-learning NLP model that ‘understands’\nand ‘learns’ to differentiate what is a valid pickup point name.\n\nAt Gojek, we never stop thinking and always go a step further\n\nMeet CartoBERT ?\nOne of the most recent and impactful breakthroughs NLP was the publication of\nBERT[1] — a contextual language representation with transformer models — by\nGoogle in late 2018. It obtained state-of-the-art results on a wide array of NLP\ntasks. In the 2019, many NLP researches were influenced by BERT, including\nXLNet, RoBERTa, ERNIE etc.\n\nBERT Explained\nBERT, or Bidirectional Encoder Representations from Transformers, is composed of\nan embedding layer, followed by groups of transformer layers.\n\nEvery word (token) in the input sentence will first get encoded into its\nembedding representations in the embedding layer, and then go through\nbidirectional transformer encoder layers. Every encoder layer will perform the\nmulti-head attention computation on the token representation from the previous\nlayer to create a new intermediate representation, which is then output to the\nnext layer. The output from the final layer is the contextual representation of\nthe input token. A pooled sentence level representation combining all token\nrepresentations could be created if needed by specific downstream tasks.\n\nWith the final contextual representations at either token or sentence level, a\npre-trained BERT on large unlabelled text corpus, could be further extended to a\nwide variety of NLP tasks, such as text classification, question answering,\nNamed Entity Recognition (NER) etc.\n\nALBERT[2], published by Google in Sep 2019, improved on BERT with embedding\nparameter factorisation and cross layer parameter sharing to reduce the number\nof parameters (by 9 times for base model). It also uses sequence order\nprediction instead of next sentence prediction for the pre-train task. In the\npaper, ALBERT also outperforms BERT on standard NLP tasks/datasets (SQUAD, RACE\netc), with fewer parameters.\n\nPre-train CartoBERT to learn language representation from Gojek bookings text\nInspired by ALBERT’s lightweight model and performance, we developed CartoBERT,\nGojek’s very own pickup point name recognition model, based on ALBERT’s\narchitecture.\n\nAs illustrated below, the uncased CartoBERT is pre-trained on Gojek’s own masked\nbookings text corpus of about 200 million sentences. Booking text is first\npre-processed for data masking to mask all customer sensitive information,\nlanguage detection, text normalisation (including text cleaning, slang,\nabbreviation transformations, lowercase transformation and emoji removal). The\npre-processed text is used to build subword vocabularies which handles\nOut-Of-Vocabulary (OOV) tokens that could be decomposed to frequent subword\npatterns. CartoBERT tokenizer is then created with the subword vocabularies and\nfurther used to encode and tokenize the same preprocessed bookings text to form\npre-trained input files.\n\nSame as ALBERT, the model is pre-trained to ‘understand’ Gojek’s bookings text\nusing Masked Language Model — which predicts randomly masked tokens in input\nsentences — and Sentence Order Prediction tasks, which predicts the order of\ninput sentences pair.\n\nFine-tuning CartoBERT to extract pickup point names from Gojek bookings text\nWith the huge amount of bookings text we have at Gojek, now CartoBERT can better\n‘understand’ past bookings text. Theoretically, it ‘understands’ every word of a\nbooking text sentence.\n\nFor every token in the input sentence, CartoBERT will output a 768-dimension\nvector (we use the default hidden layer size of the ALBERT base model in\nCartoBERT, however this is configurable) from last transformer encoder layer,\nand we use that to represent CartoBERT’s ‘understanding’ of the token’s meaning\nin the sentence context for fine-tune step.\n\nAs illustrated in the diagram below, while fine-tuning CartoBERT for pickup\npoint name recognition, we replace the Masked Language Model and Sequence Order\nPrediction layers from CartoBERT in pre-train step with token classification\nlayer. The token classification layer learns to predict the probability of a\ntoken belonging to a pickup point name, with the final token representation\noutput from CartoBERT transformer layers, from labelled training data created\nwith bookings text sentences, and corresponding pickup point names. Here, we use\nweighted cross entropy loss to deal with class imbalance, as tokens tagged to\npickup point names are a minority.\n\n\n\nWith this, CartoBERT is fine-tuned to extract pickup point names from bookings\ntext sentences, if any.\n\nHow does the model perform?\nCartoBERT gives a lift of more than 25% in pickup point name accuracy to ~93%\naccuracy, which is measured as the percentage of valid pick up point names out\nof generated names. With this high accuracy, we have achieved full scalability\nof automatic generation for named pickup points to quickly cover multiple\ngeographies without heavy reliance on human inputs.\n\nWhat’s next?\nWe are not stopping here and are exploring using active learning to further\nimprove CartoBERT. With active learning, we only flag out uncertain predictions,\nwhich are measured as sentence level least token probability[3] for human\nlabelling. We then use human-curated data as feedback for model learning. In\nthis way, we can improve model learning efficiency with minimum labelling\neffort.\n\nWhat’s more, with the success of CartoBERT, we are considering pre-training and\nopen sourcing a general Indonesia Bahasa ALBERT model with Indonesia open corpus\nfrom wiki, news, Twitter etc. Currently, the options for open-sourced language\nmodel in Indonesia Bahasa are very limited, only pre-trained static word\nembeddings such as word2vec, fasttext etc are available. It would be beneficial\nto the community if we have a good state-of-the-art attention-based transformer\nmodel for the language. Stay tuned for more updates from the Cartography Data\nScience team. ?\n\nLeave a ? if you liked what you read. Ping me with suggestions and feedback.\n\nThanks to all the amazing people who contributed to this post: Tan Funan, Zane\nLim, Dang Le, Lijuan Chia, Bani Widyatmiko, Maureen Koha, Ringga Saputra, Nur\nIzzahudinr, Sandya Ardi, Yeni Primasari, Ardya Dipta.\n\n\n--------------------------------------------------------------------------------\n\nReferences\n\n[1] J. Devlin [https://arxiv.org/search/cs?searchtype=author&query=Devlin%2C+J], \nM. Chang [https://arxiv.org/search/cs?searchtype=author&query=Chang%2C+M], K.\nLee [https://arxiv.org/search/cs?searchtype=author&query=Lee%2C+K], K. Toutanova\n[https://arxiv.org/search/cs?searchtype=author&query=Toutanova%2C+K]: BERT:\nPre-training of Deep Bidirectional Transformers for Language Understanding.\narXiv:1810.04805 [https://arxiv.org/abs/1810.04805] (2018)\n\n[2] Z. Lan [https://arxiv.org/search/cs?searchtype=author&query=Lan%2C+Z], M.\nChen [https://arxiv.org/search/cs?searchtype=author&query=Chen%2C+M], S. Goodman\n[https://arxiv.org/search/cs?searchtype=author&query=Goodman%2C+S], K. Gimpel\n[https://arxiv.org/search/cs?searchtype=author&query=Gimpel%2C+K], P. Sharma\n[https://arxiv.org/search/cs?searchtype=author&query=Sharma%2C+P], R. Soricut\n[https://arxiv.org/search/cs?searchtype=author&query=Soricut%2C+R]: ALBERT: A\nLite BERT for Self-supervised Learning of Language Representations. \narXiv:1909.11942 [https://arxiv.org/abs/1909.11942] (2019)\n\n[3] M.Liu [https://arxiv.org/search/cs?searchtype=author&query=Liu%2C+M], Z. Tu\n[https://arxiv.org/search/cs?searchtype=author&query=Tu%2C+Z], Z. Wang\n[https://arxiv.org/search/cs?searchtype=author&query=Wang%2C+Z], X. Xu\n[https://arxiv.org/search/cs?searchtype=author&query=Xu%2C+X]: LTP: A New Active\nLearning Strategy for Bert-CRF Based Named Entity Recognition. arXiv:2001.02524\n[https://arxiv.org/abs/2001.02524] (2020)\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] to have our latest stories\ndelivered straight to your inbox!","html":"<p>When our customers want to use our ride hailing products like GoRide and GoCar, they are presented with convenient, clearly named pickup points nearby. Here’s an example:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/180/1*msS7z4IN06LVM0XvClmmPQ.gif\" class=\"kg-image\"></figure><p>This saves customers the hassle of calling the driver partner, explaining where they are, what colour clothes they are wearing, and so on. Our pickup points are designed to make lives easier for both customers and driver partners.</p><p>This is possible because the pickup points shown on the app are popular pickup locations around the area. What’s more, the pickup point names are displayed exactly how customers driver partners usually refer to them.</p><p><strong><strong>But how do we manage to name so many pickup points accurately, and at scale?</strong></strong></p><p>We use past booking locations and their associated chat logs to discover named pickup points. As our previous research has explained, we first perform <a href=\"https://blog.gojekengineering.com/fantastic-drivers-and-how-to-find-them-a88239ef3b29\" rel=\"noopener\">clustering</a> on historical bookings to form potential pickup points, then we use a <a href=\"https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03\" rel=\"noopener\">language model</a> to select the best name. Here, we explain how we improved upon the previous statistical language model with a state-of-the-art NLP model, which makes the entire naming exercise fully scalable. This is the magic behind all the pickup points seen on the Gojek app.</p><h1 id=\"how-can-we-learn-better\">How can we learn better?</h1><p>As explained in our previous post, our original statistical language model selects the best pickup point name from the most probable n-grams extracted from bookings text. However, such a statistical language model doesn’t ‘understand’ the meaning of the texts, it simply chooses phrases with high frequencies without knowing the semantics. Sometimes it throws street names, sometimes even common phrases with no information about location. We have to manually check everything to make sure it reflects the right POI, before it appears on the app.</p><p>This creates a challenge — especially if we want to quickly expand the frictionless pickup experience to customers across in new geographies. Hence, we decided to go a step further with a deep-learning NLP model that ‘understands’ and ‘learns’ to differentiate what is a valid pickup point name.</p><p><em><em>At Gojek, we never stop thinking and always go a step further</em></em></p><h1 id=\"meet-cartobert-\">Meet CartoBERT ?</h1><p>One of the most recent and impactful breakthroughs NLP was the publication of BERT[1] — a contextual language representation with transformer models — by Google in late 2018. It obtained state-of-the-art results on a wide array of NLP tasks. In the 2019, many NLP researches were influenced by BERT, including XLNet, RoBERTa, ERNIE etc.</p><h2 id=\"bert-explained\">BERT Explained</h2><p>BERT, or Bidirectional Encoder Representations from Transformers, is composed of an embedding layer, followed by groups of transformer layers.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1226/1*qHFXdPcW_3UkLEsRJy2FRg.png\" class=\"kg-image\"></figure><p>Every word (token) in the input sentence will first get encoded into its embedding representations in the embedding layer, and then go through bidirectional transformer encoder layers. Every encoder layer will perform the multi-head attention computation on the token representation from the previous layer to create a new intermediate representation, which is then output to the next layer. The output from the final layer is the contextual representation of the input token. A pooled sentence level representation combining all token representations could be created if needed by specific downstream tasks.</p><p>With the final contextual representations at either token or sentence level, a pre-trained BERT on large unlabelled text corpus, could be further extended to a wide variety of NLP tasks, such as text classification, question answering, Named Entity Recognition (NER) etc.</p><p>ALBERT[2], published by Google in Sep 2019, improved on BERT with embedding parameter factorisation and cross layer parameter sharing to reduce the number of parameters (by 9 times for base model). It also uses sequence order prediction instead of next sentence prediction for the pre-train task. In the paper, ALBERT also outperforms BERT on standard NLP tasks/datasets (SQUAD, RACE etc), with fewer parameters.</p><h2 id=\"pre-train-cartobert-to-learn-language-representation-from-gojek-bookings-text\">Pre-train CartoBERT to learn language representation from Gojek bookings text</h2><p>Inspired by ALBERT’s lightweight model and performance, we developed CartoBERT, Gojek’s very own pickup point name recognition model, based on ALBERT’s architecture.</p><p>As illustrated below, the uncased CartoBERT is pre-trained on Gojek’s own masked bookings text corpus of about 200 million sentences. Booking text is first pre-processed for data masking to mask all customer sensitive information, language detection, text normalisation (including text cleaning, slang, abbreviation transformations, lowercase transformation and emoji removal). The pre-processed text is used to build subword vocabularies which handles Out-Of-Vocabulary (OOV) tokens that could be decomposed to frequent subword patterns. CartoBERT tokenizer is then created with the subword vocabularies and further used to encode and tokenize the same preprocessed bookings text to form pre-trained input files.</p><p>Same as ALBERT, the model is pre-trained to ‘understand’ Gojek’s bookings text using Masked Language Model — which predicts randomly masked tokens in input sentences — and Sentence Order Prediction tasks, which predicts the order of input sentences pair.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1386/1*STaqWssxlYPhFaDulLwJzg.png\" class=\"kg-image\"></figure><h2 id=\"fine-tuning-cartobert-to-extract-pickup-point-names-from-gojek-bookings-text\">Fine-tuning CartoBERT to extract pickup point names from Gojek bookings text</h2><p>With the huge amount of bookings text we have at Gojek, now CartoBERT can better ‘understand’ past bookings text. Theoretically, it ‘understands’ every word of a booking text sentence.</p><p>For every token in the input sentence, CartoBERT will output a 768-dimension vector (we use the default hidden layer size of the ALBERT base model in CartoBERT, however this is configurable) from last transformer encoder layer, and we use that to represent CartoBERT’s ‘understanding’ of the token’s meaning in the sentence context for fine-tune step.</p><p>As illustrated in the diagram below, while fine-tuning CartoBERT for pickup point name recognition, we replace the Masked Language Model and Sequence Order Prediction layers from CartoBERT in pre-train step with token classification layer. The token classification layer learns to predict the probability of a token belonging to a pickup point name, with the final token representation output from CartoBERT transformer layers, from labelled training data created with bookings text sentences, and corresponding pickup point names. Here, we use weighted cross entropy loss to deal with class imbalance, as tokens tagged to pickup point names are a minority.</p><p></p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1526/1*WO1LRHQPqAqzpLBMMl-NuA.png\" class=\"kg-image\"></figure><p>With this, CartoBERT is fine-tuned to extract pickup point names from bookings text sentences, if any.</p><h2 id=\"how-does-the-model-perform\">How does the model perform?</h2><p>CartoBERT gives a lift of more than 25% in pickup point name accuracy to ~93% accuracy, which is measured as the percentage of valid pick up point names out of generated names. With this high accuracy, we have achieved full scalability of automatic generation for named pickup points to quickly cover multiple geographies without heavy reliance on human inputs.</p><h1 id=\"what-s-next\">What’s next?</h1><p>We are not stopping here and are exploring using active learning to further improve CartoBERT. With active learning, we only flag out uncertain predictions, which are measured as sentence level least token probability[3] for human labelling. We then use human-curated data as feedback for model learning. In this way, we can improve model learning efficiency with minimum labelling effort.</p><p>What’s more, with the success of CartoBERT, we are considering pre-training and open sourcing a general Indonesia Bahasa ALBERT model with Indonesia open corpus from wiki, news, Twitter etc. Currently, the options for open-sourced language model in Indonesia Bahasa are very limited, only pre-trained static word embeddings such as word2vec, fasttext etc are available. It would be beneficial to the community if we have a good state-of-the-art attention-based transformer model for the language. Stay tuned for more updates from the Cartography Data Science team. ?</p><p>Leave a ? if you liked what you read. Ping me with suggestions and feedback.</p><p>Thanks to all the amazing people who contributed to this post: Tan Funan, Zane Lim, Dang Le, Lijuan Chia, Bani Widyatmiko, Maureen Koha, Ringga Saputra, Nur Izzahudinr, Sandya Ardi, Yeni Primasari, Ardya Dipta.</p><hr><p><strong>References</strong></p><p>[1] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Devlin%2C+J\" rel=\"noopener\">J. Devlin</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Chang%2C+M\" rel=\"noopener\">M. Chang</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Lee%2C+K\" rel=\"noopener\">K. Lee</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Toutanova%2C+K\" rel=\"noopener\">K. Toutanova</a>: BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.<br><a href=\"https://arxiv.org/abs/1810.04805\" rel=\"noopener\">arXiv:1810.04805</a> (2018)</p><p>[2] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Lan%2C+Z\" rel=\"noopener\">Z. Lan</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Chen%2C+M\" rel=\"noopener\">M. Chen</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Goodman%2C+S\" rel=\"noopener\">S. Goodman</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Gimpel%2C+K\" rel=\"noopener\">K. Gimpel</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Sharma%2C+P\" rel=\"noopener\">P. Sharma</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Soricut%2C+R\" rel=\"noopener\">R. Soricut</a>: ALBERT: A Lite BERT for Self-supervised Learning of Language Representations. <a href=\"https://arxiv.org/abs/1909.11942\" rel=\"noopener\">arXiv:1909.11942</a> (2019)</p><p>[3] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Liu%2C+M\" rel=\"noopener\">M.Liu</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Tu%2C+Z\" rel=\"noopener\">Z. Tu</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Wang%2C+Z\" rel=\"noopener\">Z. Wang</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Xu%2C+X\" rel=\"noopener\">X. Xu</a>: LTP: A New Active Learning Strategy for Bert-CRF Based Named Entity Recognition. <a href=\"https://arxiv.org/abs/2001.02524\" rel=\"noopener\">arXiv:2001.02524</a> (2020)</p><hr><p>Liked what you read? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a> to have our latest stories delivered straight to your inbox!</p>","url":"https://gojek-ghost.zysk.in/how-gojek-uses-nlp-to-name-pickup-locations-at-scale-2/","canonical_url":null,"uuid":"51dd4492-b728-4b37-8c7f-41fd41619f7a","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb0f8af5524cd001e7391f4","reading_time":6}},{"node":{"id":"Ghost__Post__5eb12ec4f7c7da001effce0f","title":"The Secret Sauce Behind Search Personalisation","slug":"the-secret-sauce-behind-search-personalisation","featured":false,"feature_image":"https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_x4G3c6-g3z3mz01o2EJdbw.jpg","excerpt":"How Gojek uses machine learning to personalise search results in GoFood.","custom_excerpt":"How Gojek uses machine learning to personalise search results in GoFood.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"02 December, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-05T14:45:48.000+05:30","published_at":"2019-12-02T09:30:00.000+05:30","updated_at":"2020-05-18T20:43:26.000+05:30","meta_title":null,"meta_description":"How Gojek uses machine learning to personalise search results in GoFood.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Jewel James\n\nAre you looking for food? Thinking about burgers and crispy chicken fritters\nwith creamy sauces sitting on a warm, soft bun? At least, that’s what I am\nthinking about. May be you’re different. Vegan perhaps? Or craving noodles? Each\nof us turn into a different person when we are hungry, and this is the story\nabout how GoFood — Gojek’s food delivery service — helps you find the bite you\ncrave.\n\n> At the core of the food ordering experience, sits search.\nSearches are part of so many of our interactions on web and mobile, that we\ndon’t even notice it anymore. This is mostly because modern search engines have\nmatured to a point where they can deliver high quality results even if the\nentered query is a weak signal of the user’s intent. Even when weak, every query\nstill contains a piece of the user’s intent.\n\nIn the case of GoFood, that piece is a fragment of our user’s hunger-driven\nbrain.\n\nIn this post, we’ll discuss how we personalise the search results we surface on\nGoFood, based on the information we have about our users’ food preferences.\n\nHow Each of Us Differ\nLet’s look at two of our GoFood users who have started feeling the pangs of\nhunger, and come online to check restaurants near them.\n\nThey both open our app and click on the NEAR ME tile that lets users find the\nrestaurants near them. We show them the nearest restaurants first, and this is\nwhat they both see.\n\n\nThis list goes on and on and will let them see each restaurant which is farther\nand farther away. They can now peruse the menus of each restaurant and pick one\nthat serves what they feel like ordering. The problem is that they may spend\nsome time scrolling and then leave the app without being able to make up their\nminds around which restaurant to place an order from. We have thrown too many\nchoices at them and the cognitive effort of picking a restaurant and then a dish\nfrom the menu is too much work to make them suffer through.\n\nBut wait. Both Mila and Husain have transacted with us in the past, and we know\na fair bit about their preferences. 🤔\n\nTo make this experience better, we decided to build a system that would let both\nof them see restaurants that suit their own tastes and preferences\n\nApplying Machine Learning to the Problem\nRanking documents for relevance works by assigning a prediction score to each\ndocument retrieved, which is directly proportional to its relevance. In the case\nof NEAR ME restaurant ranking this can be something like:\n\n> Relevance score = 2 * (1/distance) + 1.2 * rating of restaurant\nHere in the relevance score calculation, we are taking weighted sum of different\nfactors like (1/distance) and rating of restaurant. The coefficients/weights of\nthese factors can be arrived at by experimenting with them and choosing weights\nthat seem to maximise the ordering conversions. But, in the case of restaurant\nranking in GoFood, we want to take into consideration many factors when deciding\nrelevance. Unfortunately, experimenting with combinations of all those factors\nis impossible.\n\nEnter Learning to rank. Here, the problem of deciding the rank of the\nrestaurants shown to the user is formulated as a supervised machine learning\nproblem.\n\nIf we look at past search, click, and ordering data, we will be able to assign\nrelevance judgements to each restaurant listing according to whether our users\nclicked or ordered from one of those restaurants. Restaurants that attracted\nhigher degrees of interest will be given higher degrees of relevance.\n\nIn the below example, a relevance judgement level of 0,1 and 2 is assigned to a\nrestaurant according to whether the user viewed, clicked, or ordered from the\nrestaurant in the search result. The relevance judgements are relative and only\nintent to be monotonically increasing with increasing relevance . They say that\nthe restaurant which the user created an order from is more relevant than a\nrestaurant the user merely checked out by clicking on it. They don’t mean that\nthe restaurant which received the order is twice as relevant .\n\nThe values of each of the factors that could have played a role in the user’s\ndecision of clicking or ordering is also shown against the restaurants.\n\nThree of the factors/features in the above example are marked as\n‘personalisation features’ because they would change according to the user’s\nprevious order history and location. These will be the features that will be\ndifferent between Mila and Husain because of the differences in the restaurants\nand cuisines they have ordered from before in the past.\n\n> These personalisation features are at the crux of creating personalised\nexperiences for each user\nOther customer agnostic features/factors like the rating, price range, and\npopularity of the restaurant are also listed here. GoFood has millions of such\nexamples where users with different tastes made different decisions when shown a\nset of search results. These examples can now be used to create a dataset from\nwhich the learning to rank ML algorithm can create a model to decide how\nrelevant a GoFood user would find a restaurant given that user’s location, order\nhistory and other restaurant statistics.\n\nHow We Ranked\nOne way to approach this was as a point-wise ranking problem, wherein we try to\npredict the relevance judgement of each restaurant. Based on this, later we will\npredict the relevance judgement level and sort restaurants in decreasing order\nof predicted relevance score. This approach reduces learning to rank problem to\na regression problem.\n\nAnother approach was to solve it is a pairwise ranking problem, wherein the ML\nmodel is trying to learn how to get the order of a pair of restaurants correct\ni.e if Restaurant A is more preferable to Restaurant B , the order (Restaurant\nA, Restaurant B) is correct and the order (Restaurant B, Restaurant A) is wrong.\n\nFor an ML model to be learned, we need an objective function that captures this\npairwise ordering formulation . This is called a loss function or error function\nin ML and is the measure through which an ML model can assess how right or wrong\nits decision was. In pairwise ranking , this should be a function that becomes\nhigher whenever the model misjudges a preference order and becomes lower when it\nis right about the preference order.\n\nThe loss/error function C is explained below:\n\nWhen this function is minimised, the model is trying to predict a score for each\nrestaurant such that the ranking of the order of the restaurants are close the\nrelevance judgements the users made.\n\nThe pairwise formulation is a better approach here in comparison to the\npoint-wise approach as it is looking to get the order of restaurants right and\nis not trying to estimate the relevance score themselves whose values were\nassigned only as markers to show how some restaurants were more preferred\nrelative to others.\n\nWe used an implementation of the LambdaMART algorithm that learns to predict\nrelevance scores so as to minimise this pairwise loss. You can think of this as\na pursuit to find the decision tree that takes in all the parameters of the\nrestaurant and gives out a score to the restaurant . This score should be\nassigned in such a way as to make the pair orders right.\n\nOnce this model is trained, it can be used during search, as explained in this\npost\n[https://blog.gojekengineering.com/how-the-gojek-butler-serves-a-gourmet-meal-to-our-users-4a161d83052a?source=friends_link&sk=42397976fe914a418ac40f19545f90b7]\n.\n\nNow let’s go back to our beloved customers — Mila and Husain. The next time Mila\nor Husain looks for restaurants near them, the search results they see will be\naccording to their preferences. This is because the model would look at the\nnumber of times they have ordered from each of the restaurants near them before.\nIt would take their preferred cuisines and factors like restaurant ratings into\naccount, and show them the restaurants that they would prefer to order from\nfirst.\n\nThe different search results Mila and Husain get after learning to rank is used\nto re-rank the results are shown below.\n\nWe ran an AB test using this formulation of learning to rank and observed a\nrelative lift of 20% in search to ordering conversions and 23% improvement in\nNDCG. More information on how this metric is calculated here\n[https://blog.gojekengineering.com/is-this-what-you-were-looking-for-439bf012cca6?source=friends_link&sk=bdc1310acc3b6a8270f10284cb30fa53]\n.\n\nWhat We Learned\nOne interesting thing we observed as we started experimenting with this learning\nto rank model was personalising search results led to the average position at\nwhich the search to order conversions happen to be much higher on the list. This\nis because users were increasingly seeing the restaurants that they have some\naffinity towards and were able to make an ordering decision without scrolling\nmuch and without spending too much time being confused where to order from.\n\nSo that’s how we rank restaurant pairs with respect to relevance based on\navailable user data. We’ll continue to write more about how we make our products\nmore intuitive. Stay tuned to this blog, or sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] for email updates. 👌\n\n\n--------------------------------------------------------------------------------\n\n(Special thanks to Sugam Anand [https://twitter.com/SugamAnand] for additional\ndesign support ✌️)\n\n\n--------------------------------------------------------------------------------\n\nWant weekly updates with more of our stories? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] ✌️","html":"<p>By Jewel James</p><p>Are you looking for food? Thinking about burgers and crispy chicken fritters with creamy sauces sitting on a warm, soft bun? At least, that’s what I am thinking about. May be you’re different. Vegan perhaps? Or craving noodles? Each of us turn into a different person when we are hungry, and this is the story about how GoFood — Gojek’s food delivery service — helps you find the bite you crave.</p><blockquote><em><em>At the core of the food ordering experience, sits search.</em></em></blockquote><p>Searches are part of so many of our interactions on web and mobile, that we don’t even notice it anymore. This is mostly because modern search engines have matured to a point where they can deliver high quality results even if the entered query is a weak signal of the user’s intent. Even when weak, every query still contains a piece of the user’s intent.</p><p><em><em>In the case of GoFood, that piece is a fragment of our user’s hunger-driven brain.</em></em></p><p>In this post, we’ll discuss how we personalise the search results we surface on GoFood, based on the information we have about our users’ food preferences.</p><h1 id=\"how-each-of-us-differ\">How Each of Us Differ</h1><p>Let’s look at two of our GoFood users who have started feeling the pangs of hunger, and come online to check restaurants near them.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3192/1*AP6fdakISbNOdEZyCUxa5g.jpeg\" class=\"kg-image\"></figure><p>They both open our app and click on the <code>NEAR ME</code> tile that lets users find the restaurants near them. We show them the nearest restaurants first, and this is what they both see.<br></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/2322/1*tBxtTKY9cfA7rcl5LXq3Ag.jpeg\" class=\"kg-image\"></figure><p>This list goes on and on and will let them see each restaurant which is farther and farther away. They can now peruse the menus of each restaurant and pick one that serves what they feel like ordering. The problem is that they may spend some time scrolling and then leave the app without being able to make up their minds around which restaurant to place an order from. We have thrown too many choices at them and the cognitive effort of picking a restaurant and then a dish from the menu is too much work to make them suffer through.</p><p><strong><strong><em><em>But wait. Both Mila and Husain have transacted with us in the past, and we know a fair bit about their preferences.</em></em> 🤔</strong></strong></p><p>To make this experience better, we decided to build a system that would let both of them see restaurants that suit their own tastes and preferences</p><h1 id=\"applying-machine-learning-to-the-problem\">Applying Machine Learning to the Problem</h1><p>Ranking documents for relevance works by assigning a prediction score to each document retrieved, which is directly proportional to its relevance. In the case of <code>NEAR ME</code> restaurant ranking this can be something like:</p><blockquote><em><em><em>Relevance score = 2 * (1/distance) + 1.2 * rating of restaurant</em></em></em></blockquote><p>Here in the relevance score calculation, we are taking weighted sum of different factors like <em><em>(1/distance) </em></em>and <em><em>rating of restaurant</em></em>. The coefficients/weights of these factors can be arrived at by experimenting with them and choosing weights that seem to maximise the ordering conversions. But, in the case of restaurant ranking in GoFood, we want to take into consideration many factors when deciding relevance. Unfortunately, experimenting with combinations of all those factors is impossible.</p><p>Enter L<em><em>earning to rank</em></em>. Here, the problem of deciding the rank of the restaurants shown to the user is formulated as a supervised machine learning problem.</p><p>If we look at past search, click, and ordering data, we will be able to assign relevance judgements to each restaurant listing according to whether our users clicked or ordered from one of those restaurants. Restaurants that attracted higher degrees of interest will be given higher degrees of relevance.</p><p>In the below example, a relevance judgement level of 0,1 and 2 is assigned to a restaurant according to whether the user viewed, clicked, or ordered from the restaurant in the search result. The relevance judgements are relative and only intent to be monotonically increasing with increasing relevance . They say that the restaurant which the user created an order from is more relevant than a restaurant the user merely checked out by clicking on it. <strong><strong>They don’t mean that the restaurant which received the order is twice as relevant .</strong></strong></p><p>The values of each of the factors that could have played a role in the user’s decision of clicking or ordering is also shown against the restaurants.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/2376/1*X0Oe0KA7ZTU2wYa2SXS_CA.png\" class=\"kg-image\"></figure><p>Three of the factors/features in the above example are marked as ‘personalisation features’ because they would change according to the user’s previous order history and location. These will be the features that will be different between Mila and Husain because of the differences in the restaurants and cuisines they have ordered from before in the past.</p><blockquote>These personalisation features are at the crux of creating personalised experiences for each user</blockquote><p>Other customer agnostic features/factors like the rating, price range, and popularity of the restaurant are also listed here. GoFood has millions of such examples where users with different tastes made different decisions when shown a set of search results. These examples can now be used to create a dataset from which the learning to rank ML algorithm can create a model to decide how relevant a GoFood user would find a restaurant given that user’s location, order history and other restaurant statistics.</p><h1 id=\"how-we-ranked\">How We Ranked</h1><p>One way to approach this was as a point-wise ranking problem, wherein we try to predict the relevance judgement of each restaurant. Based on this, later we will predict the relevance judgement level and sort restaurants in decreasing order of predicted relevance score. This approach reduces learning to rank problem to a regression problem.</p><p>Another approach was to solve it is a pairwise ranking problem, wherein the ML model is trying to learn how to get the order of a pair of restaurants correct i.e if Restaurant A is more preferable to Restaurant B , the order (Restaurant A, Restaurant B) is correct and the order (Restaurant B, Restaurant A) is wrong.</p><p>For an ML model to be learned, we need an objective function that captures this pairwise ordering formulation . This is called a loss function or error function in ML and is the measure through which an ML model can assess how right or wrong its decision was. In pairwise ranking , this should be a function that becomes higher whenever the model misjudges a preference order and becomes lower when it is right about the preference order.</p><p>The loss/error function <strong><strong><em><em>C</em></em></strong></strong> is explained below:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3316/1*2sWi_7l1iI_-dRppVoaGRA.png\" class=\"kg-image\"></figure><p>When this function is minimised, the model is trying to predict a score for each restaurant such that the ranking of the order of the restaurants are close the relevance judgements the users made.</p><p>The pairwise formulation is a better approach here in comparison to the point-wise approach as it is looking to get the order of restaurants right and is not trying to estimate the relevance score themselves whose values were assigned only as markers to show how some restaurants were more preferred relative to others.</p><p>We used an implementation of the LambdaMART algorithm that learns to predict relevance scores so as to minimise this pairwise loss. You can think of this as a pursuit to find the decision tree that takes in all the parameters of the restaurant and gives out a score to the restaurant . This score should be assigned in such a way as to make the pair orders right.</p><p>Once this model is trained, it can be used during search, as explained in <a href=\"https://blog.gojekengineering.com/how-the-gojek-butler-serves-a-gourmet-meal-to-our-users-4a161d83052a?source=friends_link&amp;sk=42397976fe914a418ac40f19545f90b7\">this post</a>.</p><p>Now let’s go back to our beloved customers — Mila and Husain. The next time Mila or Husain looks for restaurants near them, the search results they see will be according to their preferences. This is because the model would look at the number of times they have ordered from each of the restaurants near them before. It would take their preferred cuisines and factors like restaurant ratings into account, and show them the restaurants that they would prefer to order from first.</p><p>The different search results Mila and Husain get after learning to rank is used to re-rank the results are shown below.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/7545/1*ALMsK5OzG3rUACrx_U3E0g.jpeg\" class=\"kg-image\"></figure><p>We ran an AB test using this formulation of learning to rank and observed a relative lift of 20% in search to ordering conversions and 23% improvement in NDCG. More information on how this metric is calculated <a href=\"https://blog.gojekengineering.com/is-this-what-you-were-looking-for-439bf012cca6?source=friends_link&amp;sk=bdc1310acc3b6a8270f10284cb30fa53\" rel=\"noopener\">here</a>.</p><h1 id=\"what-we-learned\">What We Learned</h1><p>One interesting thing we observed as we started experimenting with this learning to rank model was personalising search results led to the average position at which the search to order conversions happen to be much higher on the list. This is because users were increasingly seeing the restaurants that they have some affinity towards and were able to make an ordering decision without scrolling much and without spending too much time being confused where to order from.</p><p>So that’s how we rank restaurant pairs with respect to relevance based on available user data. We’ll continue to write more about how we make our products more intuitive. Stay tuned to this blog, or <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">sign up for our newsletter</a> for email updates. 👌</p><hr><p>(Special thanks to <a href=\"https://twitter.com/SugamAnand\" rel=\"noopener\">Sugam Anand</a> for additional design support ✌️)</p><hr><p>Want weekly updates with more of our stories? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a> ✌️</p>","url":"https://gojek-ghost.zysk.in/the-secret-sauce-behind-search-personalisation/","canonical_url":null,"uuid":"f53d2946-dab7-43e3-af3b-5453077e95ee","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb12ec4f7c7da001effce0f","reading_time":7}},{"node":{"id":"Ghost__Post__5ec2ca287aa22c4066f83b68","title":"Batch Processing Pipelines for Better Data Analysis","slug":"batch-processing-pipelines-for-better-data-analysis","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_EbT2AH9uAMjxHrVxh5xJrw.jpeg","excerpt":"How we generate intelligible insights from our data warehouse using batch pipelines.","custom_excerpt":"How we generate intelligible insights from our data warehouse using batch pipelines.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"11 November, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T23:17:20.000+05:30","published_at":"2019-11-11T09:30:00.000+05:30","updated_at":"2020-05-18T23:34:54.000+05:30","meta_title":null,"meta_description":"How we generate intelligible insights from our data warehouse using batch pipelines.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Maulik Soneji\n\nGojek’s Data Warehouse [https://en.wikipedia.org/wiki/Data_warehouse], built by\nintegrating data from multiple applications and sources, serves as a central\npoint of analysis that also helps generate actionable insights. Our batch\npipelines process billions of data points periodically, in order to help our\nbusiness teams gather an effective view of data.\n\nThis post explains our approach to building batch pipelines that leverage\ncomplex data in an efficient way.\n\nI will start by providing some context on our data warehouse and the data we\nstore in it, and explain the use cases of batch processing that we tackle at\nGojek. Then we’ll talk about how we tackle running batch processing jobs and\nhandling scheduling dependencies.\n\nData Warehouse setup\nAt Gojek, we use Google Bigquery (BQ) as a Data Warehouse. All data points\nranging from booking and searches to location are published in real time using \nBeast [https://github.com/gojek/beast], our open-sourced tool.\n\nWe also push data from Kafka to our data lake, which is Google Cloud\nStorage(GCS). These data points vary in terms of the data format (which might\nnot be relevant to the analysts). They need to gather insights from the data\nwithout needing to know how it is stored.\n\n> To solve this, we wanted to create an abstraction such that the users of data\nonly need to know about the constitution of data, and not about where the data\nis coming from or what format the data is stored.\nBatch processing use cases\nTypical use cases of batch processing at Gojek revolve around enriching\nreal-time data with additional data points mined from huge amounts of historical\ndata.\n\nA few examples of use cases include:\n\nCreating a customer profile:\n\nIn order to provide our customers with the most relevant discount and deal\nvouchers, we enrich customer profiles with the last few months of the customer’s\norder and search history. This enables our team of data analysts and data\nscientists to experiment with customer segmentation and targeting. This use case\nhas been covered in much detail by my colleague Mayank in this blog\n[https://blog.gojekengineering.com/how-we-solved-user-selection-to-help-merchants-win-business-519fe5085a0e]\n.\n\nPersonalising search results:\n\nIn order to personalise the search results served up by our food delivery app\nGoFood, we leverage batch processing to gather insights about trending, popular,\nand highly-rated restaurants near the user that match their taste profile. More\ndetails around how we went about this use case are covered in this blog\n[https://blog.gojekengineering.com/how-the-gojek-butler-serves-a-gourmet-meal-to-our-users-4a161d83052a]\n.\n\nRunning Batch pipelines\nAs I previously mentioned, the users of data usually don’t need to know the\nformat in which the data is stored. They would benefit from having a unified\ninterface to interact with data.\n\nWe leveraged Dataframes in Apache Spark [https://spark.apache.org/] to provide\nthe unified interface.\n\nDataFrames or Datasets\nSpark provides an abstraction on top of the data underneath — called DataFrames\nor Datasets.\n\nDataFrames are distributed collections of data in which data is organised in the\nform of columns.\n\nConceptually, a data frame becomes similar to a database.\n\nFew examples of reading from Bigquery and GCS are as follows:\n\nClient to read data from bigquery into spark dataframe.\n\nClient to read data from GCS into spark dataframe\n\nUsing these clients make it very easy for our analysts to read GCS and Bigquery\ndata into Spark and interact with it.\n\nRunning Spark Jobs\nWe use Google Dataproc [https://cloud.google.com/dataproc/] hosting a Spark\ncluster to run our batch pipelines. On each trigger of a batch job, we create an\nephemeral cluster to run the job, which means that the cluster is destroyed\nafter the batch job completes.\n\nThe batch job is written in Pyspark\n[https://spark.apache.org/docs/2.2.0/api/python/pyspark.html], which all our\nanalysts are familiar with. This provides a good interface to interact with\nSpark Dataframes.\n\nScheduling Dependencies between Jobs\nAs the Spark jobs become more complex and handle many responsibilities, it\nbecomes important to break them down into simpler jobs that can be better\nmanaged.\n\n> But this breakdown brings more challenges.\nWe now have to make sure the related jobs are scheduled taking in mind the\nscheduling dependencies between different jobs.\n\nFor example:\nIf there are two jobs, the first one calculates the last 6 months of order\nhistory and the second job uses the order history to calculate the preferred\nlocations from which the customer has ordered, it becomes important to run the\nfirst job and then schedule the second job.\n\nOur solution to handle such scheduling dependencies is to use Apache Airflow\n[https://airflow.apache.org/]. This is a tool to programmatically schedule and\nmanage scheduling dependencies between different jobs.\n\nThe scheduling dependencies are written as a Directed Acyclic Graph (DAG) and we\nset a schedule for the DAG to run. Simple. 🙂\n\nWith Airflow, we are also able to assign retries for each job. In the instance\nof a job failing, Airflow will rerun the job by itself.\n\nAs a final precaution, we have also added Slack integration and StatsD metrics\nwith Airflow, in order to get alerts for when the jobs have failed and need to\nbe fixed.\n\nSo that’s all for this post. Hope you liked it! If you’d like to work on cool\nproblems and help us scale a #SuperApp for Southeast Asia, make sure to check\nout gojek.jobs [http://bit.ly/2CvjmXv]. Until next time. 🖖\n\n\n--------------------------------------------------------------------------------\n\nWant our updates delivered straight to your inbox? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Maulik Soneji</p><p>Gojek’s <a href=\"https://en.wikipedia.org/wiki/Data_warehouse\" rel=\"noopener\">Data Warehouse</a>, built by integrating data from multiple applications and sources, serves as a central point of analysis that also helps generate actionable insights. Our batch pipelines process billions of data points periodically, in order to help our business teams gather an effective view of data.</p><p>This post explains our approach to building batch pipelines that leverage complex data in an efficient way.</p><p>I will start by providing some context on our data warehouse and the data we store in it, and explain the use cases of batch processing that we tackle at Gojek. Then we’ll talk about how we tackle running batch processing jobs and handling scheduling dependencies.</p><h1 id=\"data-warehouse-setup\">Data Warehouse setup</h1><p>At Gojek, we use Google Bigquery (BQ) as a Data Warehouse. All data points ranging from booking and searches to location are published in real time using <a href=\"https://github.com/gojek/beast\" rel=\"noopener\"><strong><strong>Beast</strong></strong></a><strong><strong>, </strong></strong>our open-sourced tool.</p><p>We also push data from Kafka to our data lake, which is Google Cloud Storage(GCS). These data points vary in terms of the data format (which might not be relevant to the analysts). They need to gather insights from the data without needing to know how it is stored.</p><blockquote><em><em>To solve this, we wanted to create an abstraction such that the users of data only need to know about the constitution of data, and not about where the data is coming from or what format the data is stored.</em></em></blockquote><h1 id=\"batch-processing-use-cases\"><strong>Batch processing use cases</strong></h1><p>Typical use cases of batch processing at Gojek revolve around enriching real-time data with additional data points mined from huge amounts of historical data.</p><p>A few examples of use cases include:</p><p><strong><strong>Creating a customer profile:</strong></strong></p><p>In order to provide our customers with the most relevant discount and deal vouchers, we enrich customer profiles with the last few months of the customer’s order and search history. This enables our team of data analysts and data scientists to experiment with customer segmentation and targeting. This use case has been covered in much detail by my colleague Mayank in this <a href=\"https://blog.gojekengineering.com/how-we-solved-user-selection-to-help-merchants-win-business-519fe5085a0e\" rel=\"noopener\">blog</a>.</p><p><strong><strong>Personalising search results:</strong></strong></p><p>In order to personalise the search results served up by our food delivery app GoFood, we leverage batch processing to gather insights about trending, popular, and highly-rated restaurants near the user that match their taste profile. More details around how we went about this use case are covered in this <a href=\"https://blog.gojekengineering.com/how-the-gojek-butler-serves-a-gourmet-meal-to-our-users-4a161d83052a\" rel=\"noopener\">blog</a>.</p><h1 id=\"running-batch-pipelines\">Running Batch pipelines</h1><p>As I previously mentioned, the users of data usually don’t need to know the format in which the data is stored. They would benefit from having a unified interface to interact with data.</p><p><em><em>We leveraged Dataframes in </em></em><a href=\"https://spark.apache.org/\" rel=\"noopener\"><em><em>Apache Spark</em></em></a><em><em> to provide the unified interface.</em></em></p><h2 id=\"dataframes-or-datasets\"><strong>DataFrames or Datasets</strong></h2><p>Spark provides an abstraction on top of the data underneath — called DataFrames or Datasets.</p><p>DataFrames are distributed collections of data in which data is organised in the form of columns.</p><p><strong><strong>Conceptually, a data frame becomes similar to a database.</strong></strong></p><p>Few examples of reading from Bigquery and GCS are as follows:</p><!--kg-card-begin: html--><script src=\"https://gist.github.com/mauliksoneji/48d7d84976ee5957de90e03ba2314540.js\"></script><!--kg-card-end: html--><p><em>Client to read data from bigquery into spark dataframe.</em></p><!--kg-card-begin: html--><script src=\"https://gist.github.com/mauliksoneji/0a8c12d3c7ecbe2c4794dbd039e03815.js\"></script><!--kg-card-end: html--><p><em>Client to read data from GCS into spark dataframe</em></p><p>Using these clients make it very easy for our analysts to read GCS and Bigquery data into Spark and interact with it.</p><p><strong><strong>Running Spark Jobs</strong></strong><br>We use <a href=\"https://cloud.google.com/dataproc/\" rel=\"noopener\">Google Dataproc</a> hosting a Spark cluster to run our batch pipelines. On each trigger of a batch job, we create an ephemeral cluster to run the job, which means that the cluster is destroyed after the batch job completes.</p><p>The batch job is written in <a href=\"https://spark.apache.org/docs/2.2.0/api/python/pyspark.html\" rel=\"noopener\">Pyspark</a>, which all our analysts are familiar with. This provides a good interface to interact with Spark Dataframes.</p><h1 id=\"scheduling-dependencies-between-jobs\"><strong>Scheduling Dependencies between Jobs</strong></h1><p>As the Spark jobs become more complex and handle many responsibilities, it becomes important to break them down into simpler jobs that can be better managed.</p><blockquote>But this breakdown brings more challenges.</blockquote><p>We now have to make sure the related jobs are scheduled taking in mind the scheduling dependencies between different jobs.</p><p><strong><strong>For example:</strong></strong><br>If there are two jobs, the first one calculates the last 6 months of order history and the second job uses the order history to calculate the preferred locations from which the customer has ordered, it becomes important to run the first job and then schedule the second job.</p><p>Our solution to handle such scheduling dependencies is to use <a href=\"https://airflow.apache.org/\" rel=\"noopener\">Apache Airflow</a>. This is a tool to programmatically schedule and manage scheduling dependencies between different jobs.</p><p>The scheduling dependencies are written as a Directed Acyclic Graph (DAG) and we set a schedule for the DAG to run. Simple. 🙂</p><p>With Airflow, we are also able to assign retries for each job. In the instance of a job failing, Airflow will rerun the job by itself.</p><p>As a final precaution, we have also added Slack integration and StatsD metrics with Airflow, in order to get alerts for when the jobs have failed and need to be fixed.</p><p>So that’s all for this post. Hope you liked it! If you’d like to work on cool problems and help us scale a #SuperApp for Southeast Asia, make sure to check out <a href=\"http://bit.ly/2CvjmXv\" rel=\"noopener\">gojek.jobs</a>. Until next time. 🖖</p><hr><p>Want our updates delivered straight to your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">Sign up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/batch-processing-pipelines-for-better-data-analysis/","canonical_url":null,"uuid":"0d510c4e-75d7-409e-97c0-5414539cb91f","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca287aa22c4066f83b68","reading_time":3}}]},"designFeaturedPost":{"edges":[{"node":{"id":"Ghost__Post__5eb11d29f7c7da001effccb7","title":"How Design Can Build or Break a Business","slug":"how-design-can-build-or-break-a-business-1-of-3","featured":true,"feature_image":"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Part1.gif","excerpt":"A UX case-study on redesigning the GoFood ‘Checkout’ experience | (Part 1 of 3) Why we needed a redesign.","custom_excerpt":"A UX case-study on redesigning the GoFood ‘Checkout’ experience | (Part 1 of 3) Why we needed a redesign.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"02 April, 2019","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T13:30:41.000+05:30","published_at":"2019-04-02T09:30:00.000+05:30","updated_at":"2020-05-12T11:55:15.000+05:30","meta_title":"How Design Can Build or Break a Business","meta_description":"A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 1 of 3) Why we needed a redesign.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Fatema Raja\n\nGoFood needs little by way of introduction. The largest food delivery service in\nSoutheast Asia, 300,000+ merchants, 16 million menu items… you get the drift.\nWith figures like that, you’d expect the GoFood user experience to be the best\nin the business.\n\nWhy then, did nearly 20% of GoFood users leave the checkout flow after adding\nitems to their cart?\n\nSomething wasn’t adding up.\n\nOur user flow was broken, and we needed to fix it.\n\nTL;DR: This post is part one of a three-part series highlighting the case study\nand critical considerations that went into redesigning the Checkout experience\nfor GoFood — Gojek’s food delivery product.\n\nLights, Camera… ??\nGOJEK was going through a major facelift in 2018. For a Super App with 19+\nproducts, we had all the scale-related issues one could imagine. We desperately\nneeded an efficient system for our designers and developers. This gave birth to \nAsphalt — GOJEK’s very own Design Language System [http://asphalt.gojek.io/].\n\nThe redesign started with our transport app — GoRide. It was then time to show\nsome love to Gojek’s prodigal child — GoFood. The product owner walked up to to\nme and said — “Let’s go beyond just the UI, and rethink the entire user\nexperience, instead of ceding over features as is.”\n\nWhat he meant — “Get ready! Lots of sleepless nights coming your way. We’re\ngoing to do a mammoth redesign, the likes of which minions like you will crumble\nunder.” ?\n\n? Action!\nWe wanted our redesign to solve problems with specific business constraints, and\nwe knew it was impossible to do so without delving into user problems first.\n\nFinding the right problem to solve is harder (and more important) than finding\nthe right solution.\n\nFirst comes the framework\nTo achieve this, we pinned some critical thumb-rules before embarking on our\nredesign journey:\n\n * To be data-driven. (“Design is not about making things pretty” — I’m going to\n   parrot this line 10 times over in this blog and if you ever talk to me?)\n * To incorporate the existing brand perception into all designs. (Marketing\n   says fun and creative but product looks dull and boring?Problem!)\n * To empathise with users and business requirements. (Always chase the full\n   story, be user-centric and business-driven)\n\nTo put the framework to use, we started white-boarding our in-app user flow. In\nthe journey graph, we noticed a large number of users were dropping-off at our\ncheckout page. That means nearly 20% of our users who added items to their cart,\nleft the flow right before placing the order (the last step) — the checkout page\n\nWe summed up the results to visually represent the emotional state of our in-app\nuser journey.Understand users’ pain points ?\nThe second step was to understand our users’ pain points with the existing UX in\nthe checkout flow. To dig deeper into this, we reached out to our users directly\n(kudos to the research team for setting this up). We adapted both qualitative\nand quantitative methods to get to the root of every problem in the picture. We\nthen accumulated all our learnings into a consumer journey infographic.\n\nUser journey map | Courtesy: GoFood research team :)We wanted to involve the\nwhole GoFood team, beyond just research and design. This made it more\ncollaborative than the traditional sharing and feedback loop. To reinforce this,\nwe conducted several internal sharing and brainstorming sessions. The research\nteam also put together a fun quiz for user personas.\n\nInternal brainstorming sessions — Researchers, Engineers, Designers, PMs & UX\nwriters.What were the results?\n\nAs anticipated, our users felt agitated, confused and overwhelmed, resulting in\na big drop off at the Checkout page. Here’s some of the feedback from our users:\n\n“I find this step too confusing.”\n\n“A lot of times my order button is disabled (grey) and I don’t know why.”\n\n“I often miss rechecking some information at this step, most times I only focus\non payment.”\n\nThis entire process was important for us — to be able to go to the field, do\ninterviews, research, and speak to our customers directly. It gave us tremendous\ninsight into the product development, and is precisely what made our product so\ngood. This was not only fun but extremely useful.\n\nWith all the research and data at our disposal; we realised that redesigning the\ncheckout flow first will not only enhance the user experience, but help solve a\ncritical business problem.\n\n\nNeeds a lot of ❤, doesn’t it?The original page consists of five components on one single page. It was\nextremely overwhelming for most of our users:\n\n 1. Dish Details and Notes card\n\n2. Delivery Location Selection card\n\n3. Payment Method Selection card\n\n4. Voucher card\n\n5. Billing & Discounts card\n\nHats off to our users for being patient. I say this because every time a user\nlands on this page, they had to process a verbose set of information, and\nperform countless actions in a single page to just ‘confirm’ one food order.\nPainful. ?\n\nDesign is integral. Design is sacrosanct. While companies are now paying heed to\nthe importance of design, GOJEK, by virtue of being a #SuperApp, had to imbibe\ndesign logic into its very fabric.\n\nSo we got to work.\n\nDefining each problem ⚡️\nOnce we dissected the users’ goals and pain points, we had a clear picture of\nall the problems that plagued the Checkout flow. We narrowed our learnings to \nfive primary user problems to form a common understanding of what we were trying\nto solve.\n\nProblem 1: Verbose Information\nThe first thing most users did on this page was scroll, scroll and scroll. 3\nscrolls minimum. Also, did you notice the amount of text? We’re in the age of\nmicro-blogging and us millennials have the attention span of goldfishes, for\ncrying out loud!\n\nProblem 2: Cognitive overload\nThe page was overflowing with tasks that required explicit actions from the\nuser. Do this. And that. And hey, this too. Oh wait, THAT TOO. Chaotic. Select\ndelivery location but first find where it is, check the total, select payment\nmethod, glance through all the dishes added to the cart, apply your discount\nvoucher….?\n\nProblem 3: Prolonged Checkout\nToo many actions and redundant information caused users to spend more than 2\nminutes just to confirm and place a simple order. Time wasted, energy wasted,\ntummy still not fed. ?\n\nProblem 4: High Cancellations\nA large sum of our users hurried through this step without actually\ndouble-checking delivery location details (buried under a scroll somewhere).\nThis resulted in nearly 3% of our users cancelling and reordering the same cart\nwith an updated address (that’s another story in itself).\n\nProblem 5: Lacks Love\nThere was nothing delightful about this page. The dishes didn’t have images on\ncheckout, the icons weren’t consistent, and had too much clutter. It was just\ntext and buttons stacked in the form of black and white cards. No, seriously,\neven the active ‘Add more items’ button was a plain grey.\n\nIn a nutshell, our flow lacked information hierarchy, delight, structure, was\ntoo complex, and in all… poor.\n\nIn order to fix this, we spent a month researching, ideating, and defining the\nproblem. Then we ideated some more, deliberated, chugged way too much beer (to\nadd some philosophical thinking), and tried to justify one solution after\nanother with the right data and metrics.\n\nWe were ready. We had all the answers. ?‍♀️\n\nBoy, were we wrong.\n\nIn the next post [http://bit.ly/2FUiYDo], I’ll detail all the steps we took to\narrive at this perfect (lol) solution — and how it all went downhill.","html":"<p>By Fatema Raja</p><p>GoFood needs little by way of introduction. The largest food delivery service in Southeast Asia, 300,000+ merchants, 16 million menu items… you get the drift. With figures like that, you’d expect the GoFood user experience to be the best in the business.</p><p>Why then, did nearly 20% of GoFood users leave the checkout flow after adding items to their cart?</p><p>Something wasn’t adding up.</p><p>Our user flow was broken, and we needed to fix it.</p><p><strong><strong>TL;DR: </strong></strong>This post is <em><em>part one </em></em>of a three-part series highlighting the case study and critical considerations that went into redesigning the <strong><strong>Checkout</strong></strong> experience for GoFood — Gojek’s food delivery product.</p><h1 id=\"lights-camera-\">Lights, Camera… ??</h1><p>GOJEK was going through a major facelift in 2018. For a Super App with 19+ products, we had all the scale-related issues one could imagine. We desperately needed an efficient system for our designers and developers. This gave birth to<a href=\"http://asphalt.gojek.io/\" rel=\"noopener\"> Asphalt — GOJEK’s very own Design Language System</a>.</p><p>The redesign started with our transport app — GoRide. It was then time to show some love to Gojek’s prodigal child — GoFood.<em><em> </em></em>The product owner walked up to to me and said <em><em>— “Let’s go beyond just the UI, and rethink the entire user experience, instead of ceding over features as is.”</em></em></p><p>What he meant — <em><em>“Get ready! Lots of sleepless nights coming your way. We’re going to do a mammoth redesign, the likes of which minions like you will crumble under.”</em></em> ?</p><h1 id=\"-action-\">? Action!</h1><p>We wanted our redesign to solve problems with specific business constraints, and we knew it was impossible to do so without delving into user problems first.</p><p>Finding the right problem to solve is harder (and more important) than finding the right solution.</p><h1 id=\"first-comes-the-framework\">First comes the framework</h1><p>To achieve this, we pinned some critical thumb-rules before embarking on our redesign journey:</p><ul><li><strong><strong>To be data-driven</strong></strong>. (“Design is not about making things pretty” — I’m going to parrot this line 10 times over in this blog and if you ever talk to me?)</li><li><strong><strong>To</strong></strong> <strong><strong>incorporate the existing brand perception into all designs</strong></strong>. (Marketing says fun and creative but product looks dull and boring?Problem!)</li><li><strong><strong>To empathise with users and business requirements.</strong></strong> (Always chase the full story, be user-centric and business-driven)</li></ul><p>To put the framework to use, we started white-boarding our in-app user flow. In the journey graph, we noticed a large number of users were dropping-off<strong><strong><em><em> </em></em></strong></strong>at our checkout page<strong><strong><em><em>.</em></em></strong></strong> That means<strong><strong> nearly <em><em>20% </em></em>of our users who added items to their cart, left the flow right before placing the order (the last step) — the checkout page</strong></strong></p><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"https://miro.medium.com/max/2673/1*fJ2s_mHGtrYDeXV3kEajzg.png\" class=\"kg-image\"><figcaption>We summed up the results to visually represent the emotional state of our in-app user journey.</figcaption></figure><h1 id=\"understand-users-pain-points-\">Understand users’ pain points ?</h1><p>The second step was to understand our users’ pain points with the existing UX in the checkout flow. To dig deeper into this, we reached out to our users directly (kudos to the research team for setting this up).<strong><strong> We adapted both qualitative and quantitative methods to get to the root of every problem in the picture.</strong></strong> We then accumulated all our learnings into a consumer journey infographic.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/2572/1*3TzMeTjeKDD2oH4ZbPhp4w.png\" class=\"kg-image\"><figcaption>User journey map | Courtesy: GoFood research team :)</figcaption></figure><p>We wanted to involve the whole GoFood team, beyond just research and design. <strong><strong>This made it more collaborative than the traditional sharing and feedback loop. </strong></strong>To reinforce this, we conducted several internal sharing and brainstorming sessions. The research team also put together a fun quiz for user personas.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/2856/1*lyqCBZNfBuBOUsUVFUo3-g.png\" class=\"kg-image\"><figcaption>Internal brainstorming sessions — Researchers, Engineers, Designers, PMs &amp; UX writers.</figcaption></figure><p>What were the results?</p><p>As anticipated, our users felt agitated, confused and overwhelmed, resulting in a big drop off at the Checkout page. Here’s some of the feedback from our users:</p><p><strong><strong><em><em>“I find this step too confusing.”</em></em></strong></strong></p><p><strong><strong><em><em>“A lot of times my order button is disabled (grey) and I don’t know why.”</em></em></strong></strong></p><p><strong><strong><em><em>“I often miss rechecking some information at this step, most times I only focus on payment.”</em></em></strong></strong></p><p><em><em>This entire process was important for us — to be able to go to the field, do interviews, research, and speak to our customers directly. It gave us tremendous insight into the product development, and is precisely what made our product so good. This was not only fun but extremely useful.</em></em></p><p>With all the research and data at our disposal; we realised that redesigning the checkout flow first will not only enhance the user experience, but help solve a critical business problem.<br></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/3278/1*T8b-QbwwRfMeWK14MOyKmg.png\" class=\"kg-image\"><figcaption>Needs a lot of ❤, doesn’t it?</figcaption></figure><p>The original page consists of <strong><strong><em><em>five</em></em></strong></strong> components on one <strong><strong><em><em>single</em></em></strong></strong> page. It was extremely overwhelming for most of our users:</p><ol><li>Dish Details and Notes card</li></ol><p>2. Delivery Location Selection card</p><p>3. Payment Method Selection card</p><p>4. Voucher card</p><p>5. Billing &amp; Discounts card</p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://miro.medium.com/max/9621/1*X50izz9abnZyu81K55q_zA.png\" class=\"kg-image\"></figure><p>Hats off to our users for being patient. I say this because every time a user lands on this page, they had to process a verbose set of information, and perform countless actions<strong><strong><em><em> in a single page </em></em></strong></strong>to just <em><em>‘confirm’</em></em> one food order. Painful. ?</p><p><em><em>Design is integral. Design is sacrosanct. While companies are now paying heed to the importance of design, GOJEK, by virtue of being a #SuperApp, had to imbibe design logic into its very fabric.</em></em></p><p>So we got to work.</p><h1 id=\"defining-each-problem-\">Defining each problem ⚡️</h1><p>Once we dissected the users’ goals and pain points, we had a clear picture of all the problems that plagued the Checkout flow. We narrowed our learnings to <strong><strong><em><em>five</em></em></strong></strong> primary user problems to form a common understanding of what we were trying to solve.</p><h2 id=\"problem-1-verbose-information\">Problem 1: Verbose Information</h2><p>The first thing most users did on this page was <em><em>scroll, scroll and scroll</em></em>. <strong><strong><em><em>3 scrolls minimum</em></em>. </strong></strong>Also, did you notice the amount of text? We’re in the age of micro-blogging and us millennials have the attention span of goldfishes, for crying out loud!</p><h2 id=\"problem-2-cognitive-overload\">Problem 2: Cognitive overload</h2><p>The page was overflowing with tasks that required explicit actions from the user. Do this. And that. And hey, this too. Oh wait, THAT TOO. Chaotic. Select delivery location but first find where it is, check the total, select payment method, glance through all the dishes added to the cart, apply your discount voucher….?</p><h2 id=\"problem-3-prolonged-checkout\">Problem 3: Prolonged Checkout</h2><p>Too many actions and redundant information caused users to spend more than <strong><strong><em><em>2 minutes</em></em></strong></strong> just to confirm and place a simple order. Time wasted, energy wasted, tummy still not fed. ?</p><h2 id=\"problem-4-high-cancellations\">Problem 4: High Cancellations</h2><p>A large sum of our users hurried through this step without actually double-checking delivery location details (<em><em>buried under a scroll somewhere</em></em>). This resulted in nearly 3% of our users cancelling and reordering the same cart with an updated address (that’s another story in itself).</p><h2 id=\"problem-5-lacks-love\">Problem 5: Lacks Love</h2><p>There was nothing delightful about this page. The dishes didn’t have images on checkout, the icons weren’t consistent, and had too much clutter. It was just text and buttons stacked in the form of black and white cards. No, seriously, even the active ‘<em><em>Add more items’ </em></em>button was a plain grey.</p><p><em><em>In a nutshell<strong><strong>,</strong></strong> our flow lacked information hierarchy, delight, structure, was too complex, and in all… poor.</em></em></p><p>In order to fix this, we spent a month researching, ideating, and defining the problem. Then we ideated some more, deliberated, chugged way too much beer (to add some philosophical thinking), and tried to justify one solution after another with the right data and metrics.</p><p>We were ready. We had all the answers. ?‍♀️</p><p>Boy, were we wrong.</p><p>In the <a href=\"http://bit.ly/2FUiYDo\" rel=\"noopener\">next post</a>, I’ll detail all the steps we took to arrive at this perfect <em><em>(lol) </em></em>solution — and how it all went downhill.</p>","url":"https://gojek-ghost.zysk.in/how-design-can-build-or-break-a-business-1-of-3/","canonical_url":null,"uuid":"8760ee83-2a89-4cca-b6b2-a202b45e4d4c","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb11d29f7c7da001effccb7","reading_time":6}}]},"designPosts":{"edges":[{"node":{"id":"Ghost__Post__5e8efa6b5cbf39001e28e7fa","title":"How We Do Delightful Customer Pickups","slug":"how-we-do-delightful-customer-pickups","featured":false,"feature_image":"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-Do-Delightful-Customer-Pickups-.jpg","excerpt":"The little things that make getting where you need to go that much better.","custom_excerpt":"The little things that make getting where you need to go that much better.","visibility":"public","created_at_pretty":"09 April, 2020","published_at_pretty":"07 April, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-04-09T16:05:23.000+05:30","published_at":"2020-04-07T09:30:00.000+05:30","updated_at":"2020-05-12T11:51:53.000+05:30","meta_title":"How We Do Delightful Customer Pickups","meta_description":"The little things that make getting where you need to go that much better.","og_description":null,"og_image":"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-Do-Delightful-Customer-Pickups-.jpg","og_title":null,"twitter_description":null,"twitter_image":"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-Do-Delightful-Customer-Pickups-.jpg","twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Did you know Gojek’s Transport team (which oversees the ride hailing products of\nour SuperApp) has a ‘Pickup Experience’ pod?\n\nNo, we’re not helping you get better dates, you’re on your own there. ?\n\nI’m talking about the customer pickup experience on booking a ride with us on\nGoRide (2-wheeler taxis) and GoCar (4-wheeler taxis).\n\nYou know the feeling. The feeling of going to a big mall in an unfamiliar place,\ntrying to book a ride, but not knowing which is the most convenient pickup spot.\n\nDo I try the north entrance? Oh wait, there’s a one-way there, might need to\nwait a long while.\n\nAh, I got a driver but I don’t know how to tell her which side I am on. Wait,\nthere’s a Starbucks here. I’m in front of Starbucks!\n\nOh, you’re near McDonalds? Wait, maybe I can just come to you. But, how do I get\nto McDonalds now? ?‍♂️\n\n> Yeah, we’ve all been there.\nPickup points may seem like trivial things, but when you operate on a scale of\nmillions of orders per day, smoother pickups which require less coordination\n(and time) mean our customers get places faster, and our driver partners earn\nmore.\n\nIn this post, we’ll talk about how Gojek improved the pickup experience for\ncustomers and partners using Points of Interest (POI) — like a mall — and then\nstreamlined pickups around these areas using Pre-Defined Pickup Points (PPOI).\n\nThe Breakdown\nMany of the cities Gojek operates in are highly congested urban settings, where\nlocations are often not properly labelled on maps and pickup points can be hard\nto determine. This initially led to a lot of additional coordination between\npartners and customers over the phone, which is not the best use of anyone’s\ntime.\n\nIn order to streamline this process, we first began identifying POIs in popular\nareas. Once this was done, we located areas around these landmarks where lots of\npickups happened, and began suggesting them as pre-defined pickup points to our\nusers. Making these suggestions within the app was the first step in reducing\nthe cognitive load associated with pickups. (If you’d like to know how we\nidentified these spots. Check out this post\n[https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03]\n).\n\nOur next step in the process was to provide customers some details about the\nquality of these locations. We started showing them more details about the\npickup points near them—are they sheltered from weather, in case the driver\nneeds a couple of minutes to reach them? If it’s night, is it well-lit?\n\nBut wait, there’s more…\nPPOIs have contributed hugely to streamlining pickups and making life easier for\nour stakeholders. But what if the customer is new to an area and cannot easily\nidentify the locations we’re suggesting? Could we do more?\n\nOf course we could.\n\nUp until recently, pickup points showed up as map pins on the customer app based\non their location. We decided to add some additional functionality, starting\nwith images.\n\nIf you’re making a booking from an unfamiliar location, or have unreliable GPS\nconnectivity, how do you know you’re at the correct point suggested by the Gojek\napp? By adding images to the corresponding pins, we gave our customers the\nadvantage of being able to visually confirm they were in the right place.\n\nWith the two-factor confirmation of GPS pin and visual, our customers could\nconfirm their pickup point, and wait in peace. Not bad, eh?\n\nAt this point, our app could cater reliably to most of our users, whether it was\nregulars who already had a lot of context on ideal pickup spots or users who\nwere new to an area. However, we wanted to go even further to make a more\nairtight solution. What if a user was near a pickup point, but did not know how\nto reach it?\n\nThis was a problem with significant impact, as a user walking a short distance\nto a nearby well-served pickup point would be significantly faster than a driver\npartner navigating to an unfamiliar location nearby. Driver partners would\npotentially run into obstacles like one ways, or areas in Jakarta where odd-even\nrules are implemented.\n\nHowever, we didn’t want to put the onus of navigating to the PPOI on the user.\nThe least we could do in return for their cooperation was help them with\ndirections.\n\nSo that’s what we did.\n\nBeing able to leverage technology to help users book rides is an achievement in\nitself, one we’re proud of. But stopping at the solution is not how Super Apps\nare built. We exist to solve problems, and then delighting our users further\nthrough ease of use.\n\nFrom vague pickup points defined by often inaccurate GPS pings, our pickup\nexperience had evolved to the point where a user with zero knowledge of an area\ncould easily identify the best location nearby for smooth pickup, understand\nwhether it was convenient to wait at, navigate there, and confirm their arrival\nby sight. Utter delight. ?\n\nThat said, all our bookings don’t happen in dense urban areas with defined\nPPOIs. We’re working towards having PPOIs in most major areas, but sometimes,\ngood old chat-based coordination is still the default fallback.\n\nWe did learn a thing or two from our experience of putting images on PPOIs, so\nwe worked with Gojek’s Platform team (which handles our chat functionality), and\nbaked in the ability to share images in Driver-to-Customer chat. Even if all\nelse fails, our customers could still click a picture of their current location,\nand share it with our partners to help them identify it.\n\nIt’s safe to say that putting in the effort to help our customers get to their\nrides easily has paid off.\n\n> In the areas where we’ve deployed these features, we’ve seen pickup accuracy\ndouble on average. ✌\nWhat’s next?\nThere’s more?\n\nThere’s always more.\n\nEven as we continue to roll out this functionality across more regions we\noperate in, we’re working towards making it better—by allowing our users to give\nus feedback on how accurate our images/directions were, and even upload PPOI\nimages themselves.\n\nWe’ll keep you updated on how we fare. In the meantime, follow us for more\nstories, and sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]! ?","html":"<p>Did you know Gojek’s Transport team (which oversees the ride hailing products of our SuperApp) has a ‘Pickup Experience’ pod?</p><p><em><em>No, we’re not helping you get better dates, you’re on your own there. </em></em>?</p><p>I’m talking about the customer pickup experience on booking a ride with us on GoRide (2-wheeler taxis) and GoCar (4-wheeler taxis).</p><p>You know the feeling. The feeling of going to a big mall in an unfamiliar place, trying to book a ride, but not knowing which is the most convenient pickup spot.</p><p><em><em>Do I try the north entrance? Oh wait, there’s a one-way there, might need to wait a long while.</em></em></p><p><em><em>Ah, I got a driver but I don’t know how to tell her which side I am on. Wait, there’s a Starbucks here. I’m in front of Starbucks!</em></em></p><p><em><em>Oh, you’re near McDonalds? Wait, maybe I can just come to you. But, how do I get to McDonalds now?</em></em> ?‍♂️</p><blockquote>Yeah, we’ve all been there.</blockquote><p>Pickup points may seem like trivial things, but when you operate on a scale of millions of orders per day, smoother pickups which require less coordination (and time) mean our customers get places faster, and our driver partners earn more.</p><p>In this post, we’ll talk about how Gojek improved the pickup experience for customers and partners using Points of Interest (POI) — like a mall — and then streamlined pickups around these areas using Pre-Defined Pickup Points (PPOI).</p><h2 id=\"the-breakdown\">The Breakdown</h2><p>Many of the cities Gojek operates in are highly congested urban settings, where locations are often not properly labelled on maps and pickup points can be hard to determine. This initially led to a lot of additional coordination between partners and customers over the phone, which is not the best use of anyone’s time.</p><p>In order to streamline this process, we first began identifying POIs in popular areas. Once this was done, we located areas around these landmarks where lots of pickups happened, and began suggesting them as pre-defined pickup points to our users. Making these suggestions within the app was the first step in reducing the cognitive load associated with pickups. (If you’d like to know how we identified these spots. Check out <a href=\"https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03\" rel=\"noopener\">this post</a>).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-do.gif\" class=\"kg-image\"></figure><p>Our next step in the process was to provide customers some details about the quality of these locations. We started showing them more details about the pickup points near them—are they sheltered from weather, in case the driver needs a couple of minutes to reach them? If it’s night, is it well-lit?</p><h2 id=\"but-wait-there-s-more-\">But wait, there’s more…</h2><p>PPOIs have contributed hugely to streamlining pickups and making life easier for our stakeholders. But what if the customer is new to an area and cannot easily identify the locations we’re suggesting? Could we do more?</p><p>Of course we could.</p><p>Up until recently, pickup points showed up as map pins on the customer app based on their location. We decided to add some additional functionality, starting with images.</p><p>If you’re making a booking from an unfamiliar location, or have unreliable GPS connectivity, how do you know you’re at the correct point suggested by the Gojek app? By adding images to the corresponding pins, we gave our customers the advantage of being able to visually confirm they were in the right place.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-do-1.gif\" class=\"kg-image\"></figure><p>With the two-factor confirmation of GPS pin and visual, our customers could confirm their pickup point, and wait in peace. Not bad, eh?</p><p>At this point, our app could cater reliably to most of our users, whether it was regulars who already had a lot of context on ideal pickup spots or users who were new to an area. However, we wanted to go even further to make a more airtight solution. What if a user was near a pickup point, but did not know how to reach it?</p><p>This was a problem with significant impact, as a user walking a short distance to a nearby well-served pickup point would be significantly faster than a driver partner navigating to an unfamiliar location nearby. Driver partners would potentially run into obstacles like one ways, or areas in Jakarta where odd-even rules are implemented.</p><p>However, we didn’t want to put the onus of navigating to the PPOI on the user. The least we could do in return for their cooperation was help them with directions.</p><p>So that’s what we did.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-do-2.gif\" class=\"kg-image\"></figure><p>Being able to leverage technology to help users book rides is an achievement in itself, one we’re proud of. But stopping at the solution is not how Super Apps are built. We exist to solve problems, and then delighting our users further through ease of use.</p><p>From vague pickup points defined by often inaccurate GPS pings, our pickup experience had evolved to the point where a user with zero knowledge of an area could easily identify the best location nearby for smooth pickup, understand whether it was convenient to wait at, navigate there, and confirm their arrival by sight. Utter delight. ?</p><p>That said, all our bookings don’t happen in dense urban areas with defined PPOIs. We’re working towards having PPOIs in most major areas, but sometimes, good old chat-based coordination is still the default fallback.</p><p>We did learn a thing or two from our experience of putting images on PPOIs, so we worked with Gojek’s Platform team (which handles our chat functionality), and baked in the ability to share images in Driver-to-Customer chat. Even if all else fails, our customers could still click a picture of their current location, and share it with our partners to help them identify it.</p><p>It’s safe to say that putting in the effort to help our customers get to their rides easily has paid off.</p><blockquote><em><em>In the areas where we’ve deployed these features, we’ve seen pickup accuracy double on average. <em>✌</em></em></em></blockquote><h2 id=\"what-s-next\">What’s next?</h2><p><em><em>There’s more?</em></em></p><p><em><em>There’s always more.</em></em></p><p>Even as we continue to roll out this functionality across more regions we operate in, we’re working towards making it better—by allowing our users to give us feedback on how accurate our images/directions were, and even upload PPOI images themselves.</p><p>We’ll keep you updated on how we fare. In the meantime, follow us for more stories, and <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">sign up for our newsletter</a>! ?</p>","url":"https://gojek-ghost.zysk.in/how-we-do-delightful-customer-pickups/","canonical_url":null,"uuid":"96625509-a74c-4bd5-a090-f45a04166e62","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e8efa6b5cbf39001e28e7fa","reading_time":5}},{"node":{"id":"Ghost__Post__5ec2ca3d7aa22c4066f83b6c","title":"Screenshot Testing our Design System on Android","slug":"screenshot-testing-our-design-system-on-android","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_CDWU7CE8XeZNDZ0fa4KNLw.jpeg","excerpt":"An overview of how we do screenshot tests, and the open source libraries that helped us along the way.","custom_excerpt":"An overview of how we do screenshot tests, and the open source libraries that helped us along the way.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"14 January, 2020","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T23:17:41.000+05:30","published_at":"2020-01-14T09:30:00.000+05:30","updated_at":"2020-05-18T23:43:30.000+05:30","meta_title":null,"meta_description":"An overview of how we do screenshot tests, and the open source libraries that helped us along the way.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Jitin Sharma\n\nIn this post, we’ll take a look at how we test our Design System components on\nAndroid using screenshot tests to make them pixel perfect. 👌\n\nLet’s start with an example.\n\nTake a look at these two images:\n\nAre these images identical?They may look the same, but they aren’t! Here’s\nwhat’s different:\n\nThere are two subtle changes — the colour of the button is a different shade of\ngreen and the elevation is also different.\n\nIn Asphalt\n[https://blog.gojekengineering.com/ux-engineering-at-gojek-9de2abe24928], our\ndesign language system, we want to make sure our UI components are robust and\ndetect breakages early. Here’s how we leveraged screenshot tests to achieve\nthis.\n\nComponents Everywhere\nAsphalt Components in Gojek appWith Asphalt, we create components that can be\nreused across the Gojek app. Every button, text, input, or card which you see in\nmost of the screens of the app is an Asphalt Component. On top of this, we have\na demo app which showcases the usage of these components.\n\nAsphalt Components in Demo appOur components are the backbone of the Gojek app\nUI. For example, our button class has 300+ occurrences across Gojek’s consumer\napp codebase. This heavy reuse helps us enforce design guidelines across the\napp. The importance of these components requires that we test them thoroughly,\nas even a small regression in one component could mean a degraded experience for\nour users.\n\n[U]n[I]t Testing\nUnit tests are supposed to test logic and fail when expectations aren’t met. How\ndo we expect that a certain UI is being rendered properly?\n\nThe idea of screenshot testing is to have a master copy of screenshots that we\nknow are correct and on every test run compare the current screenshots to the\nmaster copy. If the current set does not match the master set, the test fails.\nThis will allow us to check unintentional UI changes. If the changes are\nintentional, then we run the tests in update mode which updates the master\nscreenshots.\n\nHere is the high level outline:\n\n> - Write Espresso test for all activities in the demo\n> - Take screenshots and create a master set\n> - At every CI run take screenshots again and compare with master set\nWe started out with Shot [https://github.com/Karumi/Shot], an open source\nlibrary which allows us to take screenshots and compare them using gradle\ncommands and generate reports.\n\nHere’s what a test for our Alert component looks like 👇\n\nAchilles Heel — The Android Emulator\nWhile the Android emulator has improved a lot in recent times, we found running\nemulators in CI is still unreliable.\n\nHere are a few issues we faced:\n\n> - We had to wait to for the emulator to start up, which was only possible\nthrough a hack(y) script by continuously pinging adb commands\n> Emulator would put more memory pressure on CI runners\n> Emulators also need hardware acceleration which required us to enable kvm on our\nLinux-based machines.\nRunning Instrumentation test cases with these issues would mean our tests would\nbe flaky — and we couldn’t have that.\n\nFirebase Test Lab saves the day!\nWe decide to move away from emulators to real devices.\n\nOne idea was to have devices connected to a machine and use the machine as a\nrunner for running test cases in CI — a device test lab.\n\nBut devices come with their own baggage — maintaining them. They may be\ninterrupted by software updates, system dialogs… or get overcharged and explode!\n🔥\n\nWe found the next best thing: Firebase Test Lab\n[https://firebase.google.com/docs/test-lab] — a set of devices in cloud, managed\nautomatically and available via CLI.\n\nThis solved our device problem, but we ran into another one — Firebase Test Lab\ndoesn’t allow you to run custom gradle commands. Instead, it expects you to\nupload a debug and a test apk, and it will run the tests for you. This meant we\ncould no longer use Shot for taking screenshots and comparing them 😦\n\nWhile scratching our heads over how to overcome this problem, we found that\nFirebase Test Lab allows you\n[https://firebase.google.com/docs/test-lab/android/test-screenshots] to take\nscreenshots through a library and then retrieve them from Google Cloud Bucket.\n\nThere is also a gradle plugin [https://github.com/runningcode/fladle/] which\nautomates this process including downloading artifacts from GCP — open source to\nthe rescue again!\n\nHere’s how our test case looks like with Firebase screenshot library:\n\nFor image comparison we used ImageMagick [https://imagemagick.org/], a very\npopular and feature-packed CLI tool for image manipulation. It also allows us to\noutput a different image in case two images don’t match, which is super useful\nfor generating test failure reports.\n\nThe final piece — integrating screenshot tests into our developer workflow\nAs part of CI, we do the following things when a merge request is raised:\n\n> - Build the project\n> - Run Espresso Tests on Firebase Test Lab\n> - Retrieve screenshots and compare them with master set\n> - If any screenshot doesn’t match, we fail the build and add a comment to PR\nusing Danger [https://danger.systems/]\nDanger reporting mismatch in screenshot along with diff image.We have been using\nthis setup for some time now, and it’s worked out great for us! We have been\nable to execute multiple UI refactors with high confidence.\n\nWhat’s next?\nWe will continue to invest in this setup in the future. Things like testing\nlocalisation, having a test matrix with multiple screen sizes, API levels,\ndevice densities… these are some things we have planned for the future.\n\nA big thank you to the open source libraries that helped us achieve this!\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] and we’ll send you weekly\nupdates about our stories! 🖖","html":"<p>By Jitin Sharma</p><p>In this post, we’ll take a look at how we test our Design System components on Android using screenshot tests to make them pixel perfect. 👌</p><p>Let’s start with an example.</p><p>Take a look at these two images:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1052/1*GON1POsYNn-n13Yvx9KWlQ.png\" class=\"kg-image\"><figcaption>Are these images identical?</figcaption></figure><p>They may look the same, but they aren’t! Here’s what’s different:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1052/1*0Cunmda2Ctain_g4xPU3iQ.png\" class=\"kg-image\"></figure><p>There are two subtle changes — the colour of the button is a different shade of green and the elevation is also different.</p><p>In <a href=\"https://blog.gojekengineering.com/ux-engineering-at-gojek-9de2abe24928\" rel=\"noopener\">Asphalt</a>, our design language system, we want to make sure our UI components are robust and detect breakages early. Here’s how we leveraged screenshot tests to achieve this.</p><h1 id=\"components-everywhere\">Components Everywhere</h1><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1584/1*UH05mhuGHielEDM4RtbOcQ.png\" class=\"kg-image\"><figcaption>Asphalt Components in Gojek app</figcaption></figure><p>With Asphalt, we create components that can be reused across the Gojek app. Every button, text, input, or card which you see in most of the screens of the app is an Asphalt Component. On top of this, we have a demo app which showcases the usage of these components.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1220/1*ixxp__0PC20bAMigugixhg.png\" class=\"kg-image\"><figcaption>Asphalt Components in Demo app</figcaption></figure><p>Our components are the backbone of the Gojek app UI. For example, our button class has 300+ occurrences across Gojek’s consumer app codebase. This heavy reuse helps us enforce design guidelines across the app. The importance of these components requires that we test them thoroughly, as even a small regression in one component could mean a degraded experience for our users.</p><h1 id=\"-u-n-i-t-testing\">[U]n[I]t Testing</h1><p>Unit tests are supposed to test logic and fail when expectations aren’t met. How do we expect that a certain UI is being rendered properly?</p><p>The idea of screenshot testing is to have a master copy of screenshots that we know are correct and on every test run compare the current screenshots to the master copy. If the current set does not match the master set, the test fails. This will allow us to check unintentional UI changes. If the changes are intentional, then we run the tests in <code>update</code> mode which updates the master screenshots.</p><p><strong><strong>Here is the high level outline:</strong></strong></p><blockquote><em><em>- Write Espresso test for all activities in the demo</em></em></blockquote><blockquote><em><em>- Take screenshots and create a master set</em></em></blockquote><blockquote><em><em>- At every CI run take screenshots again and compare with master set</em></em></blockquote><p>We started out with <a href=\"https://github.com/Karumi/Shot\" rel=\"noopener\">Shot</a>, an open source library which allows us to take screenshots and compare them using gradle commands and generate reports.</p><p>Here’s what a test for our Alert component looks like 👇</p><!--kg-card-begin: html--><script src=\"https://gist.github.com/jitinsharma/c57e8afbb0b4849ff75a29eeba4dc4d1.js\"></script><!--kg-card-end: html--><h1 id=\"achilles-heel-the-android-emulator\">Achilles Heel — The Android Emulator</h1><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1400/0*WWyaL1uLibHeXC15.png\" class=\"kg-image\"></figure><p>While the Android emulator has improved a lot in recent times, we found running emulators in CI is still unreliable.</p><p>Here are a few issues we faced:</p><blockquote><em><em>- We had to wait to for the emulator to start up, which was only possible through a hack(y) script by continuously pinging <code>adb</code> commands</em></em></blockquote><blockquote><em><em>Emulator would put more memory pressure on CI runners</em></em></blockquote><blockquote><em><em>Emulators also need hardware acceleration which required us to enable <code>kvm</code> on our Linux-based machines.</em></em></blockquote><p>Running Instrumentation test cases with these issues would mean our tests would be flaky — and we couldn’t have that.</p><h1 id=\"firebase-test-lab-saves-the-day-\">Firebase Test Lab saves the day!</h1><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1280/0*IIH6x5bWvHn1Gcv_.jpg\" class=\"kg-image\"></figure><p>We decide to move away from emulators to real devices.</p><p>One idea was to have devices connected to a machine and use the machine as a runner for running test cases in CI — a device test lab.</p><p>But devices come with their own baggage — maintaining them. They may be interrupted by software updates, system dialogs… or get overcharged and explode! 🔥</p><p>We found the next best thing: <a href=\"https://firebase.google.com/docs/test-lab\" rel=\"noopener\">Firebase Test Lab</a> — a set of devices in cloud, managed automatically and available via CLI.</p><p>This solved our device problem, but we ran into another one — Firebase Test Lab doesn’t allow you to run custom gradle commands. Instead, it expects you to upload a debug and a test apk, and it will run the tests for you. This meant we could no longer use Shot for taking screenshots and comparing them 😦</p><p>While scratching our heads over how to overcome this problem, we found that Firebase Test Lab <a href=\"https://firebase.google.com/docs/test-lab/android/test-screenshots\" rel=\"noopener\">allows you</a> to take screenshots through a library and then retrieve them from Google Cloud Bucket.</p><p>There is also a <a href=\"https://github.com/runningcode/fladle/\" rel=\"noopener\">gradle plugin</a> which automates this process including downloading artifacts from GCP — open source to the rescue again!</p><p>Here’s how our test case looks like with Firebase screenshot library:</p><!--kg-card-begin: html--><script src=\"https://gist.github.com/jitinsharma/971c95389af0ae11b38f392076dc6df8.js\"></script><!--kg-card-end: html--><p>For image comparison we used <a href=\"https://imagemagick.org/\" rel=\"noopener\">ImageMagick</a>, a very popular and feature-packed CLI tool for image manipulation. It also allows us to output a different image in case two images don’t match, which is super useful for generating test failure reports.</p><h1 id=\"the-final-piece-integrating-screenshot-tests-into-our-developer-workflow\">The final piece — integrating screenshot tests into our developer workflow</h1><p>As part of CI, we do the following things when a merge request is raised:</p><blockquote><em><em>- Build the project</em></em></blockquote><blockquote><em><em>- Run Espresso Tests on Firebase Test Lab</em></em></blockquote><blockquote><em><em>- Retrieve screenshots and compare them with master set</em></em></blockquote><blockquote><em><em>- If any screenshot doesn’t match, we fail the build and add a comment to PR using <a href=\"https://danger.systems/\" rel=\"noopener\">Danger</a></em></em></blockquote><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1970/1*D6gb_yARAM4n83umso03Xw.png\" class=\"kg-image\"><figcaption>Danger reporting mismatch in screenshot along with diff image.</figcaption></figure><p>We have been using this setup for some time now, and it’s worked out great for us! We have been able to execute multiple UI refactors with high confidence.</p><h1 id=\"what-s-next\">What’s next?</h1><p>We will continue to invest in this setup in the future. Things like testing localisation, having a test matrix with multiple screen sizes, API levels, device densities… these are some things we have planned for the future.</p><p>A big thank you to the open source libraries that helped us achieve this!</p><hr><p>Liked what you read? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a> and we’ll send you weekly updates about our stories! 🖖</p>","url":"https://gojek-ghost.zysk.in/screenshot-testing-our-design-system-on-android/","canonical_url":null,"uuid":"4a57a774-789f-4e2c-ac66-c0896c460a22","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca3d7aa22c4066f83b6c","reading_time":5}},{"node":{"id":"Ghost__Post__5ec2ca657aa22c4066f83b70","title":"How We Hire Designers at Gojek","slug":"how-we-hire-designers-at-gojek","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_ioAAVVGoP9Ib1_l7wFS33g.jpeg","excerpt":"Want to be part of Gojek’s design team? Here’s what you need to know before applying.","custom_excerpt":"Want to be part of Gojek’s design team? Here’s what you need to know before applying.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"27 September, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T23:18:21.000+05:30","published_at":"2019-09-27T09:30:00.000+05:30","updated_at":"2020-05-18T23:47:13.000+05:30","meta_title":null,"meta_description":"Want to be part of Gojek’s design team? Here’s what you need to know before applying.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Claudia Salim\n\nBeing part of Gojek’s Design team is an experience that is at once challenging\nand rewarding. The goal: Create a cohesive visual language for a #SuperApp that\ndoes everything, and help millions understand the brand and its identity.\n\nThe objective of this post is to help aspiring designers who want to join us in\naccomplishing this mission understand our hiring process better.\n\n> But first, allow us a round of introductions.\nWe are a group of about 100 people, spread across two countries; Indonesia\n(Jakarta) and India (Bangalore). and five teams — Communication Design, Writing,\nDesign Operations, Interaction Design, and Product Design.\n\nWe work very closely with different functions and products in the organisation,\nand go to great lengths to make sure we deliver a world-class experience to our\nusers.\n\n> Now that you have some context, let’s get down to business.\nA glimpse from a Product Design case studyOur hiring process consists of\nmultiple steps:\n\n1. Connect with recruiters\nOne of many things our Design Operations team puts focus on is hiring. We have\ntwo channels for applications that you can connect with: our website careers\npage [https://www.gojek.io/all-open-positions?d=design]. We receive a number of\napplications every day, and the ones that catch our attention are the ones that\nprovide a structured portfolio and display a strong motivation to join us. It\nusually takes 48 hours for us to analyse your profile and get back to you.\n\n2. A friendly telephonic conversation\nIf we like what we see on your profile, we will invite you for a 15–30 minute\nphone call with one of our recruiters. This will revolve around the Design Team\nitself, the opportunity we have available, and our expectation of the role.\nHowever, do remember this conversation goes both ways. Besides learning about\nyou and your design experiences, we’d love to hear about your aspirations, and\nthe expectations you have of us.\n\n3. Portfolio review\nThis is why having a solid portfolio is paramount. We involve 4–5 of our\ndesigners to review it, based on the attributes that we prioritise. This is an\nimportant stage, so please make sure you build a structured and detailed\nportfolio that highlights your approach to arrive at your eventual design. Don’t\nforget to enclose your designs which are live in production! You can usually\nexpect a response from us within three days in most cases.\n\n4. Portfolio call\nSeeing the designs is one thing, but understanding the thought process behind it\nis equally important to us. To understand this better, we set up a 60 minute\ncall with 5 of our designers, during the course of which you can take us through\nyour portfolio. Do pick one or two of your most interesting projects. Your\nthinking process and problem-solving capability should be the focus, along with\nhow you measure your design results and the impact it brings.\n\n5. Solving a problem with the Gojek Design Team in a collaborative environment\nIf you pass the portfolio call with a positive result, you will be invited to\nthe Gojek office for a three-hour collaborative problem-solving session.\n\nThis process allows us to give you more context on how we solve problems. For\nus, the only way to evaluate how good a designer you are is by doing an exercise\ntogether. Gojek style — case study session!\n\nA brainstorming session with Gojek Design panels.The onsite case study session\nconsists of a mini design sprint and brainstorming time.\n\n> Don’t let all this stress you out though, we are not expecting absolute\nperfection here.\nThe idea is to collaborate and solve a problem together. Focus on the problem,\nnot the solution. Drawing a wireframe is easy, but what is the solution and how\nyou approach it is more important to us. Believe in yourself, there are no\nuniversal truths here.\n\nProblem-solving in the onsite case study session.6. Bar raiser\nIf you’ve reached this stage, you definitely have the skills. Now, it’s time to\nevaluate how well you fit in at Gojek in general. To evaluate this, you’ll meet\nour Head of Design. Now that you have gained context from our technical rounds,\nwe will discuss your expectation from us once again.\n\n> Also, as always, feel free to ask questions. 🙂\nThis is our last interview round, so take a breather. We will usually let you\nknow the result in one day. If all goes according to plan, this entire process\nshould be completed within two to three weeks. The last step will involve us\nmaking an offer — which means we are ready to have you on the team.\nCongratulations! 🙌 💚\n\nSo, do we sound like the kind of team you’d like to be a part of? Build your\nportfolio and apply to our open positions!\n\nFollow our work Instagram [https://www.instagram.com/designatgojek/?hl=en] and \nTwitter [https://twitter.com/gojekdesign?lang=en], and read more about how we\nsolve design challenges for Gojek in this blog’s Design section\n[https://blog.gojekengineering.com/design/home].\n\n\n--------------------------------------------------------------------------------\n\nFor more stories like this delivered to your inbox. Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Claudia Salim</p><p>Being part of Gojek’s Design team is an experience that is at once challenging and rewarding. The goal: Create a cohesive visual language for a #SuperApp that does everything, and help millions understand the brand and its identity.</p><p>The objective of this post is to help aspiring designers who want to join us in accomplishing this mission understand our hiring process better.</p><blockquote>But first, allow us a round of introductions.</blockquote><p>We are a group of about 100 people, spread across two countries; Indonesia (Jakarta) and India (Bangalore). and five teams — Communication Design, Writing, Design Operations, Interaction Design, and Product Design.</p><p>We work very closely with different functions and products in the organisation, and go to great lengths to make sure we deliver a world-class experience to our users.</p><blockquote><em><em>Now that you have some context, let’s get down to business.</em></em></blockquote><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1400/0*n-5IMq-CitcQb8NX.png\" class=\"kg-image\"><figcaption>A glimpse from a Product Design case study</figcaption></figure><p>Our hiring process consists of multiple steps:</p><h1 id=\"1-connect-with-recruiters\"><strong>1. Connect with recruiters</strong></h1><p>One of many things our Design Operations team puts focus on is hiring. We have two channels for applications that you can connect with: <a href=\"https://www.gojek.io/all-open-positions?d=design\" rel=\"noopener\">our website careers page</a>. We receive a number of applications every day, and the ones that catch our attention are the ones that provide a structured portfolio and display a strong motivation to join us. It usually takes 48 hours for us to analyse your profile and get back to you.</p><h1 id=\"2-a-friendly-telephonic-conversation\"><strong>2. A friendly telephonic conversation</strong></h1><p>If we like what we see on your profile, we will invite you for a 15–30 minute phone call with one of our recruiters. This will revolve around the Design Team itself, the opportunity we have available, and our expectation of the role. However, do remember this conversation goes both ways. Besides learning about you and your design experiences, we’d love to hear about your aspirations, and the expectations you have of us.</p><h1 id=\"3-portfolio-review\"><strong>3. Portfolio review</strong></h1><p>This is why having a solid portfolio is paramount. We involve 4–5 of our designers to review it, based on the attributes that we prioritise. This is an important stage, so please make sure you build a structured and detailed portfolio that highlights your approach to arrive at your eventual design. Don’t forget to enclose your designs which are live in production! You can usually expect a response from us within three days in most cases.</p><h1 id=\"4-portfolio-call\"><strong>4. Portfolio call</strong></h1><p>Seeing the designs is one thing, but understanding the thought process behind it is equally important to us. To understand this better, we set up a 60 minute call with 5 of our designers, during the course of which you can take us through your portfolio. <strong><strong>Do pick one or two of your most interesting projects.</strong></strong> Your thinking process and problem-solving capability should be the focus, along with how you measure your design results and the impact it brings.</p><h1 id=\"5-solving-a-problem-with-the-gojek-design-team-in-a-collaborative-environment\"><strong>5. Solving a problem with the Gojek Design Team in a collaborative environment</strong></h1><p>If you pass the portfolio call with a positive result, you will be invited to the Gojek office for a three-hour collaborative problem-solving session.</p><p>This process allows us to give you more context on how we solve problems. For us, the only way to evaluate how good a designer you are is by doing an exercise together. Gojek style — case study session!</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1400/0*xwFfEziJIkWhxpSd.png\" class=\"kg-image\"><figcaption>A brainstorming session with Gojek Design panels.</figcaption></figure><p>The onsite case study session consists of a mini design sprint and brainstorming time.</p><blockquote>Don’t let all this stress you out though, we are not expecting absolute perfection here.</blockquote><p>The idea is to collaborate and solve a problem together. Focus on the problem, not the solution. Drawing a wireframe is easy, but what is the solution and how you approach it is more important to us. Believe in yourself, there are no universal truths here.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1400/1*CxdmTOUmCNR57DLhiZHpcQ.png\" class=\"kg-image\"><figcaption>Problem-solving in the onsite case study session.</figcaption></figure><h1 id=\"6-bar-raiser\"><strong>6. Bar raiser</strong></h1><p>If you’ve reached this stage, you definitely have the skills. Now, it’s time to evaluate how well you fit in at Gojek in general. To evaluate this, you’ll meet our Head of Design. Now that you have gained context from our technical rounds, we will discuss your expectation from us once again.</p><blockquote><em><em>Also, as always, feel free to ask questions.<em> 🙂</em></em></em></blockquote><p>This is our last interview round, so take a breather. We will usually let you know the result in one day. If all goes according to plan, this entire process should be completed within two to three weeks. The last step will involve us making an offer — which means we are ready to have you on the team. Congratulations! 🙌 💚</p><p>So, do we sound like the kind of team you’d like to be a part of? Build your portfolio and apply to our open positions!</p><p>Follow our work <a href=\"https://www.instagram.com/designatgojek/?hl=en\" rel=\"noopener\">Instagram</a> and <a href=\"https://twitter.com/gojekdesign?lang=en\" rel=\"noopener\">Twitter</a>, and read more about how we solve design challenges for Gojek in this blog’s <a href=\"https://blog.gojekengineering.com/design/home\" rel=\"noopener\">Design section</a>.</p><hr><p>For more stories like this delivered to your inbox. <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/how-we-hire-designers-at-gojek/","canonical_url":null,"uuid":"fba0ce85-ae07-46f4-b628-80c33dfee8a5","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca657aa22c4066f83b70","reading_time":4}},{"node":{"id":"Ghost__Post__5eb11d87f7c7da001effccc0","title":"A Tale of Two Designs","slug":"a-tale-of-two-designs","featured":false,"feature_image":"https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/3.gif","excerpt":"A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 3 of 3) Back to the drawing board.","custom_excerpt":"A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 3 of 3) Back to the drawing board.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"16 May, 2019","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T13:32:15.000+05:30","published_at":"2019-05-16T09:30:00.000+05:30","updated_at":"2020-05-12T11:54:33.000+05:30","meta_title":"A Tale of Two Desings","meta_description":"A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 3 of 3) Back to the drawing board.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Fatema Raja\n\nThis is the final part of a three-part series documenting the redesign of\nGoFood’s Checkout experience.\n\nThe story so far: The GoFood redesign started by showing some much needed love\nto the ‘Checkout’ flow (read about the problems in part 1\n[http://bit.ly/2U8mm7s] of this series). We moved from an overwhelming single\npage with too much information, to a more intuitive two-step design with a hope\nthat the new design will help our users navigate the flow better (detailed in \npart two [http://bit.ly/2FUiYDo]).\n\nWe rolled out the design to beta on August 12, 2018.\n\nThis is what our redesigned flow looked like?\n\nOne week later:\nA 10% drop in our orders!!?\n\nThat… did not go according to plan. ?\n\nBut here’s the fun part: The app worked, and the bookings went through. No major\nout-of-whack tech issues. Yet, there we were, steadily losing orders.\n\nBugs? No.\n\nServer issues? Nope.\n\nDowntime, then? Nuh-uh.\n\nAfter many such questions and no answer, we were left with just one conclusion.\n?\n\nThe design change had made things worse.\n\nJust when I thought my job was done, I realised it was only the beginning. For I\nknew, no solution was good enough until users were successfully using it.\n\nStrap in, we’re in the Endgame now ?\nPrior to launch, we had rallied the team around a common definition of success —\none that was quantifiable and easily measured. 10% drop in our orders did seem\ntragic, but we knew looking at a single metric wasn’t going to give us the full\nstory.\n\nHence along with defining success metrics for our overall conversions, we also\ndefined and tracked metrics for the smaller tasks, tasks that led the user to\nthe final goal. This helped us monitor whether users were navigating through the\nflow as intended. As a designer it was important to not restrict myself to just\nwireframes and workflows, but participate and know these numbers inside out.\n\n“Designers who are involved in setting success metrics are far better at driving\nimpact than designers who are not”\n\n— Julie Zhuo\n\nFocusing on post launch productivity ?\nWhen the overall booking rate dropped, we started digging deeper to find where\nthe frictions were in the flow. We started sifting through the finer details and\nclosely analysed the smaller tasks, the results were a bit surprising.\n\n * By moving the location card to the top, our cancellation rate for wrong\n   address selected dropped by 2% —First win☝️\n * There was no significant drop in the notes or dishes added to the cart. Much\n   to our relief, the new interface was intuitive, users were able to locate the\n   notes button and other dish details— Second win ✌️\n * Similar affirmative results with our payments and location card designs too — \n   More wins! ?\n * But, there was one issue. Most users who abandoned the flow, left it on the\n   first step itself. Which meant nearly 8% of users did not even land on the\n   second step of the redesigned flow — Big Loss ?\n\nOur sanest conclusion was to wait, and give our users some time to get a hang of\nthe new designs. After all, old habits die hard. Thousands of our users who were\npreviously used to a single step now had to break a solid habit.\n\nYes, the old design was unacceptable (well, in the designer world at least ?).\nThe new design — despite featuring enhanced UX — broke some habits for our\nusers.\n\nA week passed… then two…\n\nNothing changed. ️\n\nAfter shuffling through tons of data, we found ourselves with a bunch of\nquestions. Who were the users who abandoned their food at checkout? What were\nthey thinking? Why would they do this?\n\nTo get these answered we coupled our quantitative data with some qualitative\nresearch — below are some crude user thoughts ?\n\nThere were two major problems:\n\n 1. Previously used to a single step, users weren’t prepared for a step 2.\n\n2. Most users added only 1–2 dishes, and for them the blank white space meant\nloading. Resulting in high uncertainty and agitation ?\n\nHence, most of them were reluctant to click on NEXT with the fear of placing the\norder — without them knowing the payment method or location ?\n\nWe were evidently drowning, but before we called for the lifebuoy, we tried to\nswim up ourselves. Not ready to give up on our precious designs, we decided to\nbring down the uncertainty by changing the copy on the button to Proceed To Pay.\nWe hoped this would nudge users to realise there is a step 2 containing payment\ninformation.\n\n\nThe Hail Mary play.Did it work? Did the uncertainty drop?\n\nMuch to our despair…nothing changed, no major impact. Neither were we able to\nbring down the booking time, nor were we able to increase the conversion rate.\nNot even close to what we anticipated.\n\nMurder your darlings ??\nWe had to be more open minded. If most of our users seemed unhappy with the\ndesign. we simply had to change it, Period ✋. It was time to hit the dashboards,\nanalyse the problems, and form new ideas for improvements. With the growing\nnumbers, one thing was clear, users wanted to bring back the single page.\n\nFor our final solution we shifted from logic to emotion, focusing more on user’s\nthoughts and feelings at the time of ordering.\n\nI asked myself, if I were a user and I had to know three things about my order,\nwhat would those be? ? — Card sorting came in super handy\n\n * Location Card — I want my food to come to me. I am hungry and the last thing\n   I want is my food going to someone else ?. With a drop in the cancellation\n   rate forwrong address selected, we knew retaining location card at the top\n   worked like magic.\n * Dish Card — If I am craving for a pizza, I better order the right pizza. \n   Right below the location card was the dish card, helping users easily double\n   check the dishes they added ?\n * Total amount and mode of payment — Once I get my pizza, I don’t want to run\n   around looking for cash. By sticking the total amount and payment method with\n   the order button at bottom of the screen, we saved our users a long scroll.\n   This also created a neat space to surface discounts and savings ?\n\nThe final design was a single page with all three important fields (location,\ndish and payment) above the fold and easily accessible. An example of how it\nworked ?\n\nThese lightweight and progressive changes, helped our users cultivate new habits\nslowly and steadily, making the redesign bearable for them ?\n\nShipping — Climbing back onto the boat ?‍♀️\nWe were finally ready to roll, no leap of faith this time!\n\nOn September 5, 2018. We rolled out our final solution to ~50k users, without\nrolling back any of the previous designs. We now had three designs live with\nthree different user groups.\n\n * Group 1 — Control Group (users with existing designs i.e. long scroll)\n * Group 2 — Two-step checkout redesign\n * Group 3 — Single step redesign\n\nSuch a meaty chance to dissect and compare quantitative results. ? It helped me\nstudy and analyse the impact of all three designs against each other.\n\nA day passed…\n\nThen two…\n\nThen a week or three later\n\nWe checked the data, ran the numbers, and validated our original hypothesis.\n\nIt had worked ?\n\nThe simplified single page was stabilising the order graph. Soon, our booking\nrate was moving north (obviously not in a dramatic way), but it had gone up by\n~5% and we saw a significant drop in the booking time.\n\n\nThese lightweight and progressive changes, helped our users cultivate new habits\nslowly and steadily, making the redesign bearable for them ?\n\nShipping — Climbing back onto the boat ?‍♀️\nWe were finally ready to roll, no leap of faith this time!\n\nOn September 5, 2018. We rolled out our final solution to ~50k users, without\nrolling back any of the previous designs. We now had three designs live with\nthree different user groups.\n\n * Group 1 — Control Group (users with existing designs i.e. long scroll)\n * Group 2 — Two-step checkout redesign\n * Group 3 — Single step redesign\n\nSuch a meaty chance to dissect and compare quantitative results. ? It helped me\nstudy and analyse the impact of all three designs against each other.\n\nA day passed…\n\nThen two…\n\nThen a week or three later\n\nWe checked the data, ran the numbers, and validated our original hypothesis.\n\nIt had worked ?\n\nThe simplified single page was stabilising the order graph. Soon, our booking\nrate was moving north (obviously not in a dramatic way), but it had gone up by\n~5% and we saw a significant drop in the booking time.\n\nAfter enough validation, we incrementally rolled back the previous designs and\nmoved all our users to the new designs one group at a time. And finally, the\nfirst piece of the GoFood redesign pie, was baked to perfection. The sweet taste\nof success! (We like food puns, it can’t be helped! ??‍♀️)\n\nOne part was over, designs were done!\n\nOr were they?\n\nGoFood is a fast-growing product, either adding features or enhancing current\nexperience. Not a lot of time had passed after the design rollout, that the team\ndecides to up-sell dishes on the checkout screen. It is interesting how (Sajesh\nJose\n[https://medium.com/u/b1f28485b3fa?source=post_page-----8c6a57fbfe05----------------------] \nand Sugam Anand\n[https://medium.com/u/1414f939f610?source=post_page-----8c6a57fbfe05----------------------]\n) are trying to fit yet another component on the checkout screen, here’s a\nglimpse?\n\nDesign is a journey, not a destination ❤️\n\nThe idea is to keep measuring, learning and evolving, whether it is adding a\nfeature or enhancing the current experience.\n\nDesign is in fact a continuous feedback loop that cajoles you into believing\nthere’s such a thing as product perfection.\n\nThis series was a way to disseminate my most important learnings from the GoFood\nredesign. I’ll leave you with a few key lessons learnt along the way:\n\nIf you fail: question it and fix it.\n\nIf you succeed: question it still, and make it better.\n\nIterate. Release. Validate. Repeat.\n\nFin.\n\n\n--------------------------------------------------------------------------------\n\n(Special shoutout to Debayan Sen\n[https://medium.com/u/65fccde63fdf?source=post_page-----8c6a57fbfe05----------------------]\n, Parveen Suhag\n[https://medium.com/u/29aa9cd53075?source=post_page-----8c6a57fbfe05----------------------] \nand @geppegalih\n[https://medium.com/u/6549243f2318?source=post_page-----8c6a57fbfe05----------------------]\n).","html":"<p>By Fatema Raja</p><p>This is the final part of a three-part series documenting the redesign of GoFood’s Checkout experience.</p><p><strong><strong>The story so far:</strong></strong> The GoFood redesign started by showing some much needed love to the ‘Checkout’ flow (read about the problems in <a href=\"http://bit.ly/2U8mm7s\" rel=\"noopener\">part 1</a> of this series). We moved from an overwhelming single page with too much information, to a more intuitive two-step design with a hope that the new design will help our users navigate the flow better (detailed in <a href=\"http://bit.ly/2FUiYDo\" rel=\"noopener\">part two</a>).</p><p>We rolled out the design to beta on August 12, 2018.</p><p><strong><strong>This is what our redesigned flow looked like?</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1434/1*wC6FYnnJilFxFkYwab1kLw.png\" class=\"kg-image\"></figure><h2 id=\"one-week-later-\">One week later:</h2><p>A 10% drop in our orders!!?</p><p>That… did not go according to plan. ?</p><p>But here’s the fun part: <strong><strong>The app worked, and the bookings went through.</strong></strong> No major out-of-whack tech issues. Yet, there we were, steadily losing orders.</p><p><em><em>Bugs? No.</em></em></p><p><em><em>Server issues? Nope.</em></em></p><p><em><em>Downtime, then? Nuh-uh.</em></em></p><p>After many such questions and no answer, we were left with just one conclusion. ?</p><p><strong><strong>The design change had made things worse.</strong></strong></p><p>Just when I thought my job was done, I realised it was only the beginning. For I knew, no solution was good enough until users were <strong><strong><em><em>successfully</em></em> </strong></strong>using it.</p><h1 id=\"strap-in-we-re-in-the-endgame-now-\">Strap in, we’re in the Endgame now ?</h1><p>Prior to launch, we had rallied the team around a common definition of success — one that was quantifiable and easily measured. 10% drop in our orders did seem tragic, but we knew looking at a single metric wasn’t going to give us the full story.</p><p>Hence along with defining success metrics for our overall conversions, we also defined and tracked metrics for the smaller tasks, tasks that led the user to the final goal. This helped us monitor whether users were navigating through the flow as intended. As a designer it was important to not restrict myself to just wireframes and workflows, but participate and know these numbers inside out.</p><p>“Designers who are involved in setting success metrics are far better at driving impact than designers who are not”</p><p>— Julie Zhuo</p><h1 id=\"focusing-on-post-launch-productivity-\">Focusing on post launch productivity ?</h1><p>When the overall booking rate dropped, we started digging deeper to find where the frictions were in the flow. We started sifting through the finer details and closely analysed the smaller tasks, the results were a bit surprising.</p><ul><li>By moving the location card to the top, our cancellation rate for <code>wrong address selected</code> dropped by 2% —<strong><strong>First win</strong></strong>☝️</li><li>There was no significant drop in the notes or dishes added to the cart. Much to our relief, the new interface was intuitive, users were able to locate the notes button and other dish details— <strong><strong>Second win</strong></strong> ✌️</li><li>Similar affirmative results with our payments and location card designs too — <strong><strong>More wins! ?</strong></strong></li><li>But, there was one issue. Most users who abandoned the flow, left it on the first step itself. Which meant nearly 8% of users did not even land on the second step of the redesigned flow<strong><strong><em><em> — </em></em>Big Loss<em><em> </em></em>?</strong></strong></li></ul><p>Our sanest conclusion was to wait, and give our users some time to get a hang of the new designs. <strong><strong>After all, old habits die hard</strong></strong>. Thousands of our users who were previously used to a single step now had to break a solid habit.</p><p>Yes, the old design was unacceptable (well, in the designer world at least ?). The new design — despite featuring enhanced UX — broke some habits for our users.</p><p><strong><strong><em><em>A week passed… then two…</em></em></strong></strong></p><p>Nothing changed. ️</p><p>After shuffling through tons of data, we found ourselves with a bunch of questions. W<em><em>ho were the users who abandoned their food at checkout? What were they thinking? Why would they do this?</em></em></p><p>To get these answered we coupled our quantitative data with some qualitative research — below are some crude user thoughts ?</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3300/1*cv8FcC0pl0SQe4YkF8LHLQ.png\" class=\"kg-image\"></figure><p><strong><strong>There were two major problems:</strong></strong></p><ol><li>Previously used to a single step, users weren’t prepared for a step 2.</li></ol><p>2. Most users added only 1–2 dishes, and for them the blank white space meant loading. Resulting in high uncertainty and agitation ?</p><p>Hence, most of them were reluctant to click on <code>NEXT</code> with the fear of placing the order — without them knowing the payment method or location ?</p><p>We were evidently drowning, but before we called for the lifebuoy, we tried to swim up ourselves. Not ready to give up on our precious designs, we decided to bring down the uncertainty by changing the copy on the button to <code>Proceed To Pay</code>. We hoped this would nudge users to realise there is a step 2 containing payment information.<br></p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1275/1*2FPbepaD2x3qVwjjFlUM8g.png\" class=\"kg-image\"><figcaption>The Hail Mary play.</figcaption></figure><p><strong><strong><em><em>Did it work? Did the uncertainty drop?</em></em></strong></strong></p><p><strong><strong>Much to our despair…nothing changed, no major impact.</strong></strong> Neither were we able to bring down the booking time, nor were we able to increase the conversion rate. Not even close to what we anticipated.</p><h1 id=\"murder-your-darlings-\">Murder your darlings ??</h1><p>We had to be more open minded. If most of our users seemed unhappy with the design. we simply had to change it, Period ✋. It was time to hit the dashboards, analyse the problems, and form new ideas for improvements. With the growing numbers, one thing was clear, users wanted to <strong><strong>bring back the single page.</strong></strong></p><p>For our final solution we shifted from logic to emotion, focusing more on user’s thoughts and feelings at the time of ordering.</p><p>I asked myself, if I were a user and I had to know three things about my order, what would those be? ? — Card sorting came in super handy</p><ul><li><strong><strong>Location Card</strong></strong> — I want my food to come to me<strong><strong>. </strong></strong>I am hungry and the last thing I want is my food going to someone else ?. With a drop in the cancellation rate for<code>wrong address selected,</code> we knew retaining location card at the top worked like magic.</li><li><strong><strong>Dish Card — </strong></strong>If I am craving for a pizza, I better order the right pizza.<strong><strong> </strong></strong>Right below the location card was the<strong><strong> </strong></strong>dish card, helping users easily double check the dishes they added ?</li><li><strong><strong>Total amount and mode of payment — </strong></strong>Once I get my pizza, I don’t want to run around looking for cash. By sticking the total amount and payment method with the order button at bottom of the screen, we saved our users a long scroll. This also created a neat space to surface discounts and savings ?</li></ul><p><em><em><strong><strong>The final design was a single page with all three important fields (location, dish and payment) above the fold and easily accessible. An example of how it worked </strong></strong>?</em></em></p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/2808/1*P-Z4jTY31hMIs6FSqnLTmw.gif\" class=\"kg-image\"></figure><p>These lightweight and progressive changes, helped our users cultivate new habits slowly and steadily, making the redesign bearable for them ?</p><h1 id=\"shipping-climbing-back-onto-the-boat-\">Shipping — Climbing back onto the boat ?‍♀️</h1><p>We were finally ready to roll, no leap of faith this time!</p><p>On September 5, 2018. We rolled out our final solution to ~50k users, without rolling back any of the previous designs. We now had <strong><strong>three designs live </strong></strong>with three different user groups.</p><ul><li>Group 1 — Control Group (users with existing designs i.e. long scroll)</li><li>Group 2 — Two-step checkout redesign</li><li>Group 3 — Single step redesign</li></ul><p>Such a meaty chance to dissect and compare quantitative results. ? It helped me study and analyse the impact of all three designs against each other.</p><p><em><em>A day passed…</em></em></p><p><em><em>Then two…</em></em></p><p><em><em>Then a week or three later</em></em></p><p>We checked the data, ran the numbers, and validated our original hypothesis.</p><p>It had worked ?</p><p>The simplified single page was stabilising the order graph.<strong><strong> Soon, our booking rate was moving north (obviously not in a dramatic way), but it had gone up by ~5% and we saw a significant drop in the booking time.</strong></strong></p><p><br>These lightweight and progressive changes, helped our users cultivate new habits slowly and steadily, making the redesign bearable for them ?</p><h1 id=\"shipping-climbing-back-onto-the-boat--1\">Shipping — Climbing back onto the boat ?‍♀️</h1><p>We were finally ready to roll, no leap of faith this time!</p><p>On September 5, 2018. We rolled out our final solution to ~50k users, without rolling back any of the previous designs. We now had <strong><strong>three designs live </strong></strong>with three different user groups.</p><ul><li>Group 1 — Control Group (users with existing designs i.e. long scroll)</li><li>Group 2 — Two-step checkout redesign</li><li>Group 3 — Single step redesign</li></ul><p>Such a meaty chance to dissect and compare quantitative results. ? It helped me study and analyse the impact of all three designs against each other.</p><p><em><em>A day passed…</em></em></p><p><em><em>Then two…</em></em></p><p><em><em>Then a week or three later</em></em></p><p>We checked the data, ran the numbers, and validated our original hypothesis.</p><p>It had worked ?</p><p>The simplified single page was stabilising the order graph.<strong><strong> Soon, our booking rate was moving north (obviously not in a dramatic way), but it had gone up by ~5% and we saw a significant drop in the booking time.</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1233/1*jkIWit9XBQlFoqCjZEn2OA.png\" class=\"kg-image\"></figure><p>After enough validation, we incrementally rolled back the previous designs and moved all our users to the new designs one group at a time. And finally, the first piece of the GoFood redesign pie, was baked to perfection. The sweet taste of success! (We like food puns, it can’t be helped! ??‍♀️)</p><p><strong><strong>One part was over, designs were done!</strong></strong></p><p><em><em>Or were they?</em></em></p><p>GoFood is a fast-growing product, either adding features or enhancing current experience. Not a lot of time had passed after the design rollout, that the team decides to up-sell dishes on the checkout screen. It is interesting how (<a href=\"https://medium.com/u/b1f28485b3fa?source=post_page-----8c6a57fbfe05----------------------\" rel=\"noopener\">Sajesh Jose</a> and <a href=\"https://medium.com/u/1414f939f610?source=post_page-----8c6a57fbfe05----------------------\" rel=\"noopener\">Sugam Anand</a>) are trying to fit yet another component on the checkout screen, here’s a glimpse?</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3137/1*y23YjUSmlBR0HNbU7sSPbg.png\" class=\"kg-image\"></figure><p>Design is a journey, not a destination ❤️</p><p>The idea is to keep measuring, learning and evolving, whether it is adding a feature or enhancing the current experience.</p><p>Design is in fact a continuous feedback loop that cajoles you into believing there’s such a thing as product perfection.</p><p>This series was a way to disseminate my most important learnings from the GoFood redesign. I’ll leave you with a few key lessons learnt along the way:</p><p><em><em>If you fail: question it and fix it.</em></em></p><p><em><em>If you succeed: question it still, and make it better.</em></em></p><p><strong><strong><em><em>Iterate. Release. Validate. Repeat.</em></em></strong></strong></p><p>Fin.</p><hr><p>(Special shoutout to <a href=\"https://medium.com/u/65fccde63fdf?source=post_page-----8c6a57fbfe05----------------------\" rel=\"noopener\">Debayan Sen</a>, <a href=\"https://medium.com/u/29aa9cd53075?source=post_page-----8c6a57fbfe05----------------------\" rel=\"noopener\">Parveen Suhag</a> and <a href=\"https://medium.com/u/6549243f2318?source=post_page-----8c6a57fbfe05----------------------\" rel=\"noopener\">@geppegalih</a>).</p>","url":"https://gojek-ghost.zysk.in/a-tale-of-two-designs/","canonical_url":null,"uuid":"7a9c1053-e3ca-402b-8187-1c7c7ede4c77","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb11d87f7c7da001effccc0","reading_time":7}}]},"storiesFeaturedPost":{"edges":[{"node":{"id":"Ghost__Post__5eb12b71f7c7da001effcdbe","title":"How Gojek Manages 1 million Drivers With 12 Engineers (Part 1)","slug":"how-gojek-manages-1-million-drivers-with-12-engineers-part-1","featured":true,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_0G01nMPD--K_MrKhhkurtw.jpg","excerpt":"The story of GOJEK’s first ever team, and consequently, the psyche of how 200 engineers run a Super App of 18+ products.","custom_excerpt":"The story of GOJEK’s first ever team, and consequently, the psyche of how 200 engineers run a Super App of 18+ products.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"24 May, 2018","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T14:31:37.000+05:30","published_at":"2018-05-24T09:30:00.000+05:30","updated_at":"2020-05-12T11:57:36.000+05:30","meta_title":null,"meta_description":"The story of GOJEK’s first ever team, and consequently, the psyche of how 200 engineers run a Super App of 18+ products.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Adithya Venkatesan\n\nIn Norse mythology, Yggdrasil is a gigantic mythical tree that connects the nine\nworlds of Norse cosmology. It’s a holy tree whose branches touch the heavens.\nThe gods hold court beneath Yggdrasil — debating the fates of other gods, men\nand monsters. It’s the tree of life and the centre of everything in Norse\nmythology. In GOJEK, think of the `Allocations` team as this eternal green ash\ntree. Our multiple products rely on this team to assign drivers to complete\norders.\n\nThe team cuts across products and services responsible for 1,000,000+ registered\ndrivers on our platform.\n\nAnd 12 engineers do this.\n\nA similar ride-sharing equivalent has 300-odd people solving the same problem\nand still does fewer bookings. But how do they do it? This is their story.\n\nOn planet Earth, problems galore\nWhen GOJEK started in 2010, it all began with a call centre. Customers would\ncall a number, the call centre would ‘allocate’ a driver after looking at an\nExcel sheet of drivers in the roster. Our CEO Nadiem Makarim was the first\nperson to test the app built for drivers and customers. As soon as a dummy order\nwas created and Nadiem got the first notification, GOJEK was open for business.\n\nAt its peak in 2014, GOJEK had 200 drivers. The 3-person engineering team had a\nbasic stop-gap model of matchmaking between a driver and a customer. This\ncodebase had to be reworked to match scale. The new matchmaking codebase was\nbuilt in two days and could handle about 700 drivers. It was all manual and\nsomething had to be done to automate\n[https://blog.gojekengineering.com/how-we-do-what-we-do-at-go-jek-tech-d1d5d952e13] \nthe whole process.\n\nIn the beginning of 2015, a version of the app was launched to keep pace with\nincreasing demand. GO-RIDE, GO-FOOD and GO-SEND went live. Customers would ‘bid’\nfor a driver, drivers would get a notification, accept a drive and voila, we’re\ngood to go. This was the birth of the ‘bid engine’ — a classic matchmaker\nbetween supply and demand: Driver and Customer. It would form the genesis on\nwhich GOJEK was going to be built. The problem: siloed boxes.\n\nThere were a total of three products with the same underlying infrastructure,\nbut no interconnectedness. THAT was a problem that shouldn’t exist when success\ndepends on deeper linkage between all teams. This problem is further pronounced\nwhen you realise all three teams were working on the same infrastructure.\n\nImportantly, GOJEK simply wasn’t prepared to handle the kind of adoption and\ngrowth the company began to witness as soon as the app was launched.\n\nThe algorithm started to crumble. The engineering was pretty straightforward\nwith 10–15 lines of code, and solved problems for a small set of data. As the\ndrivers increased, downtimes became a routine affair. There were way too many\nbottlenecks. GOJEK was failing, and fast.\n\nSoon, Sequoia had mutual investment portfolios and unlocked some doors. Sidu\nPonnappa, our current India Head, then the CEO of CodeMonk, travelled to\nIndonesia to pick between three of Sequoia’s companies. The team’s ultimate\ndecision to work with GOJEK is not entirely surprising because it was bigger,\nlarger than anything they had witnessed in India. The market was ripe for the\ntaking. Read his telling tale from his first visit to Indonesia here.\n[https://blog.gojekengineering.com/my-go-jek-story-af5f1925bfe]\n\nIn no time, Nadiem acquired CodeMonk. But before that, our current CTO, Niranjan\nParanjappe was being poached. ? The team stood together. It was all, or none.\n\nAnd Nadiem wanted all. The deal was closed in a small tea shop between Sidu,\nNiranjan, Nadiem, Ajey and Kevin. Overnight, GOJEK had one of India’s best\nconsulting firms in its arsenal. The task for the engineering team: Work on the\nbidding engine. No more downtimes.\n\nIt’s the 0’s and 1’s\nThe old codebase was written in Java. It’s a programming language that belonged\nto the Internet age. But not for a startup in 2015 that was exploding in demand\nand imploding with a lack of resources and engineering wherewithal. Why Java?\nBecause, the classic Golden Hammer Anti-Pattern:\n\n“If all you have is a hammer, everything looks like a nail.” And hence, ‘I know\nJava, so Java is the best.’\n\nNiranjan Paranjape\n[https://medium.com/u/689ebe477c46?source=post_page-----978af9ccfd32----------------------]\n, our now CTO (Ajey Gore\n[https://medium.com/u/bb9ef62c7bae?source=post_page-----978af9ccfd32----------------------] \nis our Group CTO), plugged in the hard drive and checked the code. As soon as he\nopened the README file, the first line was mvn install -DskipTest\n\nThe code had *never* been tested.\n\nIn other words, the code was live without ever passing a single quality check.\nThe old codebase was called Stan Marsh\n[https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf]. For the\nuninitiated, Stan Marsh is a character from South Park, and if you watch the\nshow, you’d get the obvious reference to the famous line:\n\n> “Dude, this is pretty f****d up right here.”\nAnd thus it came to be. Stan Marsh was the legacy code on which GOJEK was going\nto be built. Because there was no test harness, it was difficult to understand\nwhich portion of the app was working, and which wasn’t. Considering the app was\nlive, no one wanted to touch a ticking time bomb. It was… sorry, is… very much\npart of engineering folklore. (More on that later)\n\nAs urban legends go, Niranjan re-wrote the entire codebase in Golang, a language\nhe didn’t know. Three nights. A dozen Redbulls. Two dozen coffees. Golang could\nhandle concurrency, manage load; the kind GOJEK was witnessing. The mothership\nwas ready. Or so the team thought.\n\nIt wasn’t an easy decision to go with Golang. Not many knew the programming\nlanguage. But some risks are worth taking — and that defines good engineering\nfrom great. Luckily, this initial decision-making set the tone for the team;\nlearn, experiment, adapt, take responsibility or be disrupted. In a month,\nGOJEK’s driver count tripled. But… there were more problems to come. Bigger fish\nto fry.\n\nFor Part 2 of the story, please click here\n[https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-2-35f6a27a0faf]\n\n\n--------------------------------------------------------------------------------\n\nStory credits: Shobhit Srivastava\n[https://medium.com/u/e5f92a17704d?source=post_page-----978af9ccfd32----------------------]\n, Ranjeet Singh\n[https://medium.com/u/710d3b419a5a?source=post_page-----978af9ccfd32----------------------]\n, Mehakdeep Singh\n[https://medium.com/u/36ce12a82c52?source=post_page-----978af9ccfd32----------------------]\n, Bergas Bimo Branarto\n[https://medium.com/u/5cffcceadf08?source=post_page-----978af9ccfd32----------------------]","html":"<p>By Adithya Venkatesan</p><p>In Norse mythology, <em><em>Yggdrasil</em></em> is a gigantic mythical tree that connects the nine worlds of Norse cosmology. It’s a holy tree whose branches touch the heavens. The gods hold court beneath <em><em>Yggdrasil — </em></em>debating the fates of other gods, men and monsters. It’s the tree of life and the centre of everything in Norse mythology. In GOJEK, think of the <strong><strong><em><em>`Allocations` </em></em></strong></strong>team as this eternal green ash tree. Our multiple products rely on this team to assign drivers to complete orders.</p><p>The team cuts across products and services responsible for 1,000,000+ registered drivers on our platform.</p><p><strong>And 12 engineers do this.</strong></p><p>A similar ride-sharing equivalent has 300-odd people solving the same problem and still does fewer bookings. But how do they do it? This is their story.</p><h2 id=\"on-planet-earth-problems-galore\">On planet Earth, problems galore</h2><p>When GOJEK started in 2010, it all began with a call centre. Customers would call a number, the call centre would ‘allocate’ a driver after <em><em>looking at an Excel sheet of drivers</em></em> in the roster. Our CEO Nadiem Makarim was the first person to test the app built for drivers and customers. As soon as a dummy order was created and Nadiem got the first notification, GOJEK was open for business.</p><p>At its peak in 2014, GOJEK had 200 drivers. The 3-person engineering team had a basic stop-gap model of matchmaking between a driver and a customer. This codebase had to be reworked to match scale. The new matchmaking codebase was built in two days and could handle about 700 drivers. It was all manual and something had to be done to <a href=\"https://blog.gojekengineering.com/how-we-do-what-we-do-at-go-jek-tech-d1d5d952e13\" rel=\"noopener\">automate</a> the whole process.</p><p>In the beginning of 2015, a version of the app was launched to keep pace with increasing demand. GO-RIDE, GO-FOOD and GO-SEND went live. Customers would ‘bid’ for a driver, drivers would get a notification, accept a drive and voila, we’re good to go. This was the birth of the ‘<strong><strong>bid engine’ — a classic matchmaker between supply and demand:</strong></strong> Driver and Customer. <em><em>It would form the genesis on which GOJEK was going to be built</em></em>. The problem: siloed boxes.</p><p>There were a total of three products with the same underlying infrastructure, but no interconnectedness. THAT was a problem that shouldn’t exist when success depends on deeper linkage between all teams. This problem is further pronounced when you realise all three teams were working on the same infrastructure.</p><p><em><em>Importantly, GOJEK simply wasn’t prepared to handle the kind of adoption and growth the company began to witness as soon as the app was launched.</em></em></p><p>The algorithm started to crumble. The engineering was pretty straightforward with 10–15 lines of code, and solved problems for a small set of data. As the drivers increased, downtimes became a routine affair. There were way too many bottlenecks. <strong><strong>GOJEK was failing, and fast.</strong></strong></p><p>Soon, Sequoia had mutual investment portfolios and unlocked some doors. Sidu Ponnappa, our current India Head, then the CEO of CodeMonk, travelled to Indonesia to pick between three of Sequoia’s companies. The team’s ultimate decision to work with GOJEK is not entirely surprising because it was bigger, larger than anything they had witnessed in India. The market was ripe for the taking. Read his telling tale from his first visit to Indonesia <a href=\"https://blog.gojekengineering.com/my-go-jek-story-af5f1925bfe\" rel=\"noopener\">here.</a></p><p><em><em>In no time, Nadiem acquired CodeMonk. But before that, our current CTO, Niranjan Paranjappe was being poached. <em>? </em>The team stood together. It was all, or none.</em></em></p><p>And Nadiem wanted all. <strong><strong>The deal was closed in a small tea shop</strong></strong> between Sidu, Niranjan, Nadiem, Ajey and Kevin. Overnight, GOJEK had one of India’s best consulting firms in its arsenal. The task for the engineering team: Work on the bidding engine. No more downtimes.</p><h2 id=\"it-s-the-0-s-and-1-s\">It’s the 0’s and 1’s</h2><p>The old codebase was written in Java. It’s a programming language that belonged to the Internet age. But not for a startup in 2015 that was exploding in demand and imploding with a lack of resources and engineering wherewithal. Why Java? Because, the classic <strong><strong>Golden Hammer Anti-Pattern:</strong></strong></p><p><em><em>“If all you have is a hammer, everything looks like a nail.” And hence, ‘I know Java, so Java is the best.’</em></em></p><p><a href=\"https://medium.com/u/689ebe477c46?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Niranjan Paranjape</a>, our now CTO (<a href=\"https://medium.com/u/bb9ef62c7bae?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Ajey Gore</a> is our Group CTO), plugged in the hard drive and checked the code. As soon as he opened the README file, the first line was mvn install -DskipTest</p><p><strong><strong>The code had *<em><em>never</em></em>* been tested.</strong></strong></p><p>In other words, the code was live without ever passing a single quality check. The old codebase was called <a href=\"https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf\" rel=\"noopener\"><strong><strong>Stan Marsh</strong></strong></a><strong><strong>.</strong></strong> For the uninitiated, Stan Marsh is a character from South Park, and if you watch the show, you’d get the obvious reference to the famous line:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1600/1*Mk4tc6cfIHlC_f1CblNGNQ.jpeg\" class=\"kg-image\"></figure><blockquote><em><em>“Dude, this is pretty f****d up right here.”</em></em></blockquote><p>And thus it came to be. <strong><strong>Stan Marsh was the legacy code on which GOJEK was going to be built</strong></strong>. Because there was no test harness, it was difficult to understand which portion of the app was working, and which wasn’t. Considering the app was live, no one wanted to touch a ticking time bomb. It was… sorry, is… very much part of engineering folklore. (More on that later)</p><p>As urban legends go, Niranjan re-wrote the entire codebase in Golang, a language he didn’t know. Three nights. A dozen Redbulls. Two dozen coffees. Golang could handle concurrency, manage load; the kind GOJEK was witnessing. The mothership was ready. Or so the team thought.</p><p>It wasn’t an easy decision to go with Golang. Not many knew the programming language. But some risks are worth taking — and that defines good engineering from great. Luckily, this initial decision-making set the tone for the team; learn, experiment, adapt, take responsibility or be disrupted. In a month, GOJEK’s driver count tripled. But… there were more problems to come. Bigger fish to fry.</p><p>For Part 2 of the story, please click <a href=\"https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-2-35f6a27a0faf\" rel=\"noopener\">here</a></p><hr><p>Story credits: <a href=\"https://medium.com/u/e5f92a17704d?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Shobhit Srivastava</a>, <a href=\"https://medium.com/u/710d3b419a5a?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Ranjeet Singh</a>, <a href=\"https://medium.com/u/36ce12a82c52?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Mehakdeep Singh</a>, <a href=\"https://medium.com/u/5cffcceadf08?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Bergas Bimo Branarto</a></p>","url":"https://gojek-ghost.zysk.in/how-gojek-manages-1-million-drivers-with-12-engineers-part-1/","canonical_url":null,"uuid":"ba3d779e-27f2-41a6-ac1d-cd753222d7dd","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb12b71f7c7da001effcdbe","reading_time":4}}]},"storiesPosts":{"edges":[{"node":{"id":"Ghost__Post__5eb1066a5524cd001e7392a4","title":"Why We Swear by the RCA","slug":"why-we-swear-by-the-rca","featured":false,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_nOcToFzqvdWlHmOQ59v0sw.jpg","excerpt":"An account of how Gojek responds to production issues, and why the RCA is a critical part of the process.","custom_excerpt":"An account of how Gojek responds to production issues, and why the RCA is a critical part of the process.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"12 May, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T11:53:38.000+05:30","published_at":"2020-05-12T11:53:00.000+05:30","updated_at":"2020-05-12T11:53:20.000+05:30","meta_title":"Why We Swear by the RCA","meta_description":"An account of how Gojek responds to production issues, and why the RCA is a critical part of the process.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"When Gojek was still finding its feet, Fridays used to be a nightmare.\n\nJakarta, being the capital of the fourth most-populous country in the world, is\nhome to many people who work in the city and travel to their hometowns on\nweekends. Many of them rely on Gojek as their preferred first mile connectivity\noption — resulting in a traffic spike on our systems on Friday evening. In those\nearly days, this often triggered a system outage.\n\nEvery outage erodes the hard earned trust we build with our customers and driver\npartners.\n\nEnter the RCA\nWe knew we couldn’t fix the failures overnight, but we could learn from them.\nAfter all, so many of these mistakes were common and easily overlooked. So we\ndecided to embrace the ‘Root Cause Analysis’ (RCA). If something related to\nGojek’s Engineering division failed, the person(s) who attended the support call\nand had most context of what happened would prepare a document. This document\nwould contain a timeline, detail what went wrong, suggest corrective measures,\nand compile lessons learned.\n\nThis process ensured everyone across the organisation had visibility into what\nhappened. As a result, even unaffected teams cited in the RCA could analyse\ntheir systems to ensure the same problem would not happen to them. More\nimportantly, it provided a degree of accountability — and that’s important when\nyou have 20+ products.\n\nA post-mortem, and a prevention.\n\nThis post details what happens when a system failure happens at Gojek, and how\nit makes it way into an RCA.\n\n1. The What\nWhen something fails, it is important to understand the origin of the problem.\nEvery team in Gojek sets up alerts which monitor the state of their systems. If\na state change in the system causes a deviation from expected behaviour, an\nalerting service called pager duty automatically dials the phones of the people\nresponsible for that part of the system.\n\nHere’s an example:\n\nWhen a booking is created, we find a list of driver partners and send the order\ndetails to them, at which point they get a pop-up with trip details like\nestimated duration and approximate earnings. The idea is to give driver partners\nenough information to make the decision to accept the trip. But there was a\nproblem.\n\n2. The Why\nOne of the fields this prompt contains is a Booking ID, which is stored as an\ninteger (which, in technical speak, has a limit of 32 bits). Unfortunately for\nus, the ID generated exceeded this limit.\n\nWelcome to what we call Integer Overflow.\n\nAs a result of this, the driver app started crashing.\n\nHow bad can that be, you ask?\n\n3. The Fallout\nDrivers being unable to use the app means they can’t accept bookings. This means\ncustomers can’t book rides, send packages, get food, or use any service that\ndepends on our driver partners.\n\nAs a result, Gojek’s order numbers (or what we call ‘concurrence’, if you want\nto get all technical about it) plummeted. Pager duty is hit, and cell phones\nstart ringing off their proverbial hooks.\n\nWith driver partners stuck with malfunctioning apps, multiple Gojek services\nstart reporting errors. As customers try and figure out why the app is behaving\nthis way, engineers scramble to do the same.\n\n4. The Response\nWhen the phones ring, the team whose alerts have been triggered immediately get\nto work figuring out what happened. If they identify the problem quickly and\ndebug it, they notify other teams. The team then gets to work using information\nfrom the alerts and system dashboards to prepare an RCA.\n\nThis is, of course, the best case scenario.\n\nIf the concerned team cannot find a fix however, a war room is called.\n\nThe war room signifies a larger issue, and members of every available team drop\nwhat they’re doing and join the call. Sometimes, these are frantic Slack\ndiscussions and calls in the middle of the night. Other times, office boardrooms\nare blocked and everyone gathers to brainstorm collectively.\n\nDevs, Team Leads, Product Managers, all hands on deck.\n\nIn a war room scenario, whoever has most context on the situation takes charge\nand delegates tasks as required. This central person also plays a key role in\ndocumenting the happenings in the war room — how many people were present, which\nteams were represented, who was handling what, etc. All this information plays a\nkey role in the RCA. While this is going down, Driver and Customer Care centres\nare also notified, bracing for the inevitable flurry of complaints.\n\nThe fix may take the form of a few simple temporary hacks, or an hours long war\nroom — but in the end, there is always a fix.\n\nWords of appreciation from GoPay CEO Aldi Haryopratomo and Gojek CTO Ajey Gore\nAnd a sense of camaraderie ?\n\nOnce the dust settles, the investigation begins. The person who managed the war\nroom generally authors a document analysing what went wrong, using all the info\nfrom the alerts, dashboards, and firsthand accounts of the responders present.\nTypically every stakeholder in the organisation gets an email the next day with\ndetails of what went wrong — the RCA.\n\n5. The Learnings\n“Collaborate With Compassion”\n\nThese three words mean a lot at Gojek, and our RCAs reflect that. When you open\nan RCA mail, there is rarely even a mention of specific people, except to\nacknowledge those who responded to the distress call and played a role in\nfinding a fix. Call out the ones who made the effort, never the ones\nresponsible.\n\nMost RCAs instead dwell on relevant, actionable information. Information that\nwas being collected and monitored right from when the alert tripped:\n\nThe What: What was the problem?\n\nThe Why: Why did it happen?\n\nThe Fallout: Which services were affected, and for how long?\n\nThe Response: How was it fixed?\n\nThe Learnings: What can be done to avoid a repeat of this in future?\n\nThis simple process has helped us scale more safely and efficiently. It also\nallows for early identification of potential vulnerabilities in other systems.\nAs you may have noticed, there is no mention of who was responsible, no finger\npointing, no blame games. Collaborate with compassion.\n\nTo get a better sense of how we write RCAs at Gojek, read a sample RCA\n[https://docs.google.com/document/d/1r_PSsl7mBxbfAcibGTdFpnM5hm6ot82bF-_9VeV2J9w/edit?ts=5db7c330#heading=h.kreykp6cjau6]\n.\n\nIf you’d like to start a culture of RCAs as well, here’s our RCA template\n[https://docs.google.com/document/d/12Ims21IwFCNWi9MXcw2TVxPLB6YyWrIoTNaw3P-M_t4/edit]\n, courtesy GoPay CTO Ranjan Sakalley [https://twitter.com/rnjn], who also\noccasionally drops invaluable insights in the ‘Learnings’ section. ?\n\n\nRCAs have played an integral part in our journey to becoming a SuperApp.\nInvestigating, analysing, and documenting problems in production help us build\nbetter, more scalable systems, and tackle new problems in a mature manner\nwithout fear of retribution.\n\nThe days of weekly production issues are now a thing of the past. While we won’t\nbe so brash as to say we never have problems, embracing RCAs and a culture of\ncompassionate collaboration have helped us get to where we are today. ?\n\n\n--------------------------------------------------------------------------------\n\nWe’ll be writing about more interesting case studies on issues faced in\nproduction. Keep an eye on this blog, or subscribe to our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] for updates on our stories in\na neat little email.","html":"<p>When Gojek was still finding its feet, Fridays used to be a nightmare.</p><p>Jakarta, being the capital of the fourth most-populous country in the world, is home to many people who work in the city and travel to their hometowns on weekends. Many of them rely on Gojek as their preferred first mile connectivity option — resulting in a traffic spike on our systems on Friday evening. In those early days, this often triggered a system outage.</p><p><em><em>Every outage erodes the hard earned trust we build with our customers and driver partners.</em></em></p><h1 id=\"enter-the-rca\">Enter the RCA</h1><p>We knew we couldn’t fix the failures overnight, but we could learn from them. After all, so many of these mistakes were common and easily overlooked. So we decided to embrace the ‘Root Cause Analysis’ (RCA). If something related to Gojek’s Engineering division failed, the person(s) who attended the support call and had most context of what happened would prepare a document. This document would contain a timeline, detail what went wrong, suggest corrective measures, and compile lessons learned.</p><p>This process ensured everyone across the organisation had visibility into what happened. As a result, even unaffected teams cited in the RCA could analyse their systems to ensure the same problem would not happen to them. More importantly, it provided a degree of accountability — and that’s important when you have 20+ products.</p><p>A post-mortem, and a prevention.</p><p>This post details what happens when a system failure happens at Gojek, and how it makes it way into an RCA.</p><h2 id=\"1-the-what\">1. The What</h2><p>When something fails, it is important to understand the origin of the problem. Every team in Gojek sets up alerts which monitor the state of their systems. If a state change in the system causes a deviation from expected behaviour, an alerting service called <code>pager duty</code> automatically dials the phones of the people responsible for that part of the system.</p><p><strong><strong>Here’s an example:</strong></strong></p><p>When a booking is created, we find a list of driver partners and send the order details to them, at which point they get a pop-up with trip details like estimated duration and approximate earnings. The idea is to give driver partners enough information to make the decision to accept the trip. But there was a problem.</p><h2 id=\"2-the-why\">2. The Why</h2><p>One of the fields this prompt contains is a Booking ID, which is stored as an integer (which, in technical speak, has a limit of 32 bits). Unfortunately for us, the ID generated exceeded this limit.</p><p>Welcome to what we call Integer Overflow.</p><p>As a result of this, the driver app started crashing.</p><p><strong><strong><em><em>How bad can that be, you ask?</em></em></strong></strong></p><h2 id=\"3-the-fallout\">3. The Fallout</h2><p>Drivers being unable to use the app means they can’t accept bookings. This means customers can’t book rides, send packages, get food, or use any service that depends on our driver partners.</p><p>As a result, Gojek’s order numbers (or what we call ‘concurrence’, if you want to get all technical about it) plummeted. Pager duty is hit, and cell phones start ringing off their proverbial hooks.</p><p>With driver partners stuck with malfunctioning apps, multiple Gojek services start reporting errors. As customers try and figure out why the app is behaving this way, engineers scramble to do the same.</p><h2 id=\"4-the-response\">4. The Response</h2><p>When the phones ring, the team whose alerts have been triggered immediately get to work figuring out what happened. If they identify the problem quickly and debug it, they notify other teams. The team then gets to work using information from the alerts and system dashboards to prepare an RCA.</p><p><strong><strong>This is, of course, the best case scenario.</strong></strong></p><p>If the concerned team cannot find a fix however, a war room is called.</p><p>The war room signifies a larger issue, and members of every available team drop what they’re doing and join the call. Sometimes, these are frantic Slack discussions and calls in the middle of the night. Other times, office boardrooms are blocked and everyone gathers to brainstorm collectively.</p><p><em><em>Devs, Team Leads, Product Managers, all hands on deck.</em></em></p><p>In a war room scenario, whoever has most context on the situation takes charge and delegates tasks as required. This central person also plays a key role in documenting the happenings in the war room — <strong><strong>how many people were present, which teams were represented, who was handling what, etc.</strong></strong> <strong><strong>All this information plays a key role in the RCA.</strong></strong> While this is going down, Driver and Customer Care centres are also notified, bracing for the inevitable flurry of complaints.</p><p>The fix may take the form of a few simple temporary hacks, or an hours long war room — but in the end, there is always a fix.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1129/1*UFUYfO3Gw9tnKCiE1y40-Q.jpeg\" class=\"kg-image\"><figcaption>Words of appreciation from GoPay CEO Aldi Haryopratomo and Gojek CTO Ajey Gore</figcaption></figure><p><em><em>And a sense of camaraderie ?</em></em></p><p>Once the dust settles, the investigation begins. The person who managed the war room generally authors a document analysing what went wrong, using all the info from the alerts, dashboards, and firsthand accounts of the responders present. Typically every stakeholder in the organisation gets an email the next day with details of what went wrong — the RCA.</p><h2 id=\"5-the-learnings\">5. The Learnings</h2><p>“Collaborate With Compassion”</p><p>These three words mean a lot at Gojek, and our RCAs reflect that. When you open an RCA mail, there is rarely even a mention of specific people, except to acknowledge those who responded to the distress call and played a role in finding a fix. <strong><strong>Call out the ones who made the effort, never the ones responsible.</strong></strong></p><p>Most RCAs instead dwell on relevant, actionable information. Information that was being collected and monitored right from when the alert tripped:</p><p><em><em>The What: What was the problem?</em></em></p><p><em><em>The Why: Why did it happen?</em></em></p><p><em><em>The Fallout: Which services were affected, and for how long?</em></em></p><p><em><em>The Response: How was it fixed?</em></em></p><p><em><em>The Learnings: What can be done to avoid a repeat of this in future?</em></em></p><p>This simple process has helped us scale more safely and efficiently. It also allows for early identification of potential vulnerabilities in other systems. As you may have noticed, there is no mention of who was responsible, no finger pointing, no blame games. <em><em>Collaborate with compassion.</em></em></p><p>To get a better sense of how we write RCAs at Gojek, <a href=\"https://docs.google.com/document/d/1r_PSsl7mBxbfAcibGTdFpnM5hm6ot82bF-_9VeV2J9w/edit?ts=5db7c330#heading=h.kreykp6cjau6\" rel=\"noopener\"><strong><strong>read a sample RCA</strong></strong></a>.</p><p>If you’d like to start a culture of RCAs as well, <a href=\"https://docs.google.com/document/d/12Ims21IwFCNWi9MXcw2TVxPLB6YyWrIoTNaw3P-M_t4/edit\" rel=\"noopener\"><strong><strong>here’s our RCA template</strong></strong></a>, courtesy GoPay CTO <a href=\"https://twitter.com/rnjn\" rel=\"noopener\">Ranjan Sakalley</a>, who also occasionally drops invaluable insights in the ‘Learnings’ section. <strong><strong>?</strong></strong><br></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/480/1*2sosYEnk68lMaQTVjdZjWQ.jpeg\" class=\"kg-image\"></figure><p>RCAs have played an integral part in our journey to becoming a SuperApp. Investigating, analysing, and documenting problems in production help us build better, more scalable systems, and tackle new problems in a mature manner without fear of retribution.</p><p>The days of weekly production issues are now a thing of the past. While we won’t be so brash as to say we never have problems, embracing RCAs and a culture of compassionate collaboration have helped us get to where we are today. ?</p><hr><p>We’ll be writing about more interesting case studies on issues faced in production. Keep an eye on this blog, or <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">subscribe to our newsletter</a> for updates on our stories in a neat little email.</p>","url":"https://gojek-ghost.zysk.in/why-we-swear-by-the-rca/","canonical_url":null,"uuid":"ef04187f-7199-434a-8647-6dcd386043cd","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb1066a5524cd001e7392a4","reading_time":5}},{"node":{"id":"Ghost__Post__5ec2d7d17aa22c4066f83c9a","title":"The Road to a Merchant SuperApp","slug":"the-road-to-a-merchant-superapp","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1.gif","excerpt":"How we tried, failed, and tried again — to build a full-fledged platform for our merchant partners.","custom_excerpt":"How we tried, failed, and tried again — to build a full-fledged platform for our merchant partners.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"01 November, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-19T00:15:37.000+05:30","published_at":"2019-11-01T09:30:00.000+05:30","updated_at":"2020-05-19T00:23:10.000+05:30","meta_title":null,"meta_description":"How we tried, failed, and tried again — to build a full-fledged platform for our merchant partners.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Sooraj Rajmohan\n\nEarlier this year, during a visit to Gojek’s HQ in Jakarta, a few of us from the\nGojek Marketing team had a craving to try Indonesia’s famed fried delicacy — \npisang goreng.\n\nToday, fulfilling such food cravings is a simple process. GoFood — Gojek’s food\ndelivery product — lists 400,000+ merchants. You search for the outlet you want\nto order from, select the item and quantity, check out, and pay either via cash\nor Gojek’s digital wallet GoPay. Then, you sit back and watch the little Gojek\ndriver partner on the screen zoom their way to the restaurant, and bring you\nsome fried banana goodness. 😍\n\nSimple. Fast. Reliable.\n\n> Rewind a few years, and things didn’t look so good.\nFirst, some context\nWhen GoFood launched in 2015, expansion and adoption happened rapidly. The\norders started piling in, and we were struggling to keep up with demand.\nInitially, we’d simply list food merchants on our marketplace, send demand their\nway, and fulfil it through our fleet of driver partners.\n\nWe were building for our consumers and driver partners, but merchants were\nalways a key component of our ecosystem. If Gojek is an iceberg, the\nconsumer-facing Super App is the part above water. In this story, we’ll dive\nbeneath the surface to explore another key component — GoBiz, our merchant\nSuperApp.\n\n> But before GoBiz, there was GoResto.\nThe Merchant Problem\nIf we had ordered ourselves that pisang goreng in the early days of GoFood,\nthings would have worked very differently.\n\nYou see, merchants were onboarded by the GoFood team by uploading their menus to\nour systems. We’d look through these menus to find our fried banana of choice,\nand make an order, which would be relayed directly to a driver partner. This\npartner would then go to the restaurant and place the order (which is when the\nmerchant partner gets involved in the process).\n\nSo, while our bananas are fried, the driver partner would wait around, and when\nthe order is ready, pay in cash. The problem with this approach was that there\nwas no record of the transaction besides a booking on GoFood and a receipt\nhanded to the driver partner.\n\nThis was an inefficient system, for driver partners, and our customers.\n\n> Oh, and those merchants? Things weren’t rosy for them either.\nLet’s assume our pisang goreng place is a GoFood partner (meaning Gojek collects\ncommissions for the increased demand we send their way), and also part of a\nlarger chain. When we place the order, GoFood will assign it to one outlet of\nthe chain. However, our driver partner may decide to visit another outlet and\npick up the order from there.\n\nAt the end of the month, our restaurant partners would be invoiced for\ncommission that was due to us, based on sales as reported by the GoFood app.\nThis meant we were charging some merchants commission for sales their outlet may\nhave never made.\n\nWe spent a lot of time and resources addressing merchant complaints. 🤦‍♂️\n\n> Then there was the matter of control.\nIf a merchant partner was not open for business on a particular day, wanted to\nupdate their menu, or indicate items as out of stock, they had to call Gojek\nCustomer Care. During this time, orders might still be coming in.\n\nLet’s just say we weren’t doing ourselves any favours. 🤷🏻‍♂️\n\nThere was a lot that needed fixing here, and it could only be done by\nintegrating merchants more deeply into our ecosystem. So that’s what we did.\n\nThe birth of GoResto\nTowards the end of 2016, a concept was developed for an app that would cater to\nGoFood merchant partners, and by early 2017 GoResto — which is what we called it\nat the time — was ready. You can read more about the product research process\nthat went into making GoResto here\n[https://blog.gojekengineering.com/whats-cooking-diving-into-kitchens-for-go-biz-e01051bfdc98]\n).\n\nWith GoResto, we addressed some of the problems outlined earlier.\n\n1. Electronic payments\nAll of Gojek’s driver partners had GoPay e-wallets associated with their\naccounts. With GoResto, we did the same for GoFood merchants. Transactions\nbetween driver and merchant partners would now be wallet-to-wallet, not cash.\nGojek would deduct any applicable commission immediately from the merchant\nwallet. This made the reconciliation process with merchants simpler.\n\n2. PIN exchange for restaurant verification\nTo eliminate fraud, driver partners would also need to share a PIN with the\nmerchant while picking up the order. This electronic handshake helped us verify\nthey were indeed picking up the right order from the right outlet.\n\nIt was a decent solution. If all went according to plan, we could breathe easy.\n\n> As you might have guessed, all did not go according to plan. 🙇‍♂️\nIn the first iteration, the wallet creation process required collaboration with\nthe GoPay team, which was itself facing bandwidth constraints due to rapid\ngrowth (which we’ll talk about a little later).\n\nAlso, the merchant onboarding to GoResto at this point was still a manual\nprocess. In our first month, we onboarded only 26 merchants. 😣\n\nWe needed a more scalable solution.\n\nHere’s a quick note on Gojek company culture. When the chips are down, it’s\nimportant for organisations to have core values to guide decision-making. One of\nour values happens to be:\n\nThis line is an affirmation to all stakeholders to take the best decision for a\nparticular situation based on available information. Such decisions are then\nrespected by everyone else.\n\nWe made two drastic decisions:\n\n 1. Merchant onboarding was completely frozen until we could build a platform to\n    automate the process.\n 2. Engineers from the Merchants team were embedded within GoPay, building\n    required capacities on GoPay systems while core GoPay engineers continued\n    work on scaling the platform.\n\n> In three months, as summer rolled around, GoResto was back.\nWe weren’t out of the woods yet though. All this was happening before Gojek had\ndeprecated its legacy codebase, Stan Marsh\n[https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf], in favour\nof microservices, so system stability was not exactly excellent. As a result, we\nstill faced sync issues between GoFood and GoResto order management systems.\nThis, in turn, began to reflect on us publicly.\n\nOur app store rating at this point slid down to 3.2.\n\nMake It Work, Then Make It Better\nWe clearly had a long way to go to make GoResto the app our merchants deserved.\nThings were bad, but as they say — sometimes the only way out is through.\n\nChallenge accepted. 💪\n\nFirst things first, we went about fixing the sync issues by building a second\nsystem to replace our unreliable version. Not only was this accomplished, but\nall onboarded merchants were migrated to the new system, with zero downtime. \nRead more about how this was done in this post\n[https://blog.gojekengineering.com/zero-downtime-traffic-migration-at-go-food-17ba413eb8c2]\n.\n\n> One small win.\nNow for the real problems, giving merchants the control they needed over how\nthey were represented on GoFood. The first self-serve feature we introduced to\nGoResto was allowing merchants to update their restaurant status in real time.\n\n> Another small win.\nWe had unlocked a critical component in product design — empathy for the people\nyou’re building for. The question now was — what can we do that will make life\neasier for our merchants?\n\nItem availability? Understood.\nMenu updation? Got it.\nPricing adjustments? Why not.\nAdd categories? Move items between categories? Update images?\n\n> Done, done… and done. ✅\nOur systems were stable, early teething troubles were addressed, we were finally\nsolving the problems that needed solving.\n\nBuild It Right, And They Will Come\nAs GoResto grew in functionality, we began\n\n slowly earning back the goodwill of our merchant community. Soon, our app store\nrating began to reflect that.\n\nApp store ratings reflecting how customer goodwill can be earned back ✌️We\ndidn’t need to push GoResto to merchants anymore, it was adopted due to the ease\nof doing business it offered.\n\n> It was long overdue, but we had accomplished what we had set out to do. There\nwas finally a moment to sit back and enjoy the sunrise.\nOr so we thought.\n\nThe rest was short-lived. Southeast Asia was abuzz with activity. According to\nthis report\n[https://www.blog.google/documents/47/SEA_Internet_Economy_Report_2019.pdf], the\nvalue of the Internet economy in the region tripled in the years since 2015. The\nGross Merchandise Value (GMV) projection for 2025 is estimated to be $300\nbillion.\n\n> To put that in perspective — in 2016, that projection was $100 billion.\nEven as GoResto was being built, there was another behemoth stirring under the\nrich waters of Indonesia’s digital payments landscape. GoPay, which had been\nrapidly growing in this favourable environment since its arrival in 2016, was\nnow being used by roughly three-quarters of digital payments users in Indonesia.\n\nBut we wanted more.\n\nIn 2018, GoPay introduced offline acceptance, bringing a whole new category of\nmerchant partners into our ecosystem.\n\n> Our existing solution wasn’t good enough anymore. It was time to evolve.\nKeep watching this space for the continued story charting GoResto’s evolution\ninto our full-fledged merchants platform — GoBiz.\n\n\n--------------------------------------------------------------------------------\n\nWant our updates beamed straight to your inbox? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Sooraj Rajmohan</p><p>Earlier this year, during a visit to Gojek’s HQ in Jakarta, a few of us from the Gojek Marketing team had a craving to try Indonesia’s famed fried delicacy — <em><em>pisang goreng.</em></em></p><p>Today, fulfilling such food cravings is a simple process. GoFood — Gojek’s food delivery product — lists 400,000+ merchants. You search for the outlet you want to order from, select the item and quantity, check out, and pay either via cash or Gojek’s digital wallet GoPay. Then, you sit back and watch the little Gojek driver partner on the screen zoom their way to the restaurant, and bring you some fried banana goodness. 😍</p><p><strong><strong>Simple. Fast. Reliable.</strong></strong></p><blockquote>Rewind a few years, and things didn’t look so good.</blockquote><h1 id=\"first-some-context\">First, some context</h1><p>When GoFood launched in 2015, expansion and adoption happened rapidly. The orders started piling in, and we were struggling to keep up with demand. Initially, we’d simply list food merchants on our marketplace, send demand their way, and fulfil it through our fleet of driver partners.</p><p>We were building for our consumers and driver partners, but merchants were always a key component of our ecosystem. If Gojek is an iceberg, the consumer-facing Super App is the part above water. In this story, we’ll dive beneath the surface to explore another key component — GoBiz, our merchant SuperApp.</p><blockquote>But before GoBiz, there was GoResto.</blockquote><h1 id=\"the-merchant-problem\">The Merchant Problem</h1><p>If we had ordered ourselves that <em><em>pisang goreng</em></em> in the early days of GoFood, things would have worked very differently.</p><p>You see, merchants were onboarded by the GoFood team by uploading their menus to our systems. We’d look through these menus to find our fried banana of choice, and make an order, which would be relayed directly to a driver partner. This partner would then go to the restaurant and place the order (which is when the merchant partner gets involved in the process).</p><p>So, while our bananas are fried, the driver partner would wait around, and when the order is ready, pay in cash. The problem with this approach was that there was no record of the transaction besides a booking on GoFood and a receipt handed to the driver partner.</p><p>This was an inefficient system, for driver partners, and our customers.</p><blockquote><em><em>Oh, and those merchants? Things weren’t rosy for them either.</em></em></blockquote><p>Let’s assume our <em><em>pisang goreng</em></em> place is a GoFood partner (meaning Gojek collects commissions for the increased demand we send their way), and also part of a larger chain. When we place the order, GoFood will assign it to one outlet of the chain. However, our driver partner may decide to visit another outlet and pick up the order from there.</p><p>At the end of the month, our restaurant partners would be invoiced for commission that was due to us, based on sales as reported by the GoFood app. This meant we were charging some merchants commission for sales their outlet may have never made.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/428/1*-ZP7pyLDGJo31gjM1kbr2Q.jpeg\" class=\"kg-image\"></figure><p><strong><strong>We spent a lot of time and resources addressing merchant complaints. </strong></strong>🤦‍♂️</p><blockquote>Then there was the matter of control.</blockquote><p>If a merchant partner was not open for business on a particular day, wanted to update their menu, or indicate items as out of stock, they had to call Gojek Customer Care. During this time, orders might still be coming in.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/723/1*7mru-w9gwgvBTO-wReUymw.jpeg\" class=\"kg-image\"></figure><p><strong><strong>Let’s just say we weren’t doing ourselves any favours. 🤷🏻‍♂️</strong></strong></p><p>There was a lot that needed fixing here, and it could only be done by integrating merchants more deeply into our ecosystem. So that’s what we did.</p><h1 id=\"the-birth-of-goresto\">The birth of GoResto</h1><p>Towards the end of 2016, a concept was developed for an app that would cater to GoFood merchant partners, and by early 2017 GoResto — which is what we called it at the time — was ready. You can read more about the product research process that went into making GoResto <a href=\"https://blog.gojekengineering.com/whats-cooking-diving-into-kitchens-for-go-biz-e01051bfdc98\" rel=\"noopener\">here</a>).</p><p><strong><strong><em><em>With GoResto, we addressed some of the problems outlined earlier.</em></em></strong></strong></p><h2 id=\"1-electronic-payments\">1. Electronic payments</h2><p>All of Gojek’s driver partners had GoPay e-wallets associated with their accounts. With GoResto, we did the same for GoFood merchants. Transactions between driver and merchant partners would now be wallet-to-wallet, not cash. Gojek would deduct any applicable commission immediately from the merchant wallet. This made the reconciliation process with merchants simpler.</p><h2 id=\"2-pin-exchange-for-restaurant-verification\">2. PIN exchange for restaurant verification</h2><p>To eliminate fraud, driver partners would also need to share a PIN with the merchant while picking up the order. This electronic handshake helped us verify they were indeed picking up the right order from the right outlet.</p><p>It was a decent solution. If all went according to plan, we could breathe easy.</p><blockquote>As you might have guessed, all did not go according to plan. 🙇‍♂️</blockquote><p>In the first iteration, the wallet creation process required collaboration with the GoPay team, which was itself facing bandwidth constraints due to rapid growth (which we’ll talk about a little later).</p><p>Also, the merchant onboarding to GoResto at this point was still a manual process. In our first month, we onboarded only 26 merchants. 😣</p><p>We needed a more scalable solution.</p><p>Here’s a quick note on Gojek company culture. When the chips are down, it’s important for organisations to have core values to guide decision-making. One of our values happens to be:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1326/1*AcfpMzeJqM2bj5x8TedY7A.jpeg\" class=\"kg-image\"></figure><p>This line is an affirmation to all stakeholders to take the best decision for a particular situation based on available information. Such decisions are then respected by everyone else.</p><p>We made two drastic decisions:</p><ol><li>Merchant onboarding was completely frozen until we could build a platform to automate the process.</li><li>Engineers from the Merchants team were embedded within GoPay, building required capacities on GoPay systems while core GoPay engineers continued work on scaling the platform.</li></ol><blockquote>In three months, as summer rolled around, GoResto was back.</blockquote><p>We weren’t out of the woods yet though. All this was happening before Gojek had deprecated its legacy codebase, <a href=\"https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf\" rel=\"noopener\">Stan Marsh</a>, in favour of microservices, so system stability was not exactly excellent. As a result, we still faced sync issues between GoFood and GoResto order management systems. This, in turn, began to reflect on us publicly.</p><p><strong><strong>Our app store rating at this point slid down to 3.2.</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/794/1*tK41Ht4hzRXSuKNR5w2qxA.jpeg\" class=\"kg-image\"></figure><h1 id=\"make-it-work-then-make-it-better\">Make It Work, Then Make It Better</h1><p>We clearly had a long way to go to make GoResto the app our merchants deserved. Things were bad, but as they say — sometimes the only way out is through.</p><p><strong><strong>Challenge accepted. 💪</strong></strong></p><p>First things first, we went about fixing the sync issues by building a second system to replace our unreliable version. Not only was this accomplished, but all onboarded merchants were migrated to the new system, with <em><em>zero downtime. </em></em>Read more about how this was done <a href=\"https://blog.gojekengineering.com/zero-downtime-traffic-migration-at-go-food-17ba413eb8c2\" rel=\"noopener\">in this post</a>.</p><blockquote><em><em>One small win.</em></em></blockquote><p>Now for the real problems, giving merchants the control they needed over how they were represented on GoFood. The first self-serve feature we introduced to GoResto was allowing merchants to update their restaurant status in real time.</p><blockquote><em><em>Another small win.</em></em></blockquote><p>We had unlocked a critical component in product design — empathy for the people you’re building for. The question now was — what can we do that will make life easier for our merchants?</p><p><em><em>Item availability?</em></em> Understood.<br><em><em>Menu updation?</em></em> Got it.<br><em><em>Pricing adjustments?</em></em> Why not.<br><em><em>Add categories? Move items between categories? Update images?</em></em></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/522/1*bRzkmDwhHIrGOEJDz45a1A.jpeg\" class=\"kg-image\"></figure><blockquote>Done, done… and done. ✅</blockquote><p>Our systems were stable, early teething troubles were addressed, we were finally solving the problems that needed solving.</p><h1 id=\"build-it-right-and-they-will-come\">Build It Right, And They Will Come</h1><p>As GoResto grew in functionality, we began</p><p> slowly earning back the goodwill of our merchant community. Soon, our app store rating began to reflect that.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1864/1*j3tGYn7EvCzlh46jk5cyPw.png\" class=\"kg-image\"><figcaption>App store ratings reflecting how customer goodwill can be earned back ✌️</figcaption></figure><p>We didn’t need to push GoResto to merchants anymore, it was adopted due to the ease of doing business it offered.</p><blockquote><em><em>It was long overdue, but we had accomplished what we had set out to do. There was finally a moment to sit back and enjoy the sunrise.</em></em></blockquote><p>Or so we thought.</p><p>The rest was short-lived. Southeast Asia was abuzz with activity. <a href=\"https://www.blog.google/documents/47/SEA_Internet_Economy_Report_2019.pdf\" rel=\"noopener\">According to this report</a>, the value of the Internet economy in the region tripled in the years since 2015. The Gross Merchandise Value (GMV) projection for 2025 is estimated to be $300 billion.</p><blockquote>To put that in perspective — in 2016, that projection was $100 billion.</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/884/1*cntOWzHiq2mS76fgLCSD7Q.jpeg\" class=\"kg-image\"></figure><p>Even as GoResto was being built, there was another behemoth stirring under the rich waters of Indonesia’s digital payments landscape. GoPay, which had been rapidly growing in this favourable environment since its arrival in 2016, was now being used by roughly three-quarters of digital payments users in Indonesia.</p><p><strong><strong>But we wanted more.</strong></strong></p><p>In 2018, GoPay introduced offline acceptance, bringing a whole new category of merchant partners into our ecosystem.</p><blockquote>Our existing solution wasn’t good enough anymore. It was time to evolve.</blockquote><p>Keep watching this space for the continued story charting GoResto’s evolution into our full-fledged merchants platform — GoBiz.</p><hr><p>Want our updates beamed straight to your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/the-road-to-a-merchant-superapp/","canonical_url":null,"uuid":"122c2057-8d07-47b0-b573-1f6b888deedb","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2d7d17aa22c4066f83c9a","reading_time":7}},{"node":{"id":"Ghost__Post__5ec2d7e77aa22c4066f83caa","title":"The Final Chapter — How GOJEK Went International","slug":"the-final-chapter-how-gojek-went-international","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/4.gif","excerpt":"Changing markets, resource crunches, looming deadlines; everything played a part in GOJEK’s newest international launch — Thailand.","custom_excerpt":"Changing markets, resource crunches, looming deadlines; everything played a part in GOJEK’s newest international launch — Thailand.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"18 July, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-19T00:15:59.000+05:30","published_at":"2019-07-18T09:30:00.000+05:30","updated_at":"2020-05-19T00:40:49.000+05:30","meta_title":null,"meta_description":"Changing markets, resource crunches, looming deadlines; everything played a part in GOJEK’s newest international launch — Thailand.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Sooraj Rajmohan\n\nYou are reading the final part of a three-part series documenting GOJEK’s\nexpansion beyond Indonesia’s borders, and how one team helped make it possible.\n\nPart one of this series, which documents the business and technical decisions\nmade for international launch, can be found here [http://bit.ly/2XTN6WK]. Part\ntwo, which chronicles the journey of GOJEK’s Vietnam launch under the GO-VIET\nbrand, is here [http://bit.ly/2Rm2cSC].\n\nOn to part three then:\n\nPart 3/3 | Accomplishment\nThe atmosphere in Vietnam was celebratory. The GO-VIET launch had gone better\nthan anticipated, and our attempt to build robust, scalable systems looked to\nhave paid off. Ride and Send services were live in Vietnam, and engineers from\nGO-FOOD had already started working with Trifecta — the team spearheading\nGOJEK’s international moves — to launch our food product in Vietnam (FYI, it’s\nlive now).\n\nIn the months following Vietnam launch, Trifecta focused on setting up cadences\nwith different GOJEK product teams to streamline development and release cycles\nfor GO-VIET. Everything was up and running.\n\nNow, for the next stage — Thailand.\n\nThe launch plan for Thailand was similar to what had been executed in Vietnam,\nincluding the products made available at launch (Ride and Send). In Thailand,\nthe brand would launch under the name GET.\n\n> We had proven it could be done. Now it was time to do it again. Easy, right?\nAs would soon become apparent, not really. This ride had a few last twists left.\n\nA Different Method\nWhile our Thailand operation would be similar to Vietnam on the infrastructure\nfront, to say we could just replicate the model as is would be an\noversimplification. For starters, Thailand’s currency, the Thai Baht, was not a\ndepreciated currency like Indonesian Rupiah or Vietnamese Dong.\n\n> Here’s some context:\n> 1 Indonesian Rupiah (IDR) = 0.0049 INR\n1 Vietnamese Dong (VND) = 0.0030 INR\n1 Thai Baht (THB) = 2.2 INR\nIncorporating this change would require some additional work from the team. On\ntop of this, the ride sharing market in Thailand is regulated by the Thai\ngovernment. Existing bike taxis (locally called WIN taxis) are licensed by the\ngovernment to serve as an effective mode of transportation. GOJEK’s entry into\nthe market provided an opportunity for WIN drivers to leverage the online\nplatform, while giving customers easy access to transportation\n\nThis arrangement required some work as well, as existing WIN drivers onboarded\nto GET would need to be prioritised initially while our own onboarding and\ntraining happened in parallel. All this meant that the launch model needed some\ntweaking, but nothing the team would need to sweat over too much.\n\nTalks were completed, local business teams were built, and a deadline was agreed\nupon with the Thai government to launch GET.\n\n> We should have known; rarely do companies building, scaling, and expanding at\nGOJEK’s pace experience such smooth sailing.\nThe Singapore Swing\nWorks, meet spanner.\n\nDue to the seismic shift in the ride-sharing business landscape of Southeast\nAsia in early 2018, GOJEK was also prepping for launch in Singapore on an\naccelerated timeline. Now was a good time to enter the lucrative market — the\nmost developed in the region. GOJEK already enjoyed brand recognition thanks to\nthe amount of business travel between Jakarta and Singapore. By May 2018, a few\nmonths before GO-VIET went live, the launch teams for Singapore had already been\nformed.\n\n> Keeping with Singapore’s iconic lion motif, we named these teams Simba and\nMufasa. Stay tuned to this blog for their story, coming soon. 🦁\nAs 2018 drew on and all teams worked to hit their deadlines, the situation felt\na lot like the storms GOJEK weathered in its infancy. Multiple teams were\ndependent on the same resources as we lined up back-to-back country launches. To\ntop it all, holiday season — one of the busiest times of the year — was also\nkicking off.\n\nvia GIPHY [https://giphy.com/gifs/2oj7STwCx7wAM]\n\nWhile Trifecta had built much of the infrastructure framework required for\nlaunch, there were still dependencies on key GOJEK teams that were currently\nbuilding for Singapore. This threatened to slow down what was an otherwise\nstraightforward development timeline.\n\nThere was also that commitment of a launch date to the Thai Government to think\nabout. The stakes were not trivial.\n\n> The team could not afford to lose more time. Time for desperate measures.\nWith just about a month left for launch, the team members — distributed across\nmultiple locations — convened at the GOJEK Bangalore office. All the\ndocumentation done during the pre-Vietnam launch phase meant that everyone had a\nfair idea of what needed to be done. Launching Singapore and Thailand without\ndelay was critical to business, and we could not afford delays.\n\nWith this in mind, tough decisions were made. The Trifecta team decided to roll\nup their sleeves and take full ownership of Thailand, freeing up the GOJEK\nTransport team to dedicate more resources to Singapore. Trifecta team members\nflew in to Thailand to coordinate the work there, and the project slowly picked\nup steam once again. All the legwork done at the beginning of this exercise had\ncome to fruition.\n\nThe team now had enough context about GOJEK services, and as the days to launch\nticked away, so did the items on the pre-launch checklist.\n\nIt took some doing, with the environment and frameworks built and stabilised\nwhile activities like driver onboarding and early alpha testing happened in\nparallel.\n\n> The going was not easy, but this wasn’t our first rodeo.\nTrifecta Tech Lead Sumit Gupta, who was around in early 2016 during GOJEK’s\nfrantic growth as well, mentions how everyone was more confident this time\naround. Thanks to to the team deciding to build a fast and scalable\ncontainer-based architecture for Vietnam and Thailand, they were sure the system\nwould function reliably. 💪\n\nThe home stretch\nDespite the apprehensions, Trifecta managed to pull through. What had been a\nsystem unfit for launch just a few weeks before the stipulated date, was up and\nrunning with a couple of days to go. The team’s faith was well-rewarded. As\nlaunch day came around, nothing broke.\n\nBagus Santoso and Ardi Priono, QAs on the Trifecta team, recall how everyone\npresent gathered outside the GET office on the day of the soft launch, and\nprayed.\n\n> People of different nationalities, faiths, and professional backgrounds, united\nin a moment of reflection and hope for something they had built together.\nThe day of the soft launch.On November 29, 2018, the GOJEK app successfully went\nlive in Singapore. The next month, December 18 to be precise, GET’s fluorescent\ncolours lit up Bangkok. We were officially live in Thailand. \n\nRiding off to new horizons.> Our SuperApp had ventured beyond home. Team Trifecta\nhad accomplished the task it had been set.\n> Looking back, this had been an ambitious endeavour. Setting up new environments,\nusing the learnings from scaling GOJEK to build improved infrastructure, and\nlaunching two new brands.\nIf there was one thing this exercise taught us, it was to reduce dependencies.\nToday, each GOJEK team is responsible for maintaining their product features and\nservices wherever they may be deployed.\n\nIn service of this decision, Trifecta started the exercise of imparting all the\nknowledge, tools, and documentation gathered over the year to the relevant teams\nwithin GOJEK. Hands-on sessions and workshops were held, and learnings\ntransferred. The goal now was to provide each team the tools and autonomy\nrequired to not face such roadblocks again.\n\n> Once this process was complete, their task done, the fellowship that steered\nGOJEK to foreign lands was disbanded.\nArmed with new experience, the GOJEK engineers left Trifecta and joined other\nproduct teams. As for that specialist team that was brought in at the beginning\nof this story, the valuable experience they brought to the table would always be\nuseful to a company that is taking on challenging projects. They moved to\nGOJEK’s newly-formed Kernel team, to help take on one of our biggest challenges\nyet.\n\nBut that is a story for another day.\n\nThis series was a snapshot of how we do things at GOJEK. Even as you read this,\nthere are many more such stories developing. Keep watching this space!\n\nOr better yet, join us [http://bit.ly/2Lubjke] and become a part of the story.\nThere’s plenty to do and much to learn.\n\nThanks for reading! 🙌\n\n\n--------------------------------------------------------------------------------\n\nWant more where that came from? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] and we'll send our latest\nupdates straight to your inbox!","html":"<p>By Sooraj Rajmohan</p><p>You are reading the final part of a three-part series documenting GOJEK’s expansion beyond Indonesia’s borders, and how one team helped make it possible.</p><p>Part one of this series, which documents the business and technical decisions made for international launch, can be found <a href=\"http://bit.ly/2XTN6WK\" rel=\"noopener\">here</a>. Part two, which chronicles the journey of GOJEK’s Vietnam launch under the GO-VIET brand, is <a href=\"http://bit.ly/2Rm2cSC\" rel=\"noopener\">here</a>.</p><p>On to part three then:</p><h1 id=\"part-3-3-accomplishment\">Part 3/3 | Accomplishment</h1><p>The atmosphere in Vietnam was celebratory. The GO-VIET launch had gone better than anticipated, and our attempt to build robust, scalable systems looked to have paid off. Ride and Send services were live in Vietnam, and engineers from GO-FOOD had already started working with Trifecta — the team spearheading GOJEK’s international moves — to launch our food product in Vietnam (FYI, it’s live now).</p><p>In the months following Vietnam launch, Trifecta focused on setting up cadences with different GOJEK product teams to streamline development and release cycles for GO-VIET. Everything was up and running.</p><p><strong><strong>Now, for the next stage — Thailand.</strong></strong></p><p>The launch plan for Thailand was similar to what had been executed in Vietnam, including the products made available at launch (Ride and Send). <strong><strong>In Thailand, the brand would launch under the name GET.</strong></strong></p><blockquote>We had proven it could be done. Now it was time to do it again. Easy, right?</blockquote><p><em><em>As would soon become apparent, not really. This ride had a few last twists left.</em></em></p><h1 id=\"a-different-method\">A Different Method</h1><p>While our Thailand operation would be similar to Vietnam on the infrastructure front, to say we could just replicate the model as is would be an oversimplification. For starters, Thailand’s currency, the Thai Baht, was not a depreciated currency like Indonesian Rupiah or Vietnamese Dong.</p><blockquote><em><em>Here’s some context:</em></em></blockquote><blockquote><em><em>1 Indonesian Rupiah (IDR) = 0.0049 INR</em></em><br><em><em>1 Vietnamese Dong (VND) = 0.0030 INR</em></em><br><em><em>1 Thai Baht (THB) = 2.2 INR</em></em></blockquote><p>Incorporating this change would require some additional work from the team. On top of this, the ride sharing market in Thailand is regulated by the Thai government. Existing bike taxis (locally called WIN taxis) are licensed by the government to serve as an effective mode of transportation. GOJEK’s entry into the market provided an opportunity for WIN drivers to leverage the online platform, while giving customers easy access to transportation</p><p>This arrangement required some work as well, as existing WIN drivers onboarded to GET would need to be prioritised initially while our own onboarding and training happened in parallel. All this meant that the launch model needed some tweaking, but nothing the team would need to sweat over too much.</p><p><strong><strong>Talks were completed, local business teams were built, and a deadline was agreed upon with the Thai government to launch GET.</strong></strong></p><blockquote>We should have known; rarely do companies building, scaling, and expanding at GOJEK’s pace experience such smooth sailing.</blockquote><h1 id=\"the-singapore-swing\">The Singapore Swing</h1><p><strong><strong><em><em>Works, meet spanner.</em></em></strong></strong></p><p>Due to the seismic shift in the ride-sharing business landscape of Southeast Asia in early 2018, GOJEK was also prepping for launch in Singapore on an accelerated timeline. Now was a good time to enter the lucrative market — the most developed in the region. GOJEK already enjoyed brand recognition thanks to the amount of business travel between Jakarta and Singapore. By May 2018, a few months before GO-VIET went live, the launch teams for Singapore had already been formed.</p><blockquote><em><em><em>Keeping with Singapore’s iconic lion motif, we named these teams Simba and Mufasa. Stay tuned to this blog for their story, coming soon. 🦁</em></em></em></blockquote><p>As 2018 drew on and all teams worked to hit their deadlines, the situation felt a lot like the storms GOJEK weathered in its infancy. Multiple teams were dependent on the same resources as we lined up back-to-back country launches. To top it all, holiday season — one of the busiest times of the year — was also kicking off.</p><!--kg-card-begin: html--><iframe src=\"https://giphy.com/embed/2oj7STwCx7wAM\" width=\"480\" height=\"346\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/2oj7STwCx7wAM\">via GIPHY</a></p><!--kg-card-end: html--><p>While Trifecta had built much of the infrastructure framework required for launch, there were still dependencies on key GOJEK teams that were currently building for Singapore. This threatened to slow down what was an otherwise straightforward development timeline.</p><p>There was also that commitment of a launch date to the Thai Government to think about. The stakes were not trivial.</p><blockquote>The team could not afford to lose more time. Time for desperate measures.</blockquote><p>With just about a month left for launch, the team members — distributed across multiple locations — convened at the GOJEK Bangalore office. All the documentation done during the pre-Vietnam launch phase meant that everyone had a fair idea of what needed to be done. Launching Singapore and Thailand without delay was critical to business, and we could not afford delays.</p><p>With this in mind, tough decisions were made. The Trifecta team decided to roll up their sleeves and take full ownership of Thailand, freeing up the GOJEK Transport team to dedicate more resources to Singapore. Trifecta team members flew in to Thailand to coordinate the work there, and the project slowly picked up steam once again. All the legwork done at the beginning of this exercise had come to fruition.</p><p>The team now had enough context about GOJEK services, and as the days to launch ticked away, so did the items on the pre-launch checklist.</p><p>It took some doing, with the environment and frameworks built and stabilised while activities like driver onboarding and early alpha testing happened in parallel.</p><blockquote>The going was not easy, but this wasn’t our first rodeo.</blockquote><p>Trifecta Tech Lead Sumit Gupta, who was around in early 2016 during GOJEK’s frantic growth as well, mentions how everyone was more confident this time around. Thanks to to the team deciding to build a fast and scalable container-based architecture for Vietnam and Thailand, they were sure the system would function reliably. 💪</p><h1 id=\"the-home-stretch\">The home stretch</h1><p>Despite the apprehensions, Trifecta managed to pull through. What had been a system unfit for launch just a few weeks before the stipulated date, was up and running with a couple of days to go. The team’s faith was well-rewarded. As launch day came around, nothing broke.</p><p>Bagus Santoso and Ardi Priono, QAs on the Trifecta team, recall how everyone present gathered outside the GET office on the day of the soft launch, and prayed.</p><blockquote>People of different nationalities, faiths, and professional backgrounds, united in a moment of reflection and hope for something they had built together.</blockquote><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1280/1*i1ajp_gHLnIOoJQHIbmCKg.jpeg\" class=\"kg-image\"><figcaption>The day of the soft launch.</figcaption></figure><p>On November 29, 2018, the GOJEK app successfully went live in Singapore. The next month, December 18 to be precise, GET’s fluorescent colours lit up Bangkok. <strong><strong>We were officially live in Thailand. </strong></strong></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/3456/1*9Ir2dOX2x0ODxVIhdl85gA.jpeg\" class=\"kg-image\"><figcaption>Riding off to new horizons.</figcaption></figure><blockquote><em><em>Our SuperApp had ventured beyond home. Team Trifecta had accomplished the task it had been set.</em></em></blockquote><blockquote>Looking back, this had been an ambitious endeavour. Setting up new environments, using the learnings from scaling GOJEK to build improved infrastructure, and launching two new brands.</blockquote><p>If there was one thing this exercise taught us, it was to reduce dependencies. Today, each GOJEK team is responsible for maintaining their product features and services wherever they may be deployed.</p><p>In service of this decision, Trifecta started the exercise of imparting all the knowledge, tools, and documentation gathered over the year to the relevant teams within GOJEK. Hands-on sessions and workshops were held, and learnings transferred. The goal now was to provide each team the tools and autonomy required to not face such roadblocks again.</p><blockquote>Once this process was complete, their task done, the fellowship that steered GOJEK to foreign lands was disbanded.</blockquote><p>Armed with new experience, the GOJEK engineers left Trifecta and joined other product teams. As for that specialist team that was brought in at the beginning of this story, the valuable experience they brought to the table would always be useful to a company that is taking on challenging projects. They moved to GOJEK’s newly-formed Kernel team, to help take on one of our biggest challenges yet.</p><p><strong><strong>But that is a story for another day.</strong></strong></p><p>This series was a snapshot of how we do things at GOJEK. Even as you read this, there are many more such stories developing. Keep watching this space!</p><p><strong><strong><em><em>Or better yet, </em></em></strong></strong><a href=\"http://bit.ly/2Lubjke\" rel=\"noopener\"><strong><strong><em><em>join us</em></em></strong></strong></a><strong><strong><em><em> and become a part of the story. There’s plenty to do and much to learn.</em></em></strong></strong></p><p>Thanks for reading! 🙌</p><hr><p>Want more where that came from? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a> and we'll send our latest updates straight to your inbox!</p>","url":"https://gojek-ghost.zysk.in/the-final-chapter-how-gojek-went-international/","canonical_url":null,"uuid":"4c0ae36e-1687-443d-9fe0-a01d847dabd1","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2d7e77aa22c4066f83caa","reading_time":6}},{"node":{"id":"Ghost__Post__5ec2d7e47aa22c4066f83ca4","title":"Good Morning, Vietnam — How GOJEK Went International","slug":"good-morning-vietnam-how-gojek-went-international","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/3.gif","excerpt":"From Indonesia’s glittering waters to Vietnam’s wooded forests — how GOJEK set up operations in its first international location.","custom_excerpt":"From Indonesia’s glittering waters to Vietnam’s wooded forests — how GOJEK set up operations in its first international location.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"18 June, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-19T00:15:56.000+05:30","published_at":"2019-06-18T09:30:00.000+05:30","updated_at":"2020-05-19T00:40:35.000+05:30","meta_title":null,"meta_description":"From Indonesia’s glittering waters to Vietnam’s wooded forests — how GOJEK set up operations in its first international location.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Sooraj Rajmohan\n\nYou are reading part two of a three-part series chronicling GOJEK’s entry into\ninternational markets, and the team that helped make it possible. If you haven’t\nread part one, get up to speed here.\n\nPart 2/3 | Initiation\nWhen we left Trifecta — the team responsible for charting GOJEK’s international\nexpansion — in the last part of this series, the team was working on setting up\na new environment for launch in Vietnam. But now, there were new problems to\ntackle.\n\nProblem #1: Configuration drift\n\nUntil this point, GOJEK had always operated within Indonesia, but Trifecta was\nnow in unmapped territory, building a completely new environment for GOJEK’s\nservices in Vietnam. The services now needed to be configured separately across\ngeographies, and there was no central location to manage these configurations\neffectively. This meant there was a chance of configuration inconsistencies\ncreeping in over time (hence the term ‘drift’).\n\nProblem #2: Deployment drift\n\nEven if the team hacked a solution for the first problem, deploying the code\nwould pose another one. It was imperative that the same version of code run on\nall the environments (the existing one in Indonesia, the one being built for\nVietnam, and any future ones). Failing this, supporting services across\ncountries would be a nightmare.\n\n> That wasn’t the kind of risk a startup that expounds lean engineering could\nafford to take.\nProblem #3: A logging and monitoring solution for the Kubernetes cluster.\n\nAs this was the first time containers were being used by GOJEK, a new logging\nsolution would be required for future debugging needs.\n\nMuch time had been lost already, it was time to bring in the big guns.\n\nEven as the team dodged obstacles and took detours, making the best use of\navailable resources, Project Managers Sourabh Gupta and Sanchit Juneja had been\ncommunicating with other teams for backup. They had found some ad-hoc support,\nbut to see this journey through would need more seasoned soldiers.\n\nFinally, this effort came to fruition.\n\nTrifecta V2.0\nAfter some negotiation, the team got the go-ahead for Sumit Gupta, another GOJEK\nveteran, to make the transition from GOJEK’s Atlas team to join Trifecta full\ntime. Sumit had led GOJEK’s scaling efforts back in 2015, when the company was\nin constant firefighting mode, and knew a thing or two about dealing with the\nkind of situation the team was in. He would now assume the role of Trifecta’s\nTech Lead.\n\nWith a renewed sense of purpose, the team looked back at the roadmap and\nreassessed priorities. This would be a challenging project. Daunting, yes.\nInsurmountable? Not quite.\n\n> If you’ve read GOJEK’s essential reading list\n[https://blog.gojekengineering.com/the-go-jek-reading-list-1088712ccc14], you\nmay have noticed that The Mythical Man Month is one of the books we swear by,\nand one of its core tenets is: “Adding more people to a late software project\nmakes it later.”\n> We added four more engineers to the team.\n\n--------------------------------------------------------------------------------\n\nDimensions and distant visions\nGOJEK did not have previously devised solutions for the drifts it was dealing\nwith. It needed new ones.\n\nTackling configuration drift.\n\nIt would now be Trifecta’s job to create a location within which services for\ndifferent environments could be configured and accessed.\n\nThe solution was a service that used a new API to update configurations across\ngeographies. These were then migrated to a configuration store.\n\nThis store was named Yggdrasil, the mythical Norse tree that connects the nine\nrealms. Even in the frenzied sprint to accomplish a daunting task, we could\nnever resist the temptation of poetic nomenclature. 😅\n\n> Yggdrasil changed how configs were stored and managed in GOJEK.\nTackling deployment drift\n\nCode.\n\nCode fuels GOJEK, and ensuring that updated code is running in sync is one of\nthe primary objectives of any team. Trifecta was no different — except for\nscale.\n\nThe team needed to figure out a way to ensure that the same version of code ran\nacross multiple, disconnected environments. It was time to forge a new\naccessory.\n\n> A Palantir — a seeing stone.\nWhen new versions of an application are released, there is a need to deploy the\nsame version on all countries for the given environment. Palantir would take\ncare of figuring out which countries the given deployment should go to.\n\nThe team also built a UI for Palantir, which gave a view of what version of a\nservice was deployed in which cluster and sent alerts when there was a drift.\n\nTackling the logging problem\n\nAs launch date drew closer, this particular problem required non-linear\nthinking. Trifecta implemented an out-of-the-box solution using Stackdriver to\nunblock themselves for the launch. This was not optimal, but it provided enough\nbreathing room to get through launch (post which specific tooling for logging on\ncontainers could be created).\n\nOnce again, the destination appeared near. With Yggdrasil keeping the services\nstable and Palantir keeping watch on code, GO-VIET was no longer a wistful\ndream, it was a visible apparition.\n\n\n--------------------------------------------------------------------------------\n\nRun with Red\nIf you visit Indonesia, chances are you’ll see bright flecks of green amidst the\ntraffic.\n\n> Green jackets, green helmets, green… everywhere. Green is now part of GOJEK’s\nidentity in Indonesia, it is instant mental recall for the brand.\n> But this was not Indonesia.\n> GO-VIET, it was decided, would be born in red.\nA local leadership team was put together in order to assemble other teams\nrequired for launch. This team was also flown to Jakarta to understand GOJEK’s\nvalues and how it works. These would serve as the core values for GO-VIET as\nwell, with the leadership adapting things as required to suit Vietnam.\n\nMeanwhile, Trifecta was stabilising the launch environment, collaborating with\nthe newly-minted team in Vietnam, and working with multiple GOJEK teams.\n\nBy June of 2018, the backend was ready. A working driver and consumer app, as\nwell as on-boarding portals for driver partners had been set up, along with\ncrucial business-related teams like BI and Fraud. GO-VIET was taking shape right\nin front of its makers’ eyes.\n\n> Now for the testing:\nOver the next one month, the app, and by extension, the new environment and\nassorted services, were put through the wringer. First, employees mocking as\ndrivers tried it in a staging environment, then the actual on-boarded drivers\nwere given a shot, so the team could record their feedback.\n\nTesting then moved to the production environment. It was time for the real deal.\nThe dry runs began, and in the final phase of testing, early adopters were given\naccess to try out the alpha version of the app.\n\nFinally, it was done. The environment, the services, the app, the operations,\nthe tree, the stone… they had all survived.\n\n> GO-VIET was ready.\n\n--------------------------------------------------------------------------------\n\nThe final push\nJuly 31, 2018 — Vietnam Beckoned\n\nThe environment was ready, everything was up and running. The app was live, with\nconfigurations changed so drivers would not be visible to anyone who downloaded\nit.\n\nGearing up for launch.At 11.30 pm, the toggle was switched and test bookings\nwere made on production with actual drivers and employees. The GO-VIET COO took\nthe first ride. All was good.\n\nExcitement was running high, and even GOJEK CEO Nadiem Makarim was in Ho-Chi\nMinh City (the first of GO-VIET’s operation centres) for the launch.\n\nAs the clock struck midnight, Trifecta hit the button, and specks of red lit up\non the map within users’ GO-VIET apps. A few driver partners present at the\nlaunch venue confirmed that everything was working according to plan. It was\ndone, we were live.\n\nCelebrating a job well done.> GOJEK had gone international.\nCheers, high fives, applause, congratulations, the pop of celebratory drinks.\n\nVietnam, we’re here!Rumour has it, everyone present tried to guess how many\norders GO-VIET would garner on its first day. Expectations were exceeded. The\nbrand new service did >2,500 orders on day one, more than what GOJEK achieved on\nits first day in Indonesia.\n\nIt had been a long journey of planning and learning. The job was done; the path\nto Vietnam was charted. In the month of September, a formal launch was held,\nadding Hanoi to the list of cites the service operated in.\n\nGOJEK, Indonesia’s first unicorn, had finally left home to find its place in the\nworld. Now, all eyes turned to Thailand. Read what awaited us there in the part\nthree [http://bit.ly/2SmYCZ3] of this series.\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Have our updates delivered straight to your inbox. Sign up\nfor our newsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Sooraj Rajmohan</p><p>You are reading part two of a three-part series chronicling GOJEK’s entry into international markets, and the team that helped make it possible. If you haven’t read part one, get up to speed here.</p><h1 id=\"part-2-3-initiation\">Part 2/3 | Initiation</h1><p>When we left Trifecta — the team responsible for charting GOJEK’s international expansion — in the last part of this series, the team was working on setting up a new environment for launch in Vietnam. But now, there were new problems to tackle.</p><p><strong><strong>Problem #1: Configuration drift</strong></strong></p><p>Until this point, GOJEK had always operated within Indonesia, but Trifecta was now in unmapped territory, building a completely new environment for GOJEK’s services in Vietnam. The services now needed to be configured separately across geographies, and there was no central location to manage these configurations effectively. This meant there was a chance of configuration inconsistencies creeping in over time (hence the term ‘drift’).</p><p><strong><strong>Problem #2: Deployment drift</strong></strong></p><p>Even if the team hacked a solution for the first problem, deploying the code would pose another one. It was imperative that the same version of code run on all the environments (the existing one in Indonesia, the one being built for Vietnam, and any future ones). Failing this, supporting services across countries would be a nightmare.</p><blockquote><em><em>That wasn’t the kind of risk a startup that expounds lean engineering could afford to take.</em></em></blockquote><p><strong><strong>Problem #3: A logging and monitoring solution for the Kubernetes cluster.</strong></strong></p><p>As this was the first time containers were being used by GOJEK, a new logging solution would be required for future debugging needs.</p><p><em><em>Much time had been lost already, it was time to bring in the big guns.</em></em></p><p>Even as the team dodged obstacles and took detours, making the best use of available resources, Project Managers Sourabh Gupta and Sanchit Juneja had been communicating with other teams for backup. They had found some ad-hoc support, but to see this journey through would need more seasoned soldiers.</p><p>Finally, this effort came to fruition.</p><h1 id=\"trifecta-v2-0\">Trifecta V2.0</h1><p>After some negotiation, the team got the go-ahead for Sumit Gupta, another GOJEK veteran, to make the transition from GOJEK’s Atlas team to join Trifecta full time. Sumit had led GOJEK’s scaling efforts back in 2015, when the company was in constant firefighting mode, and knew a thing or two about dealing with the kind of situation the team was in. He would now assume the role of Trifecta’s Tech Lead.</p><p>With a renewed sense of purpose, the team looked back at the roadmap and reassessed priorities. This would be a challenging project. <strong><strong>Daunting, yes. Insurmountable? Not quite.</strong></strong></p><blockquote><em><em><em>If you’ve read </em><a href=\"https://blog.gojekengineering.com/the-go-jek-reading-list-1088712ccc14\" rel=\"noopener\"><em>GOJEK’s essential reading list</em></a><em>, you may have noticed that </em>The Mythical Man Month<em> is one of the books we swear by, and one of its core tenets is: “Adding more people to a late software project makes it later.”</em></em></em></blockquote><blockquote>We added four more engineers to the team.</blockquote><hr><h1 id=\"dimensions-and-distant-visions\">Dimensions and distant visions</h1><p>GOJEK did not have previously devised solutions for the drifts it was dealing with. It needed new ones.</p><p><strong><strong>Tackling configuration drift.</strong></strong></p><p>It would now be Trifecta’s job to create a location within which services for different environments could be configured and accessed.</p><p>The solution was a service that used a new API to update configurations across geographies. These were then migrated to a configuration store.</p><p>This store was named Yggdrasil, the mythical Norse tree that connects the nine realms. Even in the frenzied sprint to accomplish a daunting task, we could never resist the temptation of poetic nomenclature. 😅</p><blockquote>Yggdrasil changed how configs were stored and managed in GOJEK.</blockquote><p><strong><strong>Tackling deployment drift</strong></strong></p><p><em><em>Code</em></em>.</p><p>Code fuels GOJEK, and ensuring that updated code is running in sync is one of the primary objectives of any team. Trifecta was no different — except for scale.</p><p>The team needed to figure out a way to ensure that the same version of code ran across multiple, disconnected environments. It was time to forge a new accessory.</p><blockquote>A Palantir — a seeing stone.</blockquote><p>When new versions of an application are released, there is a need to deploy the same version on all countries for the given environment. Palantir would take care of figuring out which countries the given deployment should go to.</p><p>The team also built a UI for Palantir, which gave a view of what version of a service was deployed in which cluster and sent alerts when there was a drift.</p><p><strong><strong>Tackling the logging problem</strong></strong></p><p>As launch date drew closer, this particular problem required non-linear thinking. Trifecta implemented an out-of-the-box solution using Stackdriver to unblock themselves for the launch. This was not optimal, but it provided enough breathing room to get through launch (post which specific tooling for logging on containers could be created).</p><p>Once again, the destination appeared near. With Yggdrasil keeping the services stable and Palantir keeping watch on code, GO-VIET was no longer a wistful dream, it was a visible apparition.</p><hr><h1 id=\"run-with-red\">Run with Red</h1><p>If you visit Indonesia, chances are you’ll see bright flecks of green amidst the traffic.</p><blockquote><em><em>Green jackets, green helmets, green… everywhere. Green is now part of GOJEK’s identity in Indonesia, it is instant mental recall for the brand.</em></em></blockquote><blockquote><em><em>But this was not Indonesia.</em></em></blockquote><blockquote>GO-VIET, it was decided, would be born in red.</blockquote><p>A local leadership team was put together in order to assemble other teams required for launch. This team was also flown to Jakarta to understand GOJEK’s values and how it works. These would serve as the core values for GO-VIET as well, with the leadership adapting things as required to suit Vietnam.</p><p>Meanwhile, Trifecta was stabilising the launch environment, collaborating with the newly-minted team in Vietnam, and working with multiple GOJEK teams.</p><p>By June of 2018, the backend was ready. A working driver and consumer app, as well as on-boarding portals for driver partners had been set up, along with crucial business-related teams like BI and Fraud. GO-VIET was taking shape right in front of its makers’ eyes.</p><blockquote>Now for the testing:</blockquote><p>Over the next one month, the app, and by extension, the new environment and assorted services, were put through the wringer. First, employees mocking as drivers tried it in a staging environment, then the actual on-boarded drivers were given a shot, so the team could record their feedback.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/2592/1*dTinrKKxi8iegPBzQWP9Hg.jpeg\" class=\"kg-image\"></figure><p>Testing then moved to the production environment. It was time for the real deal. The dry runs began, and in the final phase of testing, early adopters were given access to try out the alpha version of the app.</p><p>Finally, it was done. The environment, the services, the app, the operations, the tree, the stone… they had all survived.</p><blockquote>GO-VIET was ready.</blockquote><hr><h1 id=\"the-final-push\">The final push</h1><p><strong><strong><em><em>July 31, 2018 — Vietnam Beckoned</em></em></strong></strong></p><p>The environment was ready, everything was up and running. The app was live, with configurations changed so drivers would not be visible to anyone who downloaded it.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/4032/1*qskOob8GzQG4dfQNtb6__Q.jpeg\" class=\"kg-image\"><figcaption>Gearing up for launch.</figcaption></figure><p>At 11.30 pm, the toggle was switched and test bookings were made on production with actual drivers and employees. The GO-VIET COO took the first ride. All was good.</p><p>Excitement was running high, and even GOJEK CEO Nadiem Makarim was in Ho-Chi Minh City (the first of GO-VIET’s operation centres) for the launch.</p><p>As the clock struck midnight, Trifecta hit the button, and specks of red lit up on the map within users’ GO-VIET apps. A few driver partners present at the launch venue confirmed that everything was working according to plan. It was done, we were live.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1280/1*rGFDGc901ooLhdNl_GL7gw.jpeg\" class=\"kg-image\"><figcaption>Celebrating a job well done.</figcaption></figure><blockquote>GOJEK had gone international.</blockquote><p><em><em>Cheers, high fives, applause, congratulations, the pop of celebratory drinks.</em></em></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/2592/1*dhwgBni28DIMJSGDuGr_vQ.jpeg\" class=\"kg-image\"><figcaption>Vietnam, we’re here!</figcaption></figure><p>Rumour has it, everyone present tried to guess how many orders GO-VIET would garner on its first day. Expectations were exceeded. The brand new service did &gt;2,500 orders on day one, more than what GOJEK achieved on its first day in Indonesia.</p><p>It had been a long journey of planning and learning. The job was done; the path to Vietnam was charted. In the month of September, a formal launch was held, adding Hanoi to the list of cites the service operated in.</p><p>GOJEK, Indonesia’s first unicorn, had finally left home to find its place in the world. Now, all eyes turned to Thailand. Read what awaited us there in the <a href=\"http://bit.ly/2SmYCZ3\" rel=\"noopener\">part three</a> of this series.</p><hr><p>Liked what you read? Have our updates delivered straight to your inbox. <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/good-morning-vietnam-how-gojek-went-international/","canonical_url":null,"uuid":"e532311c-c2fe-4c5e-b749-0485b54d8f93","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2d7e47aa22c4066f83ca4","reading_time":6}}]},"cultureFeaturedPost":{"edges":[{"node":{"id":"Ghost__Post__5eb128b6f7c7da001effcd8c","title":"Gojek’s Best Practices to Work From Home [Beta]","slug":"gojeks-best-practices-to-work-from-home-beta","featured":true,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_g1gfRNDqLKJWtAwURoFgaw.jpg","excerpt":"How to come to terms with ‘working from home’, and a few guidelines to help with the transition.","custom_excerpt":"How to come to terms with ‘working from home’, and a few guidelines to help with the transition.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"16 March, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T14:19:58.000+05:30","published_at":"2020-03-16T09:30:00.000+05:30","updated_at":"2020-05-12T11:52:22.000+05:30","meta_title":null,"meta_description":"How to come to terms with ‘working from home’, and a few guidelines to help with the transition.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Kevin Aluwi\n\nIt’s been a trying couple of weeks since the Coronavirus outbreak. As\ngovernments and authorities encourage social distancing, many companies — Gojek\nincluded — have started to put a heightened emphasis on working from home. As an\norganization with a distributed workforce, we have offices in Indonesia,\nSingapore, Vietnam, Thailand, Philippines, and India, a remote strategy has\nalways been embedded in our DNA. This post details some lessons and what we\nthink are ‘best practices’ to follow in a Work from home (WFH) situation.\n\nAt the outset, it’s important to call out a key point: During this time of\nuncertainty, employees may not be at their productive best. There’s a lot of\nanxiety with family and friends, and rightly so. WFH requires high \nAccountability, but also Empathy and Trust. Be mindful, this is a stressful time\nfor everyone. Trust your colleagues to do the best they can given the times.\n\nBefore we begin — context\nGojek has always been mindful of our employees’ health and wellbeing. We have\nunlimited sick leaves, and encourage employees to work where and when they are\nat their productive best. We have proven success — with functional leaders\nworking fully remotely without compromising on effectively launching org-wide\ninitiatives: career ladders, new hiring programs, even setting up an entire new\nfunction. But this is by all means not a comprehensive or a definitive guide.\nThink of this as a ‘beta’ document summarising some lessons in a bid to get\nfeedback from you, our readers. We’re putting this out there so we can learn\ntogether to do better.\n\nIf you think we’ve missed out on something, please leave a comment — will help\nus a long way in fine-tuning our own practices. These are trying times, and we\nwant to do what is right for everyone.\n\n(1)The right environment\nOffice spaces provide designated areas employees start associating with work and\nfocus. This may not be the case in a home environment, so it is important to\nrecreate this space. Some ideal prerequisites include an area with plenty of\nlight, minimal distractions and a comfortable desk and chair.\n\nWorking from home also potentially involves sharing the space with other family\nmembers / housemates. It’s important to set guidelines to indicate when you are\nat work and not to be disturbed — one team member for example set up a plush toy\non a desk as a makeshift ‘Do Not Disturb’ sign!\n\nOnce a setup is established, don’t neglect the importance of taking breaks. The\nabsence of colleagues and social interaction should not lead to long\nuninterrupted sessions. Set a timer to alert you if you’ve been continuously at\nyour desk for over two hours. Take short breaks to stretch your legs. Use the\ntime to also spend time with family, or work on personal projects that require\nthe occasional check-in! There’s a silver lining to every scenario :)\n\nThis whole point might seem obvious and rather trivial, but is critical when you\nwant focus, and don’t have your colleagues to ‘pair’ with you and nudge you.\n\n(2) The right tools\nEnsure the coordination tools used by your organisation / team are installed on\nyour laptop and working properly. At Gojek we use Slack for messaging, Zoom for\nvideo conferencing, and Asana and JIRA for project coordination. Here are a few\nquick tips from our WFH Best Practices\n[https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing] \non how best to use them in a remote work scenario:\n\nOver communicate: Set clear expectations and create WFH Rules of Engagement for\nyour team. What cadences need to be synchronous vs. async? Set your Slack status\nto away every time you leave the computer for a break, and update it once you’re\nback. Clearly request responses to critical communications you send, and do the\nsame to confirm you’ve received an update (even Slack’s emoji responses will do,\nas long as there is recorded acknowledgement).\n\nDocument everything: Meetings may become increasingly asynchronous, so it is\nimportant to document all the items discussed and assigned. Record key decisions\nin a centralized decision log. This can be done via written notes hosted in a\ncommon cloud folder, as well as tasks on Asana for accountability. Minimise\ncommunication gaps.\n\nChoose the most high-context communication medium available: A lot gets lost in\ntranslation when you don’t have visual cues. Use video conferencing whenever\npossible. Failing video, (spotty connection) default to a phone call, then chat.\nIn chat, don’t hesitate to use emojis liberally to convey your tone! ?\n\nPro tip: In Zoom preferences, set the option to video muted/off as the default —\nthen manually enable them once you join a meeting. It can help avoid a few\nfacepalms. Not everyone has the perfect Instagram workspace at home, so Zoom’s\nbackground masks\n[https://support.zoom.us/hc/en-us/articles/204674889-Zoom-Rooms-Customized-Background] \nwill help.\n\n(3) The right mindset\nThe shift to remote will be alien for a lot of us. Be respectful and considerate\n— everyone’s doing the best they can. Set up core work hours when the entire\nteam is expected to be available and clearly define these on a calendar. Be\nmindful of each other’s calendars and schedule sensitively so all concerned\nparties can extract the maximum output from their workday.\n\nQuantify what is being done at the end of each day, and by whom. Transparency is\nkey here. You can shape this right at the beginning during daily team meetings.\nWhen social interactions with colleagues are virtual, you as a manager, or an\nemployer, tend to worry about accountability. Maintain a notepad of things you\ndid, what you’re working on, when others can expect work to be delivered, and\nwhen you will respond to messages or requests. This reduces anxiety and helps\nyou plan your day. In the midst of all this, don’t forget to respect your own\ntime as well. Define your working hours, and stop once they are up.\n\nIt’s equally easy to also overwork yourself when working from home. Be mindful\nof your on-screen time.\n\nSnackable hacks\nWe spoke to a bunch of Gojek folks to get some of their actionable WFH hacks:\n\n * If you find your attention span dwindling, take time off, browse your\n   favorite social media app, go for a walk — get that Vitamin D in, talk to a\n   friend/family member etc…\n * Eat on time, eat healthy — set timelines for this on your calendar so you’re\n   not skipping meals.\n * Create a mini-team virtual group just for social interactions that do not\n   discuss work — movies, books, art, interesting articles etc.\n * Hydrate. Stretch every 30 minutes. Hydrate. Have strict timelines on when you\n   eat. Do not sway here. Did we say hydrate? Hydrate.\n * Team calls should start with something fun — a new fact you learnt, an\n   interesting fact you learnt, or something interesting going on in team\n   member’s lives outside of work.\n * Change into a separate set of clothes during core working hours, even if they\n   are just a different set of comfortable PJs. It helps delineate “work time”\n   from “waking up” or “me time” when both are happening in the same place. It’s\n   tempting to work in bed while wearing the clothes you slept in, but avoid\n   this!\n * Your calendar is sacred — set timers for food breaks, leisure walks, time\n   off, family obligations etc.\n * Call out good work! Do this more often than usual and with consistency. Start\n   your meetings with kudos.\n\nWe’re trying to get better\nThis is an important shift in how organisations get work done. While this guide\nis a foundation to help us figure things out, we don’t have all the answers.\n\nIf you have significant experience with remote work\n[https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing]\n, we’d like to hear your thoughts. Feel free to drop into our comments.\n\nThat’s all from us for now, stay safe!\n\nP.S. Empathy & Trust — The two key words you want to keep in mind. ✌️","html":"<p>By Kevin Aluwi</p><p>It’s been a trying couple of weeks since the Coronavirus outbreak. As governments and authorities encourage social distancing, many companies — Gojek included — have started to put a heightened emphasis on working from home. As an organization with a distributed workforce, we have offices in Indonesia, Singapore, Vietnam, Thailand, Philippines, and India, a remote strategy has always been embedded in our DNA. This post details some lessons and what we think are ‘best practices’ to follow in a Work from home (WFH) situation.</p><p><em><em>At the outset, it’s important to call out a key point: During this time of uncertainty, employees may not be at their productive best. There’s a lot of anxiety with family and friends, and rightly so. WFH requires high </em></em><strong><strong><em><em>Accountability</em></em></strong></strong><em><em>, but also </em></em><strong><strong><em><em>Empathy</em></em></strong></strong><em><em> and </em></em><strong><strong><em><em>Trust</em></em></strong></strong><em><em>. Be mindful, this is a stressful time for everyone. Trust your colleagues to do the best they can given the times.</em></em></p><h1 id=\"before-we-begin-context\"><strong>Before we begin — context</strong></h1><p>Gojek has always been mindful of our employees’ health and wellbeing. We have unlimited sick leaves, and encourage employees to work where and when they are at their productive best. <strong><strong>We have proven success</strong></strong> — with functional leaders working fully remotely without compromising on effectively launching org-wide initiatives: career ladders, new hiring programs, even setting up an entire new function. But this is by all means <strong><strong>not</strong></strong> a comprehensive or a definitive guide. Think of this as a ‘beta’ document summarising some lessons in a bid to get feedback from you, our readers. We’re putting this out there so we can learn together to do better.</p><p><em><em>If you think we’ve missed out on something, please leave a comment — will help us a long way in fine-tuning our own practices. These are trying times, and we want to do what is right for everyone.</em></em></p><h1 id=\"-1-the-right-environment\"><strong>(1)The right environment</strong></h1><p>Office spaces provide designated areas employees start associating with work and focus. This may not be the case in a home environment, so it is important to recreate this space. Some ideal prerequisites include an area with plenty of light, minimal distractions and a comfortable desk and chair.</p><p>Working from home also potentially involves sharing the space with other family members / housemates. It’s important to set guidelines to indicate when you are at work and not to be disturbed — one team member for example set up a plush toy on a desk as a makeshift ‘Do Not Disturb’ sign!</p><p>Once a setup is established, don’t neglect the importance of taking breaks. The absence of colleagues and social interaction should not lead to long uninterrupted sessions. Set a timer to alert you if you’ve been continuously at your desk for over two hours. Take short breaks to stretch your legs. Use the time to also spend time with family, or work on personal projects that require the occasional check-in! There’s a silver lining to every scenario :)</p><p><strong><strong>This whole point might seem obvious and rather trivial, but is critical when you want focus, and don’t have your colleagues to ‘pair’ with you and nudge you.</strong></strong></p><h1 id=\"-2-the-right-tools\"><strong>(2) The right tools</strong></h1><p>Ensure the coordination tools used by your organisation / team are installed on your laptop and working properly. At Gojek we use Slack for messaging, Zoom for video conferencing, and Asana and JIRA for project coordination. Here are a few quick tips from our <a href=\"https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing\" rel=\"noopener\">WFH Best Practices</a> on how best to use them in a remote work scenario:</p><p><strong><strong>Over communicate:</strong></strong> Set clear expectations and create WFH Rules of Engagement for your team. What cadences need to be synchronous vs. async? Set your Slack status to away every time you leave the computer for a break, and update it once you’re back. Clearly request responses to critical communications you send, and do the same to confirm you’ve received an update (even Slack’s emoji responses will do, as long as there is recorded acknowledgement).</p><p><strong><strong>Document everything:</strong></strong> Meetings may become increasingly asynchronous, so it is important to document all the items discussed and assigned. Record key decisions in a centralized decision log. This can be done via written notes hosted in a common cloud folder, as well as tasks on Asana for accountability. Minimise communication gaps.</p><p><strong><strong>Choose the most high-context communication medium available:</strong></strong> A lot gets lost in translation when you don’t have visual cues. Use <strong><strong>video</strong></strong> conferencing whenever possible. Failing video, (spotty connection) default to a phone call, then chat. In chat, don’t hesitate to use emojis liberally to convey your tone! ?</p><p><strong><strong><em><em>Pro tip:</em></em></strong></strong> In Zoom preferences, set the option to<strong><strong> video</strong></strong> <strong><strong>muted/off </strong></strong>as the default — then manually enable them once you join a meeting. It can help avoid a few facepalms. Not everyone has the perfect Instagram workspace at home, so <a href=\"https://support.zoom.us/hc/en-us/articles/204674889-Zoom-Rooms-Customized-Background\" rel=\"noopener\">Zoom’s background masks</a> will help.</p><h1 id=\"-3-the-right-mindset\"><strong>(3) The right mindset</strong></h1><p>The shift to remote will be alien for a lot of us. Be respectful and considerate — everyone’s doing the best they can. Set up core work hours when the entire team is expected to be available and clearly define these on a calendar. Be mindful of each other’s calendars and schedule sensitively so all concerned parties can extract the maximum output from their workday.</p><p>Quantify what is being done at the end of each day, and by whom. Transparency is key here. You can shape this right at the beginning during daily team meetings. When social interactions with colleagues are virtual, you as a manager, or an employer, tend to worry about accountability. Maintain a notepad of things you did, what you’re working on, when others can expect work to be delivered, and when you will respond to messages or requests. This reduces anxiety and helps you plan your day. In the midst of all this, don’t forget to respect your own time as well. Define your working hours, and stop once they are up.</p><p><em>It’s equally easy to also overwork yourself when working from home. Be mindful of your on-screen time.</em></p><h1 id=\"snackable-hacks\"><strong>Snackable hacks</strong></h1><p>We spoke to a bunch of Gojek folks to get some of their actionable WFH hacks:</p><ul><li>If you find your attention span dwindling, take time off, browse your favorite social media app, go for a walk — get that Vitamin D in, talk to a friend/family member etc…</li><li>Eat on time, eat healthy — set timelines for this on your calendar so you’re not skipping meals.</li><li>Create a mini-team virtual group just for social interactions that do not discuss work — movies, books, art, interesting articles etc.</li><li>Hydrate. Stretch every 30 minutes. Hydrate. Have strict timelines on when you eat. Do not sway here. Did we say hydrate? Hydrate.</li><li>Team calls should start with something fun — a new fact you learnt, an interesting fact you learnt, or something interesting going on in team member’s lives outside of work.</li><li>Change into a separate set of clothes during core working hours, even if they are just a different set of comfortable PJs. It helps delineate “work time” from “waking up” or “me time” when both are happening in the same place. It’s tempting to work in bed while wearing the clothes you slept in, but avoid this!</li><li>Your calendar is sacred — set timers for food breaks, leisure walks, time off, family obligations etc.</li><li>Call out good work! Do this more often than usual and with consistency. Start your meetings with kudos.</li></ul><h1 id=\"we-re-trying-to-get-better\"><strong>We’re trying to get better</strong></h1><p>This is an important shift in how organisations get work done. While this guide is a foundation to help us figure things out, we don’t have all the answers.</p><p>If you have significant experience with <a href=\"https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing\" rel=\"noopener\">remote work</a>, we’d like to hear your thoughts. Feel free to drop into our comments.</p><p>That’s all from us for now, stay safe!</p><p>P.S. Empathy &amp; Trust — The two key words you want to keep in mind. ✌️</p>","url":"https://gojek-ghost.zysk.in/gojeks-best-practices-to-work-from-home-beta/","canonical_url":null,"uuid":"9c6ef422-8c4d-4d75-a8a4-420f3ab462e3","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb128b6f7c7da001effcd8c","reading_time":5}}]},"culturePosts":{"edges":[{"node":{"id":"Ghost__Post__5ec2ca6c7aa22c4066f83b74","title":"From Novice to Code Master","slug":"from-novice-to-code-master","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_ktwn_4xTyzI4onUAYxZd8Q.png","excerpt":"How employing the code kata practicing technique used at Gojek’s Bootcamp helps engineers hone their skills.","custom_excerpt":"How employing the code kata practicing technique used at Gojek’s Bootcamp helps engineers hone their skills.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"16 September, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T23:18:28.000+05:30","published_at":"2019-09-16T23:47:00.000+05:30","updated_at":"2020-05-18T23:53:22.000+05:30","meta_title":null,"meta_description":"How employing the code kata practicing technique used at Gojek’s Bootcamp helps engineers hone their skills.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Ali Qornan\n\nHow does one become a master at something? Let’s take music as an example. It\nhelps to know the theory and to understand the mechanics of your instrument. It\nalso helps to have talent. Having a good partner to watch your back doesn’t hurt\neither. But there’s more to it.\n\nWhy are The Beatles [https://en.wikipedia.org/wiki/The_Beatles], who formed in\nLiverpool in 1960, considered one of the greatest bands in history\n[https://www.quora.com/Why-are-The-Beatles-the-greatest-band-in-history/answer/Giliana-P-Garc%C3%ADa-Acevedo-1]\n? Why doesn’t everyone else achieve the same level of success?\n\n> The difference between master and beginner is the amount of practice.\nThe Beatles applied the fundamentals they learned over and over again, using\nfeedback to get better every time. All told, they performed for 270 nights in\njust over a year-and-a-half. By the time they had their first taste of success\nin 1964, they had performed live an estimated 1,200 times. Most bands today\ndon’t perform that much in their entire career.\n\nThe 10,000 Hours rule\nIn the early 1990s, psychologist K. Anders Ericsson and two of his colleagues at\nBerlin’s elite Academy of Music conducted a study\n[http://projects.ict.usc.edu/itw/gel/EricssonDeliberatePracticePR93.PDF]. With\nthe help of the Academy, they interviewed twelve expert pianists (8 men and 4\nwomen) and 12 amateurs (7 men and 5 women).\n\nThe amateurs never practiced more than about three hours a week over the course\nof their childhood, and by the age of twenty, they had totaled two thousand\nhours of practice. The experts, on the other hand, steadily increased their\npractice time every year, until by the age of twenty, they had reached ten\nthousand hours.\n\n> “To become a chess grandmaster also seems to take about ten years. (Only the\nlegendary Bobby Fisher got to that elite level in less than that amount of time:\nit took him nine years.) And what’s ten years? Well, it’s roughly how long it\ntakes to put in ten thousand hours of hard practice. Ten thousand hours is the\nmagic number of greatness.”\n> Malcolm Gladwell, in his book “Outliers: The Story of Success\n[http://amzn.to/wgo1hw]”\nThe interesting thing about that number, of course, is that ten thousand hours\nis an enormous amount of time. It’s all but impossible to reach that number all\nby yourself by the time you’re a young adult. This would require encouraging\nparents and some measure of wealth, which would avoid the need to hold down\nadditional jobs that would eat into valuable practice time.\n\nWhat Happens in the Software Industry\nIn the software industry, we take developers trained in theory and throw them\nstraight into the deep-end, working on a project with no real precedent to draw\nfrom. It’s like taking a group of kids to fight against the big gang in the\ntown. But that is not an issue because, in software engineering, we do our\npracticing on the job, and that’s why we make mistakes on the job. But at the\nend of the day, we want to be great while still managing the objectives. For\nthat purpose, we need to find ways of splitting the practice from the\nprofession. A practice method that is effective and without taking up too much\ntime.\n\n> This is where CodeKata comes in.\nThe CodeKata\nKata [https://en.wikipedia.org/wiki/Kata] is an exercise in Karate to execute a\nspecified series of a variety of moves, with stepping and turning, while\nattempting to maintain perfect form. It teaches the student about proper form\nand position to helped them visualize different scenarios for each motion and\ntechnique. Traditionally, kata is taught in stages. Previously learned kata are\nrepeated to show better technique or power as a student acquires knowledge and\nexperience. It is common for students to repeat every kata they have learned but\nat an improved level of quality.\n\nSandy Vs. SpongebobCodeKata is an attempt to bring this element of practice to software\ndevelopment. The intent behind CodeKata is similar to Karate Kata. Each is a\nshort exercise. It repeated multiple times, adding little improvements in each\ncycle. Some involve programming and can be coded in many different ways. Some\ninvolve thinking about the issues behind programming and design. These are\nunlikely to have a single correct answer.\n\n> Remember that the point of the kata is not arriving at the correct answer. The\npoint is the stuff you learn along the way. The goal is the practice, not the\nsolution.\nHow Is This Accomplished at Gojek?\nAt Gojek, there’s a program for employees called Engineering Bootcamp\n[https://blog.gojekengineering.com/what-is-the-go-jek-engineering-bootcamp-de7778836da9]\n. Basically, it is weeks of intense hands-on learning designed to unlearn and\nequip skills needed to be a world-class engineer.\n\nCore Engineering BootcampAt Bootcamp, the way coaches taught us (participants)\nis similar to CodeKata. We have a code drill session in the afternoon to solve\none problem by using Java. After the class ends, we solve the same problem again\nas homework in the evening using Ruby. There are many things we did in our code\ndrill session, that really helped us develop in CodeKata. Those are:\n\n1. Set Rules\nWe have rules called Non-Negotiable Etiquette. If you violate one of the rules,\nyou have to rm -rf your code and start it again from scratch. What is rm -rf? It\nis a basic command on Unix system to remove files or directories from the\nmachine forever.\n\nNon Negotiable Etiquette\nIf you violate one, rm -rf! never love your code </3\n\n\n--------------------------------------------------------------------------------\n\n 1.  Indentation and spacing between code constructs (classes/methods/specs)\n     must be consistent.\n 2.  Use only spaces (no tabs) for indentation.\n 3.  Newlines at end of file.\n 4.  Follow accepted naming conventions for your language/framework.\n 5.  Follow accepted naming file and Directory structure for your\n     language/framework.\n 6.  Use namespaces.\n 7.  No comments/Unused Code/Unused file/Unused folder must ever be checked in.\n 8.  Runtime environment should be consistent with IDE environment -  i.e there\n     should be no difference in running a build or a spec from your IDE and from\n     the command line.\n 9.  Use .gitignore.\n 10. Ensure there is a README.md that includes problem description, dev\n     environment setup, build instructions, and run instructions.\n 11. Test Driven Development (this should show in clear pattern in the commit\n     log - one spec, one code change per commit)\n\nCan you imagine the feeling when code that we wrote with blood and tears needs\nto be deleted for one small mistake? Is that acceptable?\n\n> Yes, you must not love your code.\nThat small mistake is not tolerable in production and even development. It could\ncause bugs, errors or other things that may become a bottleneck. But of course,\nwe don’t rm -rf in work 😂. It’s just a practice so that we don’t get overly\nattached to the code, remain careful about mistakes, and most importantly —\nmaintain quality.\n\n2. Practise Pair Programming\nAs the name implies, pair programming is where two developers work on one\nmachine. We only have a keyboard and a mouse for each pair. One developer acts\nas the driver who codes while the other serves as the observer who checks the\ncode being written, proofreads and spell-checks, and also figures out where to\ngo next. These roles can be switched at any time: the driver will then become\nthe observer and vice versa.\n\nPair Programming greatly helps us in CodeKata, because:\n\n * It’s harder to procrastinate. Working as a team means you can’t stop and\n   check your email, Slack, Facebook or WhatsApp every few minutes.\n * When someone shares a problem you are going through, you feel less defeated\n   and more positive about trying again.\n * Increases software quality without impacting much on time to deliver. It will\n   cost only 15% of the development time according to this study\n   [https://www.economist.com/technology-quarterly/2001/09/20/agility-counts].\n   But with increased quality comes big savings later in the project.\n\n3. Have a Short Cycle\nThe point of CodeKata is to get experience from practice. In order to achieve\nthat, we solve the same problem multiple times. We try different approaches and\nsolutions to experience each advantage and disadvantage. While we work on it, we\nalso try to add little improvements for every cycle. But sometimes, we can also\ntreat the cycle as an iteration of solving the problem.\n\nBecause CodeKata is a practicing method and not project development. It’s not\nsupposed to be worked on for the long run. For that reason, we only have 20–30\nmins for every cycle (sometimes even shorter).\n\nAfter the Mini Retro, we showcase our code to other participants in the class.\nWhy do we need to do it? Even though the whole class is working on the same\nproblem, we may interpret it differently and have hundreds of possible different\nsolutions. Doing a showcase will tell others about progress and approaches. It\nwill trigger a discussion and synchronize the context for everyone. At the end\nof the day, we will converge at the current best solution.\n\n> It’s similar to Agile Development. You deliver something to the customer as soon\nas possible to get feedback faster.\nA Few Final Thoughts\nMy tips for CodeKata are:\n\n * Find a place and time where you won’t be interrupted.\n * Focus on the essential elements of the Kata.\n * Remember to look for feedback for every major decision\n * If it helps, keep a journal of your progress\n * Have discussion groups with other developers, but try to have completed the\n   kata first\n\nCore Engineering BootcampThank you for reading this blog! Hope you found it\nhelpful. Cheers! 🙂\n\n\n--------------------------------------------------------------------------------\n\nIf you’d like our updates to reach your inbox directly, subscribe to our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Ali Qornan</p><p>How does one become a master at something? Let’s take music as an example. It helps to know the theory and to understand the mechanics of your instrument. It also helps to have talent. Having a good partner to watch your back doesn’t hurt either. But there’s more to it.</p><p>Why are <a href=\"https://en.wikipedia.org/wiki/The_Beatles\" rel=\"noopener\">The Beatles</a>, who formed in Liverpool in 1960, considered one of <a href=\"https://www.quora.com/Why-are-The-Beatles-the-greatest-band-in-history/answer/Giliana-P-Garc%C3%ADa-Acevedo-1\" rel=\"noopener\">the greatest bands in history</a>? Why doesn’t everyone else achieve the same level of success?</p><blockquote>The difference between master and beginner is the amount of practice.</blockquote><p>The Beatles applied the fundamentals they learned over and over again, using feedback to get better every time. All told, they performed for 270 nights in just over a year-and-a-half. By the time they had their first taste of success in 1964, they had performed live an estimated 1,200 times. Most bands today don’t perform that much in their entire career.</p><h1 id=\"the-10-000-hours-rule\">The 10,000 Hours rule</h1><p>In the early 1990s, psychologist K. Anders Ericsson and two of his colleagues at Berlin’s elite Academy of Music conducted a <a href=\"http://projects.ict.usc.edu/itw/gel/EricssonDeliberatePracticePR93.PDF\" rel=\"noopener\">study</a>. With the help of the Academy, they interviewed twelve expert pianists (8 men and 4 women) and 12 amateurs (7 men and 5 women).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/912/1*XesRz3d5FMCzIOfm7Yk3hA.png\" class=\"kg-image\"></figure><p>The amateurs never practiced more than about three hours a week over the course of their childhood, and by the age of twenty, they had totaled two thousand hours of practice. The experts, on the other hand, steadily increased their practice time every year, until by the age of twenty, they had reached ten thousand hours.</p><blockquote><em><em>“To become a chess grandmaster also seems to take about ten years. (Only the legendary Bobby Fisher got to that elite level in less than that amount of time: it took him nine years.) And what’s ten years? Well, it’s roughly how long it takes to put in ten thousand hours of hard practice. <strong><strong>Ten thousand hours</strong></strong> is the magic number of greatness.”</em></em></blockquote><blockquote><em><em>Malcolm Gladwell, in his book “<a href=\"http://amzn.to/wgo1hw\" rel=\"noopener\"><em>Outliers: The Story of Success</em></a><em>”</em></em></em></blockquote><p>The interesting thing about that number, of course, is that ten thousand hours is an enormous amount of time. It’s all but impossible to reach that number all by yourself by the time you’re a young adult. This would require encouraging parents and some measure of wealth, which would avoid the need to hold down additional jobs that would eat into valuable practice time.</p><h1 id=\"what-happens-in-the-software-industry\">What Happens in the Software Industry</h1><p>In the software industry, we take developers trained in theory and throw them straight into the deep-end, working on a project with no real precedent to draw from. It’s like taking a group of kids to fight against the big gang in the town. But that is not an issue because, in software engineering, we do our practicing on the job, and that’s why we make mistakes on the job. But at the end of the day, we want to be great while still managing the objectives. For that purpose, we need to find ways of splitting the practice from the profession. A practice method that is effective and without taking up too much time.</p><blockquote><em><em>This is where CodeKata comes in.</em></em></blockquote><h1 id=\"the-codekata\">The CodeKata</h1><p><a href=\"https://en.wikipedia.org/wiki/Kata\" rel=\"noopener\"><strong><strong>Kata</strong></strong></a> is an exercise in Karate to execute a specified series of a variety of moves, with stepping and turning, while attempting to maintain perfect form. It teaches the student about proper form and position to helped them visualize different scenarios for each motion and technique. Traditionally, kata is taught in stages. Previously learned kata are repeated to show better technique or power as a student acquires knowledge and experience. It is common for students to repeat every kata they have learned but at an improved level of quality.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/670/1*icPku4JdhwTHMvyV7uPLZw.gif\" class=\"kg-image\"><figcaption>Sandy Vs. Spongebob</figcaption></figure><p><strong><strong>CodeKata</strong></strong> is an attempt to bring this element of practice to software development. The intent behind CodeKata is similar to Karate Kata. Each is a short exercise. It repeated multiple times, adding little improvements in each cycle. Some involve programming and can be coded in many different ways. Some involve thinking about the issues behind programming and design. These are unlikely to have a single correct answer.</p><blockquote>Remember that the point of the kata is not arriving at the correct answer. The point is the stuff you learn along the way. The goal is the practice, not the solution.</blockquote><h1 id=\"how-is-this-accomplished-at-gojek\">How Is This Accomplished at Gojek?</h1><p>At Gojek, there’s a program for employees called <a href=\"https://blog.gojekengineering.com/what-is-the-go-jek-engineering-bootcamp-de7778836da9\" rel=\"noopener\">Engineering Bootcamp</a>. Basically, it is weeks of intense hands-on learning designed to unlearn and equip skills needed to be a world-class engineer.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/3840/1*uo6NJ-s_43bjcY2V_JDSPQ.jpeg\" class=\"kg-image\"><figcaption>Core Engineering Bootcamp</figcaption></figure><p>At Bootcamp, the way coaches taught us (participants) is similar to CodeKata. We have a code drill session in the afternoon to solve one problem by using Java. After the class ends, we solve the same problem again as homework in the evening using Ruby. There are many things we did in our code drill session, that really helped us develop in CodeKata. Those are:</p><h2 id=\"1-set-rules\">1. Set Rules</h2><p>We have rules called <strong><strong>Non-Negotiable Etiquette</strong></strong>. If you violate one of the rules, you have to <em><em>rm -rf</em></em> your code and start it again from scratch. What is <em><em>rm -rf</em></em>? It is a basic command on Unix system to remove files or directories from the machine forever.</p><h1 id=\"non-negotiable-etiquette\">Non Negotiable Etiquette</h1><p>If you violate one, rm -rf! never love your code &lt;/3</p><hr><ol><li>Indentation and spacing between code constructs (classes/methods/specs) must be consistent.</li><li>Use only spaces (no tabs) for indentation.</li><li>Newlines at end of file.</li><li>Follow accepted naming conventions for your language/framework.</li><li>Follow accepted naming file and Directory structure for your language/framework.</li><li>Use namespaces.</li><li>No comments/Unused Code/Unused file/Unused folder must ever be checked in.</li><li>Runtime environment should be consistent with IDE environment -  i.e there should be no difference in running a build or a spec from your IDE and from the command line.</li><li>Use .gitignore.</li><li>Ensure there is a README.md that includes problem description, dev environment setup, build instructions, and run instructions.</li><li>Test Driven Development (this should show in clear pattern in the commit log - one spec, one code change per commit)</li></ol><p>Can you imagine the feeling when code that we wrote with blood and tears needs to be deleted for one small mistake? Is that acceptable?</p><blockquote>Yes, you must not love your code.</blockquote><p>That small mistake is not tolerable in production and even development. It could cause bugs, errors or other things that may become a bottleneck. But of course, we don’t <em><em>rm -rf</em></em> in work 😂. It’s just a practice so that we don’t get overly attached to the code, remain careful about mistakes, and most importantly — maintain quality.</p><h2 id=\"2-practise-pair-programming\">2. Practise Pair Programming</h2><p>As the name implies, pair programming is where two developers work on one machine. We only have a keyboard and a mouse for each pair. One developer acts as the driver who codes while the other serves as the observer who checks the code being written, proofreads and spell-checks, and also figures out where to go next. These roles can be switched at any time: the driver will then become the observer and vice versa.</p><p>Pair Programming greatly helps us in CodeKata, because:</p><ul><li>It’s harder to procrastinate. Working as a team means you can’t stop and check your email, Slack, Facebook or WhatsApp every few minutes.</li><li>When someone shares a problem you are going through, you feel less defeated and more positive about trying again.</li><li>Increases software quality without impacting much on time to deliver. It will cost only 15% of the development time according to this <a href=\"https://www.economist.com/technology-quarterly/2001/09/20/agility-counts\" rel=\"noopener\">study</a>. But with increased quality comes big savings later in the project.</li></ul><h2 id=\"3-have-a-short-cycle\">3. Have a Short Cycle</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/982/1*14PeUCfZheM8mK7xm6FL8w.png\" class=\"kg-image\"></figure><p>The point of CodeKata is to get experience from practice. In order to achieve that, we solve the same problem multiple times. We try different approaches and solutions to experience each advantage and disadvantage. While we work on it, we also try to add little improvements for every cycle. But sometimes, we can also treat the cycle as an iteration of solving the problem.</p><p>Because CodeKata is a practicing method and not project development. It’s not supposed to be worked on for the long run. For that reason, we only have 20–30 mins for every cycle (sometimes even shorter).</p><p>After the Mini Retro, we showcase our code to other participants in the class. Why do we need to do it? Even though the whole class is working on the same problem, we may interpret it differently and have hundreds of possible different solutions. Doing a showcase will tell others about progress and approaches. It will trigger a discussion and synchronize the context for everyone. At the end of the day, we will converge at the current best solution.</p><blockquote>It’s similar to Agile Development. You deliver something to the customer as soon as possible to get feedback faster.</blockquote><h1 id=\"a-few-final-thoughts\">A Few Final Thoughts</h1><p>My tips for CodeKata are:</p><ul><li>Find a place and time where you won’t be interrupted.</li><li>Focus on the essential elements of the Kata.</li><li>Remember to look for feedback for every major decision</li><li>If it helps, keep a journal of your progress</li><li>Have discussion groups with other developers, but try to have completed the kata first</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/4240/1*53r0Npq_Thb0R0saRF08Rg.jpeg\" class=\"kg-image\"><figcaption>Core Engineering Bootcamp</figcaption></figure><p>Thank you for reading this blog! Hope you found it helpful. Cheers! 🙂</p><hr><p>If you’d like our updates to reach your inbox directly, <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">subscribe to our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/from-novice-to-code-master/","canonical_url":null,"uuid":"06de3753-36ed-4718-9680-03c9d7eb4e09","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca6c7aa22c4066f83b74","reading_time":7}},{"node":{"id":"Ghost__Post__5eb128bef7c7da001effcd90","title":"From Charts to Code","slug":"from-charts-to-code","featured":false,"feature_image":"https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_KJpSDpPskCA7V82Skkdxjg.jpg","excerpt":"The story of a business analyst who switched roles to become a product engineer, and the lessons he learned on the way.","custom_excerpt":"The story of a business analyst who switched roles to become a product engineer, and the lessons he learned on the way.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"08 September, 2019","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T14:20:06.000+05:30","published_at":"2019-09-08T09:30:00.000+05:30","updated_at":"2020-05-12T11:53:32.000+05:30","meta_title":null,"meta_description":"The story of a business analyst who switched roles to become a product engineer, and the lessons he learned on the way.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Carlos Arcenas\n\nPicture this: you’re several months into a position at one of the world’s\nfastest growing and innovative companies. You know that the work you do helps\nimpact the lives of thousands of people across Southeast Asia. You’re good at\nwhat you do — but you’re unsatisfied. On a personal level, the work doesn’t \nexcite you anymore.\n\nYou’re looking to hit the restart button on your career.\n\nThat’s how I felt after a stint as a business analyst. The work and the people\nwere great, but I wasn’t fully satisfied with what I was doing, and wanted to\nsupport the company in a different capacity. Luckily, thanks to Gojek’s internal\ntransfer programs, the entire organisation was open to me. From roles in product\nmanagement in Business Intelligence (they’re\n[https://www.gojek.io/all-open-positions?d=product&t=product-management&p=40f69246-2821-4a01-a359-64b5b6bf3b02] \n hiring\n[https://www.gojek.io/all-open-positions?d=product&t=product-management&p=e707ab22-f28f-45a7-9130-4c036ca5da91]\n!) to product and performance analysis in GoFood, I was definitely spoiled for\nchoice.\n\nHowever, thanks to the stream of articles coming from this very blog, I found\nmyself yearning to enter Gojek’s vast Engineering and Product Development (EPD)\ngroup. Having that kind of impact across Southeast Asia and getting to work with\nextremely talented engineers really appealed to me, and I felt I could make a\ngood contribution.\n\nBut before I could make my move, I had to make sure I knew what I was getting\ninto. Was my desire to move rising out of discontent, or something that could be\neasily resolved? If I could even get into EPD, what would I be working on?\n\nWould I even enjoy my new position, or find myself pining for something new\nagain? Would all my efforts have been for naught?\n\nThis post is for anyone in a similar situation, and lists things to consider\nbefore taking the leap:\n\nDiscern your motivation\nTake time to introspect, and pick apart your motivations. What’s driving your\ndecision to move? Are you unsatisfied with your current job? Do you have issues\nwith your role, your team, your boss? Are you looking for a new adventure in a\nbrand new area? Are you ready to put in time outside of work to train yourself\nfor the new position?\n\nAsking yourself these pointed questions can help define what you really yearn\nfor, and outline how to get there. Which brings us to the next point.\n\nFind your niche\nCheck your company’s job listings online to understand what they’re looking for.\nRead them thoroughly to understand the skills you need before applying. Are\nthere positions available for entry-level engineers? If so, prioritise these\npositions, as they require less programming experience, and provide a\nspringboard for you to supercharge your growth as an engineer.\n\nTalk to engineers\nThe biggest advantage of moving internally is you already have access to many of\nyour (potentially) future peers. Have a casual conversation with your company’s\ndevelopers to understand the expectations of the job. Use this as an opportunity\nto go beyond the job description — to really understand what it’s like working\nin your desired position. What technologies do they use on a day-to-day basis?\nDo they have to work odd hours? What’s the career path like? We don’t bite! (We\ndo love bytes, though!) ?\n\nBy this stage, I had become confident in my choice to jump to the Engineering\ndivision. I decided I wanted a new adventure to head on, established a niche I\ncould aim for, and did the groundwork. But the big challenge lay ahead:\n\nHow would I accomplish the jump? I knew Gojek had (and still has) high\nexpectations for anyone who wants to join the division.\n\nThe comforting factor was that Gojek is incredibly open to anybody who can prove\nthemselves. Many successful engineers in Gojek made jumps like the one I wanted\nto make, and some of them had no formal training in computer science or software\ndevelopment! If anything, that was proof that anybody who strove and acted had a\nshot at success.\n\nNow that you’ve made your choice: here are some tips to help propel you forward\nin tech as a beginner:\n\nUpgrade your skills:\nNow that you know what skills your desired position requires on a daily basis,\nit’s time to put in the hours training up. There are countless guides on the\nInternet for every technology under the Sun, so pick one and follow it through!\nDon’t forget to do the exercises included, and work on pet projects to really\nhone in on what you’ve just learned. Remember: practice makes perfect!\n\nJoin company training programs:\nAside from taking up personal projects, look around to see if your company has\nset up training and development programs. These would be directly aligned with\nwhat your company is looking for in engineers, and offer a framework for you to\ngrow with. In Gojek, we’re lucky to have two major programs:\n\n * The Gojek Tech Bootcamp. Designed for fresh grads taking on an entry-level\n   position in EPD across all divisions, the Bootcamp helps accelerate the\n   growth of would-be engineers through full immersion — the philosophy, the\n   practices, the works.\n * The GoAcademy program. Intended for anyone in the company looking for a\n   structured way to grow in areas from data analysis and visualisation to\n   personal wellness, GoAcademy sets up tutorials led by experienced engineers,\n   fully contextualised to meet the needs of GoTroops from different teams and\n   fields.\n\nContribute to open-source:\nIf you don’t have enough experience to meet the requirements of your desired\nposition, fret not! Look into contributing to open-source projects to level up.\nContributing to open source works very much like contributing to a product team.\nYou’ll be working on real bugs reported by users, or even proposing your own\nfeatures to implement. The biggest open-source projects have vibrant communities\nthat are very welcoming of newcomers — some even have bugs specifically marked\nfor solving by new developers!\n\nThe benefits of working on open-source only increases if you can find and\ncontribute to projects launched by your own company. (You can find a list of\nwhat Gojek has contributed so far over here [https://github.com/gojek].) You’ll\nget to showcase your collaboration and problem-solving skills to your future\nfellow engineers — all before sending in an application!\n\nBonus point: should you contribute using GitHub, GitLab, or any public tool,\nyou’ll have a portfolio ready to link to and show around!\n\nTalk to tech leads and product managers:\nMuch like talking to engineers, speaking with tech leads and product managers\nwill give you a sense of what the job would be like, but on a higher level. Use\nthis opportunity to ask about the current state of the team, the obstacles\nthey’re facing, and future of the product. Position yourself in their eyes as\nsomeone who is ready to learn and contribute — you’ll be making your mark before\nyou even have a formal interview!\n\nAs for me, I’m now a Product Engineer, part of Gojek’s Operations Platform,\nworking on our internal service product and helping maintain our customer\nsupport platform. It’s been almost a year since I made the decision to switch\nroles, and I’m glad to say that, even though it took several months to find a\nrole that met my desires and the needs of the company, I’ve found a place where\nI can grow and contribute to Gojek.\n\nWhile my new world is far removed from the spreadsheets and queries of my old\none, the skills I honed back then remain incredibly relevant and essential to my\nnew duties. The eye for numbers and detail I developed has been crucial for\nspotting points of improvement in development. The communication skills I gained\nfrom presenting to higher-ups has helped me describe my ideas clearly. My time\nas a business analyst was not a waste in the least bit — in fact, it helped me\ntowards faster growth and success in my new role.\n\nIf you’re in a similar position and contemplating changing roles, I hope this\narticle has helped in the decision process. ?\n\n\n--------------------------------------------------------------------------------\n\nWant our updates to appear in your inbox? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Carlos Arcenas</p><p>Picture this: you’re several months into a position at one of the world’s fastest growing and innovative companies. You know that the work you do helps impact the lives of thousands of people across Southeast Asia. You’re good at what you do — but you’re unsatisfied. On a personal level, the work doesn’t <em><em>excite</em></em> you anymore.</p><p><em><em>You’re looking to hit the restart button on your career.</em></em></p><p>That’s how I felt after a stint as a business analyst. The work and the people were great, but I wasn’t fully satisfied with what I was doing, and wanted to support the company in a different capacity. Luckily, thanks to Gojek’s internal transfer programs, the entire organisation was open to me. From roles in product management in Business Intelligence (<a href=\"https://www.gojek.io/all-open-positions?d=product&amp;t=product-management&amp;p=40f69246-2821-4a01-a359-64b5b6bf3b02\" rel=\"noopener\">they’re</a> <a href=\"https://www.gojek.io/all-open-positions?d=product&amp;t=product-management&amp;p=e707ab22-f28f-45a7-9130-4c036ca5da91\" rel=\"noopener\">hiring</a>!) to product and performance analysis in GoFood, I was definitely spoiled for choice.</p><p>However, thanks to the stream of articles coming from this very blog, I found myself yearning to enter Gojek’s vast Engineering and Product Development (EPD) group. Having that kind of impact across Southeast Asia and getting to work with extremely talented engineers really appealed to me, and I felt I could make a good contribution.</p><p>But before I could make my move, I had to make sure I knew what I was getting into. Was my desire to move rising out of discontent, or something that could be easily resolved? If I could even get into EPD, what would I be working on?</p><p><em><em>Would I even enjoy my new position, or find myself pining for something new again? Would all my efforts have been for naught?</em></em></p><p>This post is for anyone in a similar situation, and lists things to consider before taking the leap:</p><h1 id=\"discern-your-motivation\">Discern your motivation</h1><p>Take time to introspect, and pick apart your motivations. What’s driving your decision to move? Are you unsatisfied with your current job? Do you have issues with your role, your team, your boss? Are you looking for a new adventure in a brand new area? Are you ready to put in time outside of work to train yourself for the new position?</p><p>Asking yourself these pointed questions can help define what you really yearn for, and outline how to get there. Which brings us to the next point.</p><h1 id=\"find-your-niche\"><strong>Find your niche</strong></h1><p>Check your company’s job listings online to understand what they’re looking for. Read them thoroughly to understand the skills you need before applying. Are there <em><em>positions available for entry-level engineers</em></em>? If so, <strong><strong>prioritise these positions,</strong></strong> as they require less programming experience, and provide a springboard for you to supercharge your growth as an engineer.</p><h1 id=\"talk-to-engineers\"><strong>Talk to engineers</strong></h1><p>The biggest advantage of moving internally is you already have access to many of your (potentially) future peers. Have a casual conversation with your company’s developers to understand the expectations of the job. Use this as an opportunity to go beyond the job description — to really understand what it’s like working in your desired position. What technologies do they use on a day-to-day basis? Do they have to work odd hours? What’s the career path like? We don’t bite! (We do love <em><em>bytes</em></em>, though!) ?</p><p>By this stage, I had become confident in my choice to jump to the Engineering division. I decided I wanted a new adventure to head on, established a niche I could aim for, and did the groundwork. But the big challenge lay ahead:</p><p>How <em>would </em>I accomplish the jump? I knew Gojek had (and still has) high expectations for anyone who wants to join the division.</p><p>The comforting factor was that Gojek is incredibly open to anybody who can prove themselves. Many successful engineers in Gojek made jumps like the one I wanted to make, and some of them had no formal training in computer science or software development! If anything, that was proof that anybody who strove and acted had a shot at success.</p><p><em><em><em>Now that you’ve made your choice: here are some tips to help propel you forward in tech as a beginner:</em></em></em></p><h2 id=\"upgrade-your-skills-\"><strong>Upgrade your skills:</strong></h2><p>Now that you know what skills your desired position requires on a daily basis, it’s time to put in the hours training up. There are countless guides on the Internet for every technology under the Sun, so pick one and follow it through! Don’t forget to do the exercises included, and work on pet projects to really hone in on what you’ve just learned. Remember: practice makes perfect!</p><h2 id=\"join-company-training-programs-\"><strong>Join company training programs:</strong></h2><p>Aside from taking up personal projects, look around to see if your company has set up training and development programs. These would be directly aligned with what your company is looking for in engineers, and offer a framework for you to grow with. In Gojek, we’re lucky to have two major programs:</p><ul><li>The Gojek Tech Bootcamp. Designed for fresh grads taking on an entry-level position in EPD across all divisions, the Bootcamp helps accelerate the growth of would-be engineers through full immersion — the philosophy, the practices, the works.</li><li>The GoAcademy program. Intended for anyone in the company looking for a structured way to grow in areas from data analysis and visualisation to personal wellness, GoAcademy sets up tutorials led by experienced engineers, fully contextualised to meet the needs of GoTroops from different teams and fields.</li></ul><h2 id=\"contribute-to-open-source-\"><strong>Contribute to open-source:</strong></h2><p>If you don’t have enough experience to meet the requirements of your desired position, fret not! Look into contributing to <em><em>open-source projects</em></em> to level up. Contributing to open source works very much like contributing to a product team. You’ll be working on real bugs reported by users, or even proposing your own features to implement. The biggest open-source projects have vibrant communities that are very welcoming of newcomers — some even have bugs <em><em>specifically marked for solving by new developers</em></em>!</p><p>The benefits of working on open-source only increases if you can find and contribute to projects launched by your own company. (You can find a list of what Gojek has contributed so far over <a href=\"https://github.com/gojek\" rel=\"noopener\">here</a>.) You’ll get to showcase your collaboration and problem-solving skills to your future fellow engineers — all before sending in an application!</p><p><em><em>Bonus point: should you contribute using GitHub, GitLab, or any public tool, you’ll have a portfolio ready to link to and show around!</em></em></p><h2 id=\"talk-to-tech-leads-and-product-managers-\"><strong>Talk to tech leads and product managers:</strong></h2><p>Much like talking to engineers, speaking with tech leads and product managers will give you a sense of what the job would be like, but on a higher level. Use this opportunity to ask about the current state of the team, the obstacles they’re facing, and future of the product. Position yourself in their eyes as someone who is ready to learn and contribute — you’ll be making your mark before you even have a formal interview!</p><p>As for me, I’m now a Product Engineer, part of Gojek’s Operations Platform, working on our internal service product and helping maintain our customer support platform. It’s been almost a year since I made the decision to switch roles, and I’m glad to say that, even though it took several months to find a role that met my desires and the needs of the company, I’ve found a place where I can grow and contribute to Gojek.</p><p>While my new world is far removed from the spreadsheets and queries of my old one, the skills I honed back then remain incredibly relevant and essential to my new duties. The eye for numbers and detail I developed has been crucial for spotting points of improvement in development. The communication skills I gained from presenting to higher-ups has helped me describe my ideas clearly. My time as a business analyst was not a waste in the least bit — in fact, it helped me towards faster growth and success in my new role.</p><p>If you’re in a similar position and contemplating changing roles, I hope this article has helped in the decision process. ?</p><hr><p>Want our updates to appear in your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/from-charts-to-code/","canonical_url":null,"uuid":"faaf57b7-f76d-489f-ad0b-0edf614f094c","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb128bef7c7da001effcd90","reading_time":5}},{"node":{"id":"Ghost__Post__5ec2ca737aa22c4066f83b78","title":"The Story of My Gojek Internship","slug":"the-story-of-my-gojek-internship","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_8RjlIWbn2EYI3fdzy-8HqA.jpeg","excerpt":"What does it mean to be a Product Manager? Here’s an intern’s first person account of life as a PM and the lessons learned.","custom_excerpt":"What does it mean to be a Product Manager? Here’s an intern’s first person account of life as a PM and the lessons learned.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"04 July, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T23:18:35.000+05:30","published_at":"2019-07-04T09:30:00.000+05:30","updated_at":"2020-05-18T23:56:40.000+05:30","meta_title":null,"meta_description":"What does it mean to be a Product Manager? Here’s an intern’s first person account of life as a PM and the lessons learned.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Abhishek Kumar\n\nPrologue\nAugust 2018\n\nI had just completed my first semester at IIM Ahmedabad. As the Summer\nPlacements semester got going in full swing, I decided to pursue an internship\nin the Product Management domain.\n\nWhen someone asked me: “Which is your dream company?”, I was not sure. I\nrealised that although there were renowned names coming on campus, for some\nreason, I wanted something more exciting.\n\nAfter days of pondering, I decided to apply off campus. A list was compiled, and\nthe options trickled down to three: Google, LinkedIn and Gojek! Thankfully,\nGojek had a PM internship opening. I applied, interviews went well and I was\nextended an offer at the Bangalore office.\n\nChapter 1: Documentation\n1st April 2019\n\nI reached the office full of enthusiasm, ready to make a mark of my own. The\nwhole day went in different formalities and it was almost evening when I got to\nmeet my team. To my surprise, by the end of the day, I was part of all relevant\ncommunication channels, team drives and had clarity on what I would work on for\nthe next four weeks.\n\nI just loved the agility shown by my manager to enable me to embark on my\njourney. In the process, I also realised why my undergrad friends working at\nGojek used to say that if you love speed, this is the place to be.\n\nThe next few days were spent understanding the product, people, and culture. I\nwas surprised by the volume and quality of the documentation done at the\ncompany. For a company which prides itself in being one of the fastest growing\nstartups in the world, this kind of emphasis on documentation was something\nunheard of. And because of these hundreds of beautifully crafted documents, by\nthe end of the first week itself, I was participating in their BAU (Business As\nUsual) meetings. (How many interns can claim this? 😜)\n\nChapter 2: Reading\n15th April 2019\n\nI was no longer a newbie in the company. I was having 1:1s with different\nstakeholders, attending IPMs (Internal Planning Meetings), BAU meetings and\nworking tirelessly on my dedicated projects.\n\nDuring the course of these all, one day I reached out to my mentor for\nsuggestions on how to prioritise among different features. This was his\nresponse:\n\n> “Read Abhishek, Read. What differentiates a good Product Manager from an average\none is his/her willingness to learn, and reading is the first and most important\nstep there.”\nHe gave me different links to read, (37 to be precise) which ranged from Product\nPrioritization, Product Design, Product Critique, Design Heuristics and even the\nPsychology involved in product success. As I pored through them, I realised\nProduct Management is not as random as it seems from outside. In fact, it is a\nfine cocktail of art and science mixed in just the right proportion.\n\nChapter 3: Inclusion\n23rd April 2019\n\nBy this point, I had completed my first project, got positive feedback, and was\nabout to finish the second. In the meantime, being a part of so many BAU\nmeetings had boosted my confidence and now I was chipping in with suggestions.\n\nDuring one such meetings, I raised a point in contradiction to what the other\nteam was saying. I tried to explain my point of view but we were not able to\ncome to an agreement. When I came out, I realised that I should have dealt with\nthe situation differently. I went to my mentor and explained as much.\n\n> To this, he said: “Sometimes it’s not only about how you or your team is looking\nat things. You also have to look at what is the value proposition of other teams\ninvolved”\nThis was the second important lesson which I learnt: being a PM your job is to\nfirst bring everyone at the table to a common ground before pushing any agenda. \nWhether it is inter-team or intra-team, to get the job done, you have to bring\npeople to your side by understanding what they want and why they want it.\n\nChapter 4: Relevance\n30th April 2019\n\nI had just finished my second project when I met a senior engineer while passing\nthrough the pantry area. He asked how it’s going and what I was working on. I,\nwith full excitement, told him many ideas I came up with.\n\nAnd then he said: “Man, it doesn’t matter how cool the ideas are or how great\nthey sound. Judge them on their relevance. Are they correctly solving the\nproblem intended? Are they adding value to the lives of relevant stakeholders?”\nAnd then he gave me a set of 10 similar questions and said that if after\nanswering these 10 questions, you still believe you should implement the idea, \nthen it matters.\n\nChapter 5: Impact\n7th May 2019\n\nI had started understanding the nitty-gritty of product management and was\nraring to pick a more challenging project. And then I got this mail from my\nmanager:\n\nReally??? After such nice product & strategy based projects, this is what you\nwant me to do!!\n\n> But again, that was my inexperience talking.\nDuring the course of the next week, I learnt one more valuable lesson: “Look at\nthe impact of your work, not how cool it sounds. Being a PM, the world is your\ndomain and processes are as important as the product itself. If you want your\nproduct to succeed, you need to oil the whole machinery.”\n\nRecently, I came to know that a senior PM found the document to be super good\nand now it is being used across the substreams to onboard new hires. (I’m\nallowed one humblebrag right? 😅)\n\nChapter 6: Communication\n21st May 2019\n\nThe changing weather of Bangalore had hit me hard and I had to take a leave\nowing to ill health. I sent a message each to my manager and mentor regarding\nthe same. My mentor replied asking me to inform the whole team, which I missed\nand read quite late. When I did, I figured I am an intern anyway, and don’t have\nany current projects with the team. Even if I don’t send the mail to them, it\ndoesn’t matter much.\n\nWhen I met my mentor the next day, he asked why I didn’t send the mail, and I\nexplained why. He said: “Abhishek, it doesn’t matter whether you have a current\nproject with the team or not. Being a PM, one of the most important skills is\nbeing very clear in communication. There might be situations where you wouldn’t\neven know and people would be waiting for you. Not only in this case, but in\nevery everything you do, a PM needs to be a clear and careful communicator.”\n\nChapter 7: Ownership\n24th May 2019\n\nMy internship was nearing it’s end, and I reached out to my mentor for some\nsuggestions on the last project I was working on. During our conversation, he\nasked if my previous one had gone live in production. I said no, but clarified\nthat my part is done and it is stuck on other collaborating teams.\n\nThat’s when I realised I had one last lesson left to learn:\n\n> “Being a PM it’s your job to get it from conception to production. If there are\nblockers, you have to proactively reach out to remove them. Being a PM is a\ntricky job, once you have dirtied your hand, the onus comes on you to get it to\ncompletion.”\n> “Once you have picked up something — It’s All Yours.”\nEpilogue\nToday, when I look back, my internship at Gojek was a short, but sweet journey\nwhich taught me many lessons. As I go back for my second year at IIMA, I am much\nmore confident when it comes to Product Management.\n\n\n--------------------------------------------------------------------------------\n\nSpecial thanks to my manager Vikrama Dhiman, my mentor Manas J Saloi, Shobhit\nSrivastava, and all the members of the Transport team who were always ready to\nhelp me during the course of my journey.\n\n\n--------------------------------------------------------------------------------\n\nWant more updates on how we build scalable systems for Southeast Asia’s\n#SuperApp? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Abhishek Kumar</p><h1 id=\"prologue\">Prologue</h1><p><strong><strong>August 2018</strong></strong></p><p>I had just completed my first semester at IIM Ahmedabad. As the Summer Placements semester got going in full swing, I decided to pursue an internship in the Product Management domain.</p><p>When someone asked me: “Which is your dream company?”, I was not sure. I realised that although there were renowned names coming on campus, for some reason, I wanted something more exciting.</p><p>After days of pondering, I decided to apply off campus. A list was compiled, and the options trickled down to three: Google, LinkedIn and Gojek! Thankfully, Gojek had a PM internship opening. I applied, interviews went well and I was extended an offer at the Bangalore office.</p><h1 id=\"chapter-1-documentation\">Chapter 1: Documentation</h1><p><strong><strong>1st April 2019</strong></strong></p><p>I reached the office full of enthusiasm, ready to make a mark of my own. The whole day went in different formalities and it was almost evening when I got to meet my team. To my surprise, by the end of the day, I was part of all relevant communication channels, team drives and had clarity on what I would work on for the next four weeks.</p><p>I just loved the agility shown by my manager to enable me to embark on my journey. In the process, I also realised why my undergrad friends working at Gojek used to say that if you love speed, this is the place to be.</p><p>The next few days were spent understanding the product, people, and culture. I was surprised by the volume and quality of the documentation done at the company. For a company which prides itself in being one of the fastest growing startups in the world, this kind of emphasis on documentation was something unheard of. And because of these hundreds of beautifully crafted documents, by the end of the first week itself, I was participating in their BAU (Business As Usual) meetings. (How many interns can claim this? 😜)</p><h1 id=\"chapter-2-reading\">Chapter 2: Reading</h1><p><strong><strong>15th April 2019</strong></strong></p><p>I was no longer a newbie in the company. I was having 1:1s with different stakeholders, attending IPMs (Internal Planning Meetings), BAU meetings and working tirelessly on my dedicated projects.</p><p>During the course of these all, one day I reached out to my mentor for suggestions on how to prioritise among different features. This was his response:</p><blockquote>“Read Abhishek, Read. What differentiates a good Product Manager from an average one is his/her willingness to learn, and reading is the first and most important step there.”</blockquote><p>He gave me different links to read, (37 to be precise) which ranged from Product Prioritization, Product Design, Product Critique, Design Heuristics and even the Psychology involved in product success. As I pored through them, I realised Product Management is not as random as it seems from outside. In fact, it is a fine cocktail of art and science mixed in just the right proportion.</p><h1 id=\"chapter-3-inclusion\">Chapter 3: Inclusion</h1><p><strong><strong>23rd April 2019</strong></strong></p><p>By this point, I had completed my first project, got positive feedback, and was about to finish the second. In the meantime, being a part of so many BAU meetings had boosted my confidence and now I was chipping in with suggestions.</p><p>During one such meetings, I raised a point in contradiction to what the other team was saying. I tried to explain my point of view but we were not able to come to an agreement. When I came out, I realised that I should have dealt with the situation differently. I went to my mentor and explained as much.</p><blockquote><em><em>To this, he said: “Sometimes it’s not only about how you or your team is looking at things. You also have to look at what is the value proposition of other teams involved”</em></em></blockquote><p>This was the second important lesson which I learnt: <strong><strong>being a PM your job is to first bring everyone at the table to a common ground before pushing any agenda.</strong></strong> Whether it is inter-team or intra-team, to get the job done, you have to bring people to your side by understanding what they want and why they want it.</p><h1 id=\"chapter-4-relevance\">Chapter 4: Relevance</h1><p><strong><strong>30th April 2019</strong></strong></p><p>I had just finished my second project when I met a senior engineer while passing through the pantry area. He asked how it’s going and what I was working on. I, with full excitement, told him many ideas I came up with.</p><p>And then he said: “Man, it doesn’t matter how cool the ideas are or how great they sound. Judge them on their relevance. Are they correctly solving the problem intended? Are they adding value to the lives of relevant stakeholders?” And then he gave me a set of 10 similar questions and said that if after answering these 10 questions, you still believe you should implement the idea, <em><em>then</em></em> it matters.</p><h1 id=\"chapter-5-impact\">Chapter 5: Impact</h1><p><strong><strong>7th May 2019</strong></strong></p><p>I had started understanding the nitty-gritty of product management and was raring to pick a more challenging project. And then I got this mail from my manager:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1212/1*EmNFi0hTp_OczKryjJuYoQ.png\" class=\"kg-image\"></figure><p><strong><strong><em><em>Really??? After such nice product &amp; strategy based projects, this is what you want me to do!!</em></em></strong></strong></p><blockquote>But again, that was my inexperience talking.</blockquote><p>During the course of the next week, I learnt one more valuable lesson: “Look at the impact of your work, not how cool it sounds. Being a PM, the world is your domain and processes are as important as the product itself. If you want your product to succeed, you need to oil the whole machinery.”</p><p>Recently, I came to know that a senior PM found the document to be super good and now it is being used across the substreams to onboard new hires. (I’m allowed one humblebrag right? 😅)</p><h1 id=\"chapter-6-communication\">Chapter 6: Communication</h1><p><strong><strong>21st May 2019</strong></strong></p><p>The changing weather of Bangalore had hit me hard and I had to take a leave owing to ill health. I sent a message each to my manager and mentor regarding the same. My mentor replied asking me to inform the whole team, which I missed and read quite late. When I did, I figured I am an intern anyway, and don’t have any current projects with the team. Even if I don’t send the mail to them, it doesn’t matter much.</p><p>When I met my mentor the next day, he asked why I didn’t send the mail, and I explained why. He said: “Abhishek, it doesn’t matter whether you have a current project with the team or not. Being a PM, one of the most important skills is being very clear in communication. There might be situations where you wouldn’t even know and people would be waiting for you. Not only in this case, but in every everything you do, a PM needs to be a clear and careful communicator.”</p><h1 id=\"chapter-7-ownership\">Chapter 7: Ownership</h1><p><strong><strong>24th May 2019</strong></strong></p><p>My internship was nearing it’s end, and I reached out to my mentor for some suggestions on the last project I was working on. During our conversation, he asked if my previous one had gone live in production. I said no, but clarified that my part is done and it is stuck on other collaborating teams.</p><p>That’s when I realised I had one last lesson left to learn:</p><blockquote><em><em>“Being a PM it’s your job to get it from conception to production. If there are blockers, you have to proactively reach out to remove them. Being a PM is a tricky job, once you have dirtied your hand, the onus comes on you to get it to completion.”</em></em></blockquote><blockquote>“Once you have picked up something — It’s All Yours.”</blockquote><h1 id=\"epilogue\">Epilogue</h1><p>Today, when I look back, my internship at Gojek was a short, but sweet journey which taught me many lessons. As I go back for my second year at IIMA, I am much more confident when it comes to Product Management.</p><hr><p><em><em>Special thanks to my manager Vikrama Dhiman, my mentor Manas J Saloi, Shobhit Srivastava, and all the members of the Transport team who were always ready to help me during the course of my journey.</em></em></p><hr><p>Want more updates on how we build scalable systems for Southeast Asia’s #SuperApp? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a><br></p>","url":"https://gojek-ghost.zysk.in/the-story-of-my-gojek-internship/","canonical_url":null,"uuid":"ff0e2a75-69e3-4a50-9786-b98b3e7f48ca","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca737aa22c4066f83b78","reading_time":5}},{"node":{"id":"Ghost__Post__5eb1194bf7c7da001effcc98","title":"How Kafka Solved a Culture Problem at Gojek","slug":"how-kafka-solved-a-culture-problem-at-gojek","featured":false,"feature_image":"https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Kafka.jpg","excerpt":"Software stopped us from scaling, software set us free.","custom_excerpt":"Software stopped us from scaling, software set us free.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"14 February, 2019","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T13:14:11.000+05:30","published_at":"2019-02-14T13:14:00.000+05:30","updated_at":"2020-05-12T11:55:32.000+05:30","meta_title":"How Kafka Solved a Culture Problem at Gojek","meta_description":"Software stopped us from scaling, software set us free.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Software can solve cultural problems. While that might seem outlandish, if\nyou’re a developer, you might just get what I mean. Think about it carefully; it\ncan repeat mundane tasks, making people more productive. It can solve complex\nproblems, so devs can focus on pressing tasks.\n\nHowever, it can also complicate culture; like introducing a biometric system to\ntrack employee attendance, and have software track sick leaves.\n\nIn essence, an organisation’s tech stack will reflect the health of the company.\n\nIf you’re focused on writing beautiful code, it’s likely that employees are\ndisciplined, organised, and believe in the company’s values. It’s really not\nthat far-fetched a correlation.\n\nThis is a similar story; the story of Kafka — an open source tool that solved\nculture for us. Will try and simplify this for a broad audience, so devs, please\nbear with me if some explanations seem obvious and trite.\n\nBefore the Law — Chaos\nIn late 2015, unprecedented scale and failures were routine at Gojek. It also\nweighed heavily on culture\n[https://blog.gojekengineering.com/failures-make-us-stronger-part-2-a325cae09f20] \n— because firefighting when systems are down bogs down morale and creates a\nfractious lot. It was truly Kafkaesque. (See what I did there? ?). These\nfractures were common in our early days, because all developers depended on our\ncore systems.\n\nWe had about 10+ products at the time and about 60+ developers (Today, we have\n18+ products with 250+ developers overseeing them). These 60 passionate devs saw\nthe chance to build products, solve complex problems and moved fast to meet\nrapacious demand. Naturally, people were doing their own work, writing code in\ntheir own style, and had to sync with others to deploy what they wrote.\n\nAt the core of Gojek is ‘Allocations\n[https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32]\n’; — a classic matchmaking engine between the driver and the customer. All\nsurrounding teams depended on this one team to add features, beta test their\nofferings, and much more. If GO-FOOD wanted to allocate a 4-star driver to some\norders, they had to raise a ‘ticket’ with the Allocations team. The Allocations\nteam then processed this for GO-FOOD.\n\nNow, think of 50 developers asking Allocations to push their features first.\n\nSoon, the org was heavily dependent on relationships. If Ekta from GO-BOX had a\nstrong relationship with Jane in Allocations, Ekta would get preference on her\nfeatures. This became problematic for us and as the org scaled, it added more\ncultural biases. Jane also became the defacto gatekeeper.Everyone had to toe her\nline if they wanted to build and deploy their own features. To add to this,\nAllocations was pushing back and severely lagging behind, because 50-odd\ndevelopers were adding and testing 10 features a day.\n\nBefore you knew it, Allocations became the bottleneck to scale the org. As if\nall that wasn’t enough, the team was not doing its own testing and experiments\nto make Allocations better and sharper. Things were spiralling downwards.\n\nA patch would not do, we needed a fix\nIt was apparent we had to fix this problem — once and for all. The \n‘Relationship-as-a-Service’ model was a disaster. RaaS was endemic in the org.\nThings were fine at a macro level, but at the base of it, we were failing.\n\nWe needed a solution that gave everyone the freedom to build and experiment. We\nwanted folks to think they’re building individual products from scratch without\nany reliance. Easier said that done, right?\n\nThis was the genesis of Gojek’s philosophy of building a #SuperApp — a chance to\nbuild startups within a startup.\n\nWe wanted to unleash our best minds to build, and not worry about RaaS.After\nsome research and consensus across the board, we were all sold on Kafka. \nSoftware was going to solve our RaaS problem. Ambitious? Maybe. Pragmatic? Damn\nright.\n\nForget the morose writer\nEvery team was mandated to broadcast events on Kafka. If a driver booking was\nmade, it was sent to Kafka. If a driver completed the ride, it was sent to\nKafka. Kafka became the bus that carried the millions of events happening inside\nGojek.\n\nAnything and everything individual teams did was visible to anyone and everyone\ninside Gojek.\n\nIf a team wanted to test features or roll out updates, they merely had to rely\non Kafka. No more RaaS. No more long waiting periods. This unleashed the\nproductivity of every developer. The day we rolled out Kafka, we killed the\ngatekeeper. Information was free and accessible to all. We were solving software\nproblems, but deep down, culture was the bigger fix.\n\nToday, we emit 350,000,000 messages on Kafka and it’s every engineers’\nplayground.\n\nOur two-pizza team rule became far more efficient, and now we were solving\nbigger problems. This is also an example of how we look at Lean Engineering, but\nthat’s a story for another day.\n\nDas Urteil — But positive Metamorphosis\n‘Das Urteil’ means ‘The Judgement’, and Franz Kafka published this book in 1913.\nMetamorphosis was published in 1915. The latter talks about how a salesman\nturned into an insect and struggles to live. It’s classic Franz Kafka; deeply\nsad, complex and incredibly gut-wrenching.\n\nIn our case, The Judgement was of an insect metamorphosing into a butterfly. It\ndidn’t happen overnight, but this was our tipping point. Our tech stack began to\nreflect organisation culture.\n\nKafka solved a critical cultural problem for us. ?\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Have our stories delivered straight to your inbox by \nsigning up for our newsletter [https://mailchi.mp/go-jek/gojek-tech-newsletter]!","html":"<p>Software can solve cultural problems. While that might seem outlandish, if you’re a developer, you might just get what I mean. Think about it carefully; it can repeat mundane tasks, making people more productive. It can solve complex problems, so devs can focus on pressing tasks.</p><p>However, it can also complicate culture; like introducing a biometric system to track employee attendance, and have software track sick leaves.</p><p>In essence, an organisation’s tech stack will reflect the health of the company.</p><p>If you’re focused on writing beautiful code, it’s likely that employees are disciplined, organised, and believe in the company’s values. It’s really not that far-fetched a correlation.</p><p><strong><strong>This is a similar story; the story of Kafka — an open source tool that solved culture for us.</strong></strong> Will try and simplify this for a broad audience, so devs, please bear with me if some explanations seem obvious and trite.</p><h1 id=\"before-the-law-chaos\">Before the Law — Chaos</h1><p>In late 2015, unprecedented scale and failures were routine at Gojek. It also weighed heavily on <a href=\"https://blog.gojekengineering.com/failures-make-us-stronger-part-2-a325cae09f20\" rel=\"noopener\">culture</a> — because firefighting when systems are down bogs down morale and creates a fractious lot. It was truly Kafkaesque. (See what I did there? ?). These fractures were common in our early days, because all developers depended on our core systems.</p><p>We had about 10+ products at the time and about 60+ developers (Today, we have 18+ products with 250+ developers overseeing them). These 60 passionate devs saw the chance to build products, solve complex problems and moved fast to meet rapacious demand. Naturally, people were doing their own work, <strong><strong>writing code in their own style,</strong></strong> and had to sync with others to deploy what they wrote.</p><p>At the core of Gojek is ‘<a href=\"https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32\" rel=\"noopener\">Allocations</a>’; — a classic matchmaking engine between the driver and the customer. All surrounding teams depended on this one team to add features, beta test their offerings, and much more. If GO-FOOD wanted to allocate a 4-star driver to some orders, they had to raise a ‘ticket’ with the Allocations team. The Allocations team then processed this for GO-FOOD.</p><p><em><em>Now, think of 50 developers asking Allocations to push their features first.</em></em></p><p>Soon, the org was heavily dependent on relationships. If Ekta from GO-BOX had a strong relationship with Jane in Allocations, Ekta would get preference on her features. This became problematic for us and as the org scaled, it added more cultural biases. <strong><strong>Jane also became the defacto gatekeeper.</strong></strong>Everyone had to toe her line if they wanted to build and deploy their own features. To add to this, Allocations was pushing back and severely lagging behind, because 50-odd developers were adding and testing 10 features a day.</p><p>Before you knew it, <strong><strong>Allocations became the bottleneck to scale the org. </strong></strong>As if all that wasn’t enough, the team was not doing its own testing and experiments to make Allocations better and sharper. Things were spiralling downwards.</p><h1 id=\"a-patch-would-not-do-we-needed-a-fix\">A patch would not do, we needed a fix</h1><p>It was apparent we had to fix this problem — once and for all. The <strong><strong>‘Relationship-as-a-Service’</strong></strong> model was a disaster. <strong><strong>RaaS</strong></strong> was endemic in the org. Things were fine at a macro level, but at the base of it, we were failing.</p><p>We needed a solution that gave everyone the freedom to build and experiment. We wanted folks to think they’re building individual products from scratch without any reliance. <strong><strong>Easier said that done, right?</strong></strong></p><p>This was the genesis of Gojek’s philosophy of building a #SuperApp — a chance to build startups within a startup.</p><p>We wanted to unleash our best minds to build, and not worry about <strong><strong>RaaS.</strong></strong>After some research and consensus across the board, we were all sold on Kafka.<strong><strong> Software was going to solve our RaaS problem. Ambitious? Maybe. Pragmatic? Damn right</strong></strong>.</p><h1 id=\"forget-the-morose-writer\">Forget the morose writer</h1><p>Every team was mandated to broadcast events on Kafka. If a driver booking was made, it was sent to Kafka. If a driver completed the ride, it was sent to Kafka. Kafka became the bus that carried the millions of events happening inside Gojek.</p><p>Anything and everything individual teams did was visible to anyone and everyone inside Gojek.</p><p>If a team wanted to test features or roll out updates, they merely had to rely on Kafka. No more RaaS<strong><strong>.</strong></strong> No more long waiting periods. This unleashed the productivity of every developer. <strong><strong>The day we rolled out Kafka, we killed the gatekeeper. Information was free and accessible to all. </strong></strong>We were solving software problems, but deep down, culture was the bigger fix.</p><p>Today, we emit 350,000,000 messages on Kafka and it’s every engineers’ playground.</p><p>Our two-pizza team rule became far more efficient, and now we were solving bigger problems. This is also an example of how we look at Lean Engineering, but that’s a story for another day.</p><h1 id=\"das-urteil-but-positive-metamorphosis\">Das Urteil — But positive Metamorphosis</h1><p>‘Das Urteil’ means ‘The Judgement’, and Franz Kafka published this book in 1913. Metamorphosis was published in 1915. The latter talks about how a salesman turned into an insect and struggles to live. It’s classic Franz Kafka; deeply sad, complex and incredibly gut-wrenching.</p><p>In our case, The Judgement was of an insect metamorphosing into a butterfly. It didn’t happen overnight, but this was our tipping point. Our tech stack began to reflect organisation culture.</p><p><strong><strong>Kafka solved a critical cultural problem for us.</strong></strong> ?</p><hr><p>Liked what you read? Have our stories delivered straight to your inbox by <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">signing up for our newsletter</a>!</p>","url":"https://gojek-ghost.zysk.in/how-kafka-solved-a-culture-problem-at-gojek/","canonical_url":null,"uuid":"e542a670-4560-4afc-af69-049af2d26ac2","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb1194bf7c7da001effcc98","reading_time":4}}]},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}},{"node":{"name":"Maps","slug":"maps"}},{"node":{"name":"Ride Hailing","slug":"ride-hailing"}},{"node":{"name":"Software Engineering","slug":"software-engineering"}},{"node":{"name":"Startup","slug":"startup"}}]}},"pageContext":{"pageNumber":0,"humanPageNumber":1,"skip":0,"limit":12,"numberOfPages":4,"previousPagePath":"","nextPagePath":"/page/2"}}}