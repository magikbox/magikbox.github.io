{"componentChunkName":"component---src-templates-post-js","path":"/blog/how-we-supercharged-chat/","result":{"data":{"ghostPost":{"id":"Ghost__Post__5eb12eb3f7c7da001effce0b","title":"How We Supercharged Chat","slug":"how-we-supercharged-chat","featured":false,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_tuDgHHPUouXxzsK4OEzPaw.jpg","excerpt":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","custom_excerpt":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"10 January, 2020","updated_at_pretty":"18 May, 2020","created_at":"2020-05-05T14:45:31.000+05:30","published_at":"2020-01-10T09:30:00.000+05:30","updated_at":"2020-05-18T20:45:50.000+05:30","meta_title":null,"meta_description":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Benzi Ahamed\n\nThe Gojek consumer app comes with a chat feature. This allows users to have\nconversations with:\n\n * The currently assigned driver partner in relation to a booking.\n * Other Gojek users, provided they are known contacts in your address book.\n   These can be either personal or group chats.\n\nIn order to use the chat platform as springboard to other services within\nGojek’s vast ecosystem, we wanted to expose some features that integrate with\nour other offerings — within the convenience of a chat window.\n\nOne of the first service options we wanted to focus on was payments — paying and\nrequesting for money between individuals and groups. Chat had the platform to\ncreate connections between people, GoPay had payments — it was time to marry the\ntwo.\n\nArchitecture\nTo start with, as a chat platform team, we did not really know anything about\nthe payments domain. In fact, most of the integrations we planned for required\ncollaborating with other product teams within Gojek.\n\nWe decided early on that we needed a plugin-based framework that other product\nteams (and even chat team’s core services) could use. We also decided that the\nAPI surface area for this new framework should have as much as possible in\ncommon between the Android and iOS implementations.\n\nThe first use case we focused on was integrating payment options within chat —\nwhich would help us kickstart our design and feature rollout.\n\nApproach\nIn the vein of keeping things as simple as possible, we came up with the\nfollowing set of guidelines:\n\n * The chat subsystem can expose add-on features to the user\n * These features will not be part of the core chat offering, but can be\n   plugged-in externally\n * These plugin-based entities — chat extensions — can have mainly two\n   capabilities\n * Display a button (widget) in a chat window to trigger the chat extension’s\n   functionality\n * Display chat extension messages that can support rich text, images,\n   call-to-actions\n\nChat extension messages are merely text messages with additional metadata. While\nplain text-based messages are rendered by the core chat rendering system, chat\nextension messages need to be rendered by the chat extension that created the\nmessage.\n\nChat Extension Framework — Key ActorsThe illustration above depicts the final\nframework components we came up with.\n\n * Chat Extension Providers are responsible for vending Chat Extensions based on\n   the active Chat Session (there might be cases where we want to enable a\n   certain feature only for certain types of chats e.g. those between our\n   drivers and customers).\n * Chat Extensions are the components responsible for vending trigger points (\n   Widget Views) and custom message views (Extension Message Views).\n\nWhile the core subsystem takes care of managing life cycles of the chat\nextensions, widgets, and message views, it is the responsibility of extension\nauthors to purely focus on the implementation details of their feature.\n\nWith the above design in place, we were ready to start collaborating and start\nimplementing features.\n\nLet’s take a look at some integrations we were able to build collaboratively.\n\nSample Integrations\nPayments\nThe first integration we did was Request and Pay flows. Utilising GoPay,\ncustomers can make payments and request for money from friends.\n\nHere’s the Request Flow in action, within a personal chat:\n\nRequest Money from an IndividualIn a group chat, Request Flow translates to a\nSplit Bill flow:\n\nRequest Money in a GroupHere’s the Pay flow in action:\n\nPay via GoPay, continue conversation in ChatIn the Pay Flow, we start with\nmaking a payment from the home-screen of the Gojek App. Once a payment is done,\nyou have an option to continue to chat with the person you made the payment to.\nThis flow is of course in addition to similar flows for Request where you can\ntrigger a payment within chat itself.\n\nThe payments team were able to create a UX flow that could be triggered either\nfrom the home screen or the chat window.\n\nRestaurant Sharing\nNext up, our GoFood team wanted to explore sharing restaurant information via\nchat. Since we already had support for extensions at this point in time, we\ncreated a generic Share Via Chat flow that supports sharing simple text messages\nor custom extension message content.\n\nIn the Pay Flow, we start with making a payment from the home-screen of the\nGojek App. Once a payment is done, you have an option to continue to chat with\nthe person you made the payment to. This flow is of course in addition to\nsimilar flows for Request where you can trigger a payment within chat itself.\n\nThe payments team were able to create a UX flow that could be triggered either\nfrom the home screen or the chat window.\n\nRestaurant Sharing\nNext up, our GoFood team wanted to explore sharing restaurant information via\nchat. Since we already had support for extensions at this point in time, we\ncreated a generic Share Via Chat flow that supports sharing simple text messages\nor custom extension message content.\n\n\nShare Restaurant Details via ChatWhat’s interesting is that once a Restaurant\nCard has been shared via chat, a recipient clicking on that card can proceed to\nmake a food order, directly from the chat window itself. This is made possible\nby the fact that Extension Message Views can be fully interactive (e.g. detect\nuser taps), and the chat window provides contextual navigation controls to them.\n\nImage Sharing\nLastly, let us take a look at the most recent feature we rolled out to\nproduction — image sharing in our customer-driver chats.\n\nImage Sharing via ChatDuring the implementation of this feature, we recognised\nthat image sharing would be better triggered from the chat window if there was a\ndirect shortcut button (e.g. a camera icon) within the bottom text input area of\nthe chat window.\n\nThis leads us to enhance our extension framework to allow Chat Extensions to\nprovide Chat Extension Shortcuts as well. Our updated framework looks like\nbelow:\n\nLessons Learned\nIt has been a great journey so far exploring various kinds of integrations in a\nsimple chat window. We have a lot more planned, but in the meanwhile, here are a\nfew key things we learned along the way\n\n * When you are developing a platform, evangelising what your platform provides\n   is key. This is equally relevant if you are a platform-product company, or a\n   platform team within a company. We conducted an internal chat extension\n   hackathon which helped broaden our outreach, and saw some pretty cool ideas\n   implemented including Live Location Sharing, Booking Sharing, Games, Sticker\n   Packs etc.\n * Document your public API! Teams are more willing to collaborate if you have\n   proper, up-to-date documentation in place. We created detailed technical\n   documents, integration guides, and even provided a sample chat extension (a\n   starter-pack, if you will) — these greatly helped teams adopting these new\n   features. Also, the feedback we got during the internal hackathon fed\n   directly back into improving our documentation.\n * Having a common design language helped our Android and iOS engineers to\n   collaborate more closely. It was easier for the team to work on implementing\n   the feature by focussing on the common characteristics during tech\n   discussion, design ratification sessions etc. and leaving the nuances of each\n   platform to respective teams during development. Having a common language\n   that engineers can speak (irrespective of their specialisations) improves\n   cross-communications and collaboration.\n * It is important to design solutions exercising self-imposed constraints.\n   These constraints should directly limit the engineering scope of the\n   solution. As engineers, we are all too comfortable going down the technical\n   analysis rabbit-hole in our pursuit of coming up with a well rounded, albeit\n   (possibly) over-engineered solution. This usually ends up in complicated\n   designs, which translate into complicated code. It is better to design\n   simpler systems and iteratively add smaller features, where each iteration\n   cycle should also incorporate refactoring every step of the way. Even though\n   we knew having something like Extension Shortcuts was nice to have from the\n   get go, we had to exercise restraint and only implemented the feature when it\n   was actually required.\n * We cannot stress this enough, but continuous refactoring (whenever required)\n   is one surefire way to reduce the build-up of tech debt in any codebase.\n   Improve a function here, rename a variable there, refactor a class into two —\n   every little bit helps. It is the responsibility of the entire team to be\n   engaged in this exercise.\n\nSo there you have it, a quick look at the way the core chat team developed a\nbase extension framework that is currently being used to build richer\nintegrations into chat.\n\n\n--------------------------------------------------------------------------------\n\nWant more where that come from? Have our updates delivered straight to your\ninbox by signing up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Benzi Ahamed</p><p>The Gojek consumer app comes with a chat feature. This allows users to have conversations with:</p><ul><li>The currently assigned driver partner in relation to a booking.</li><li>Other Gojek users, provided they are known contacts in your address book. These can be either personal or group chats.</li></ul><p>In order to use the chat platform as springboard to other services within Gojek’s vast ecosystem, we wanted to expose some features that integrate with our other offerings — within the convenience of a chat window.</p><p>One of the first service options we wanted to focus on was payments — paying and requesting for money between individuals and groups. Chat had the platform to create connections between people, GoPay had payments — it was time to marry the two.</p><h1 id=\"architecture\">Architecture</h1><p>To start with, as a chat platform team, we did not really know anything about the payments domain. In fact, most of the integrations we planned for required collaborating with other product teams within Gojek.</p><p>We decided early on that we needed a plugin-based framework that other product teams (and even chat team’s core services) could use. We also decided that the API surface area for this new framework should have as much as possible in common between the Android and iOS implementations.</p><p>The first use case we focused on was integrating payment options within chat — which would help us kickstart our design and feature rollout.</p><h2 id=\"approach\">Approach</h2><p>In the vein of keeping things as simple as possible, we came up with the following set of guidelines:</p><ul><li>The chat subsystem can expose add-on features to the user</li><li>These features will not be part of the core chat offering, but can be plugged-in externally</li><li>These plugin-based entities — chat extensions — can have mainly two capabilities</li><li>Display a button (widget) in a chat window to trigger the chat extension’s functionality</li><li>Display chat extension messages that can support rich text, images, call-to-actions</li></ul><p>Chat extension messages are merely text messages with additional metadata. While plain text-based messages are rendered by the core chat rendering system, chat extension messages need to be rendered by the chat extension that created the message.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1980/1*yZbylgYQ7Q7jaF8cooEpeQ.png\" class=\"kg-image\"><figcaption>Chat Extension Framework — Key Actors</figcaption></figure><p>The illustration above depicts the final framework components we came up with.</p><ul><li><strong><strong>Chat Extension Providers</strong></strong> are responsible for vending <strong><strong>Chat Extension</strong></strong>s based on the active <strong><strong>Chat Session</strong></strong> (there might be cases where we want to enable a certain feature only for certain types of chats e.g. those between our drivers and customers).</li><li><strong><strong>Chat Extensions</strong></strong> are the components responsible for vending trigger points (<strong><strong>Widget Views</strong></strong>) and custom message views (<strong><strong>Extension Message Views</strong></strong>).</li></ul><p>While the core subsystem takes care of managing life cycles of the chat extensions, widgets, and message views, it is the responsibility of extension authors to purely focus on the implementation details of their feature.</p><p>With the above design in place, we were ready to start collaborating and start implementing features.</p><p>Let’s take a look at some integrations we were able to build collaboratively.</p><h1 id=\"sample-integrations\">Sample Integrations</h1><h2 id=\"payments\">Payments</h2><p>The first integration we did was Request and Pay flows. Utilising GoPay, customers can make payments and request for money from friends.</p><p>Here’s the Request Flow in action, within a personal chat:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*2mJZ8btzdO7bVq5rXtwvoQ.gif\" class=\"kg-image\"><figcaption>Request Money from an Individual</figcaption></figure><p>In a group chat, Request Flow translates to a Split Bill flow:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/402/1*OHgw8oUSuN6n1d8sjWCw7A.gif\" class=\"kg-image\"><figcaption>Request Money in a Group</figcaption></figure><p>Here’s the Pay flow in action:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*6z12Pjg1Vgy8Y-0P1jFPSw.gif\" class=\"kg-image\"><figcaption>Pay via GoPay, continue conversation in Chat</figcaption></figure><p>In the Pay Flow, we start with making a payment from the home-screen of the Gojek App. Once a payment is done, you have an option to continue to chat with the person you made the payment to. This flow is of course in addition to similar flows for Request where you can trigger a payment within chat itself.</p><p>The payments team were able to create a UX flow that could be triggered either from the home screen or the chat window.</p><h2 id=\"restaurant-sharing\">Restaurant Sharing</h2><p>Next up, our GoFood team wanted to explore sharing restaurant information via chat. Since we already had support for extensions at this point in time, we created a generic Share Via Chat flow that supports sharing simple text messages or custom extension message content.</p><p>In the Pay Flow, we start with making a payment from the home-screen of the Gojek App. Once a payment is done, you have an option to continue to chat with the person you made the payment to. This flow is of course in addition to similar flows for Request where you can trigger a payment within chat itself.</p><p>The payments team were able to create a UX flow that could be triggered either from the home screen or the chat window.</p><h2 id=\"restaurant-sharing-1\">Restaurant Sharing</h2><p>Next up, our GoFood team wanted to explore sharing restaurant information via chat. Since we already had support for extensions at this point in time, we created a generic Share Via Chat flow that supports sharing simple text messages or custom extension message content.<br></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*iMz_DNDwFwiCM4aiMRilAg.gif\" class=\"kg-image\"><figcaption>Share Restaurant Details via Chat</figcaption></figure><p>What’s interesting is that once a Restaurant Card has been shared via chat, a recipient clicking on that card can proceed to make a food order, directly from the chat window itself. This is made possible by the fact that Extension Message Views can be fully interactive (e.g. detect user taps), and the chat window provides contextual navigation controls to them.</p><h2 id=\"image-sharing\">Image Sharing</h2><p>Lastly, let us take a look at the most recent feature we rolled out to production — image sharing in our customer-driver chats.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/600/1*uFGU-NAQrIM2L4USdNLuWA.gif\" class=\"kg-image\"><figcaption>Image Sharing via Chat</figcaption></figure><p>During the implementation of this feature, we recognised that image sharing would be better triggered from the chat window if there was a direct shortcut button (e.g. a camera icon) within the bottom text input area of the chat window.</p><p>This leads us to enhance our extension framework to allow Chat Extensions to provide Chat Extension Shortcuts as well. Our updated framework looks like below:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/2140/1*BDMz2IPpUJcX3M80qI_7bw.png\" class=\"kg-image\"></figure><h1 id=\"lessons-learned\">Lessons Learned</h1><p>It has been a great journey so far exploring various kinds of integrations in a simple chat window. We have a lot more planned, but in the meanwhile, here are a few key things we learned along the way</p><ul><li>When you are developing a platform, evangelising what your platform provides is key. This is equally relevant if you are a platform-product company, or a platform team within a company. We conducted an internal chat extension hackathon which helped broaden our outreach, and saw some pretty cool ideas implemented including Live Location Sharing, Booking Sharing, Games, Sticker Packs etc.</li><li>Document your public API! Teams are more willing to collaborate if you have proper, up-to-date documentation in place. We created detailed technical documents, integration guides, and even provided a sample chat extension (a starter-pack, if you will) — these greatly helped teams adopting these new features. Also, the feedback we got during the internal hackathon fed directly back into improving our documentation.</li><li>Having a common design language helped our Android and iOS engineers to collaborate more closely. It was easier for the team to work on implementing the feature by focussing on the common characteristics during tech discussion, design ratification sessions etc. and leaving the nuances of each platform to respective teams during development. Having a common language that engineers can speak (irrespective of their specialisations) improves cross-communications and collaboration.</li><li>It is important to design solutions exercising self-imposed constraints. These constraints should directly limit the engineering scope of the solution. As engineers, we are all too comfortable going down the technical analysis rabbit-hole in our pursuit of coming up with a well rounded, albeit (possibly) over-engineered solution. This usually ends up in complicated designs, which translate into complicated code. It is better to design simpler systems and iteratively add smaller features, where each iteration cycle should also incorporate refactoring every step of the way. Even though we knew having something like Extension Shortcuts was nice to have from the get go, we had to exercise restraint and only implemented the feature when it was actually required.</li><li>We cannot stress this enough, but <em><em>continuous refactoring</em></em> (whenever required) is one surefire way to reduce the build-up of tech debt in any codebase. Improve a function here, rename a variable there, refactor a class into two — every little bit helps. It is the responsibility of the entire team to be engaged in this exercise.</li></ul><p>So there you have it, a quick look at the way the core chat team developed a base extension framework that is currently being used to build richer integrations into chat.</p><hr><p>Want more where that come from? Have our updates delivered straight to your inbox by <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">signing up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/how-we-supercharged-chat/","canonical_url":null,"uuid":"a5657369-e813-44f1-af8d-aa2e306bfafd","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb12eb3f7c7da001effce0b","reading_time":6},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}},{"node":{"name":"Maps","slug":"maps"}},{"node":{"name":"Ride Hailing","slug":"ride-hailing"}},{"node":{"name":"Software Engineering","slug":"software-engineering"}},{"node":{"name":"Startup","slug":"startup"}}]}},"pageContext":{"slug":"how-we-supercharged-chat"}}}