{"componentChunkName":"component---src-templates-post-js","path":"/blog/how-kafka-solved-a-culture-problem-at-gojek/","result":{"data":{"ghostPost":{"id":"Ghost__Post__5eb1194bf7c7da001effcc98","title":"How Kafka Solved a Culture Problem at Gojek","slug":"how-kafka-solved-a-culture-problem-at-gojek","featured":false,"feature_image":"https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Kafka.jpg","excerpt":"Software stopped us from scaling, software set us free.","custom_excerpt":"Software stopped us from scaling, software set us free.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"14 February, 2019","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T13:14:11.000+05:30","published_at":"2019-02-14T13:14:00.000+05:30","updated_at":"2020-05-12T11:55:32.000+05:30","meta_title":"How Kafka Solved a Culture Problem at Gojek","meta_description":"Software stopped us from scaling, software set us free.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Software can solve cultural problems. While that might seem outlandish, if\nyou’re a developer, you might just get what I mean. Think about it carefully; it\ncan repeat mundane tasks, making people more productive. It can solve complex\nproblems, so devs can focus on pressing tasks.\n\nHowever, it can also complicate culture; like introducing a biometric system to\ntrack employee attendance, and have software track sick leaves.\n\nIn essence, an organisation’s tech stack will reflect the health of the company.\n\nIf you’re focused on writing beautiful code, it’s likely that employees are\ndisciplined, organised, and believe in the company’s values. It’s really not\nthat far-fetched a correlation.\n\nThis is a similar story; the story of Kafka — an open source tool that solved\nculture for us. Will try and simplify this for a broad audience, so devs, please\nbear with me if some explanations seem obvious and trite.\n\nBefore the Law — Chaos\nIn late 2015, unprecedented scale and failures were routine at Gojek. It also\nweighed heavily on culture\n[https://blog.gojekengineering.com/failures-make-us-stronger-part-2-a325cae09f20] \n— because firefighting when systems are down bogs down morale and creates a\nfractious lot. It was truly Kafkaesque. (See what I did there? ?). These\nfractures were common in our early days, because all developers depended on our\ncore systems.\n\nWe had about 10+ products at the time and about 60+ developers (Today, we have\n18+ products with 250+ developers overseeing them). These 60 passionate devs saw\nthe chance to build products, solve complex problems and moved fast to meet\nrapacious demand. Naturally, people were doing their own work, writing code in\ntheir own style, and had to sync with others to deploy what they wrote.\n\nAt the core of Gojek is ‘Allocations\n[https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32]\n’; — a classic matchmaking engine between the driver and the customer. All\nsurrounding teams depended on this one team to add features, beta test their\nofferings, and much more. If GO-FOOD wanted to allocate a 4-star driver to some\norders, they had to raise a ‘ticket’ with the Allocations team. The Allocations\nteam then processed this for GO-FOOD.\n\nNow, think of 50 developers asking Allocations to push their features first.\n\nSoon, the org was heavily dependent on relationships. If Ekta from GO-BOX had a\nstrong relationship with Jane in Allocations, Ekta would get preference on her\nfeatures. This became problematic for us and as the org scaled, it added more\ncultural biases. Jane also became the defacto gatekeeper.Everyone had to toe her\nline if they wanted to build and deploy their own features. To add to this,\nAllocations was pushing back and severely lagging behind, because 50-odd\ndevelopers were adding and testing 10 features a day.\n\nBefore you knew it, Allocations became the bottleneck to scale the org. As if\nall that wasn’t enough, the team was not doing its own testing and experiments\nto make Allocations better and sharper. Things were spiralling downwards.\n\nA patch would not do, we needed a fix\nIt was apparent we had to fix this problem — once and for all. The \n‘Relationship-as-a-Service’ model was a disaster. RaaS was endemic in the org.\nThings were fine at a macro level, but at the base of it, we were failing.\n\nWe needed a solution that gave everyone the freedom to build and experiment. We\nwanted folks to think they’re building individual products from scratch without\nany reliance. Easier said that done, right?\n\nThis was the genesis of Gojek’s philosophy of building a #SuperApp — a chance to\nbuild startups within a startup.\n\nWe wanted to unleash our best minds to build, and not worry about RaaS.After\nsome research and consensus across the board, we were all sold on Kafka. \nSoftware was going to solve our RaaS problem. Ambitious? Maybe. Pragmatic? Damn\nright.\n\nForget the morose writer\nEvery team was mandated to broadcast events on Kafka. If a driver booking was\nmade, it was sent to Kafka. If a driver completed the ride, it was sent to\nKafka. Kafka became the bus that carried the millions of events happening inside\nGojek.\n\nAnything and everything individual teams did was visible to anyone and everyone\ninside Gojek.\n\nIf a team wanted to test features or roll out updates, they merely had to rely\non Kafka. No more RaaS. No more long waiting periods. This unleashed the\nproductivity of every developer. The day we rolled out Kafka, we killed the\ngatekeeper. Information was free and accessible to all. We were solving software\nproblems, but deep down, culture was the bigger fix.\n\nToday, we emit 350,000,000 messages on Kafka and it’s every engineers’\nplayground.\n\nOur two-pizza team rule became far more efficient, and now we were solving\nbigger problems. This is also an example of how we look at Lean Engineering, but\nthat’s a story for another day.\n\nDas Urteil — But positive Metamorphosis\n‘Das Urteil’ means ‘The Judgement’, and Franz Kafka published this book in 1913.\nMetamorphosis was published in 1915. The latter talks about how a salesman\nturned into an insect and struggles to live. It’s classic Franz Kafka; deeply\nsad, complex and incredibly gut-wrenching.\n\nIn our case, The Judgement was of an insect metamorphosing into a butterfly. It\ndidn’t happen overnight, but this was our tipping point. Our tech stack began to\nreflect organisation culture.\n\nKafka solved a critical cultural problem for us. ?\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Have our stories delivered straight to your inbox by \nsigning up for our newsletter [https://mailchi.mp/go-jek/gojek-tech-newsletter]!","html":"<p>Software can solve cultural problems. While that might seem outlandish, if you’re a developer, you might just get what I mean. Think about it carefully; it can repeat mundane tasks, making people more productive. It can solve complex problems, so devs can focus on pressing tasks.</p><p>However, it can also complicate culture; like introducing a biometric system to track employee attendance, and have software track sick leaves.</p><p>In essence, an organisation’s tech stack will reflect the health of the company.</p><p>If you’re focused on writing beautiful code, it’s likely that employees are disciplined, organised, and believe in the company’s values. It’s really not that far-fetched a correlation.</p><p><strong><strong>This is a similar story; the story of Kafka — an open source tool that solved culture for us.</strong></strong> Will try and simplify this for a broad audience, so devs, please bear with me if some explanations seem obvious and trite.</p><h1 id=\"before-the-law-chaos\">Before the Law — Chaos</h1><p>In late 2015, unprecedented scale and failures were routine at Gojek. It also weighed heavily on <a href=\"https://blog.gojekengineering.com/failures-make-us-stronger-part-2-a325cae09f20\" rel=\"noopener\">culture</a> — because firefighting when systems are down bogs down morale and creates a fractious lot. It was truly Kafkaesque. (See what I did there? ?). These fractures were common in our early days, because all developers depended on our core systems.</p><p>We had about 10+ products at the time and about 60+ developers (Today, we have 18+ products with 250+ developers overseeing them). These 60 passionate devs saw the chance to build products, solve complex problems and moved fast to meet rapacious demand. Naturally, people were doing their own work, <strong><strong>writing code in their own style,</strong></strong> and had to sync with others to deploy what they wrote.</p><p>At the core of Gojek is ‘<a href=\"https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32\" rel=\"noopener\">Allocations</a>’; — a classic matchmaking engine between the driver and the customer. All surrounding teams depended on this one team to add features, beta test their offerings, and much more. If GO-FOOD wanted to allocate a 4-star driver to some orders, they had to raise a ‘ticket’ with the Allocations team. The Allocations team then processed this for GO-FOOD.</p><p><em><em>Now, think of 50 developers asking Allocations to push their features first.</em></em></p><p>Soon, the org was heavily dependent on relationships. If Ekta from GO-BOX had a strong relationship with Jane in Allocations, Ekta would get preference on her features. This became problematic for us and as the org scaled, it added more cultural biases. <strong><strong>Jane also became the defacto gatekeeper.</strong></strong>Everyone had to toe her line if they wanted to build and deploy their own features. To add to this, Allocations was pushing back and severely lagging behind, because 50-odd developers were adding and testing 10 features a day.</p><p>Before you knew it, <strong><strong>Allocations became the bottleneck to scale the org. </strong></strong>As if all that wasn’t enough, the team was not doing its own testing and experiments to make Allocations better and sharper. Things were spiralling downwards.</p><h1 id=\"a-patch-would-not-do-we-needed-a-fix\">A patch would not do, we needed a fix</h1><p>It was apparent we had to fix this problem — once and for all. The <strong><strong>‘Relationship-as-a-Service’</strong></strong> model was a disaster. <strong><strong>RaaS</strong></strong> was endemic in the org. Things were fine at a macro level, but at the base of it, we were failing.</p><p>We needed a solution that gave everyone the freedom to build and experiment. We wanted folks to think they’re building individual products from scratch without any reliance. <strong><strong>Easier said that done, right?</strong></strong></p><p>This was the genesis of Gojek’s philosophy of building a #SuperApp — a chance to build startups within a startup.</p><p>We wanted to unleash our best minds to build, and not worry about <strong><strong>RaaS.</strong></strong>After some research and consensus across the board, we were all sold on Kafka.<strong><strong> Software was going to solve our RaaS problem. Ambitious? Maybe. Pragmatic? Damn right</strong></strong>.</p><h1 id=\"forget-the-morose-writer\">Forget the morose writer</h1><p>Every team was mandated to broadcast events on Kafka. If a driver booking was made, it was sent to Kafka. If a driver completed the ride, it was sent to Kafka. Kafka became the bus that carried the millions of events happening inside Gojek.</p><p>Anything and everything individual teams did was visible to anyone and everyone inside Gojek.</p><p>If a team wanted to test features or roll out updates, they merely had to rely on Kafka. No more RaaS<strong><strong>.</strong></strong> No more long waiting periods. This unleashed the productivity of every developer. <strong><strong>The day we rolled out Kafka, we killed the gatekeeper. Information was free and accessible to all. </strong></strong>We were solving software problems, but deep down, culture was the bigger fix.</p><p>Today, we emit 350,000,000 messages on Kafka and it’s every engineers’ playground.</p><p>Our two-pizza team rule became far more efficient, and now we were solving bigger problems. This is also an example of how we look at Lean Engineering, but that’s a story for another day.</p><h1 id=\"das-urteil-but-positive-metamorphosis\">Das Urteil — But positive Metamorphosis</h1><p>‘Das Urteil’ means ‘The Judgement’, and Franz Kafka published this book in 1913. Metamorphosis was published in 1915. The latter talks about how a salesman turned into an insect and struggles to live. It’s classic Franz Kafka; deeply sad, complex and incredibly gut-wrenching.</p><p>In our case, The Judgement was of an insect metamorphosing into a butterfly. It didn’t happen overnight, but this was our tipping point. Our tech stack began to reflect organisation culture.</p><p><strong><strong>Kafka solved a critical cultural problem for us.</strong></strong> ?</p><hr><p>Liked what you read? Have our stories delivered straight to your inbox by <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">signing up for our newsletter</a>!</p>","url":"https://gojek-ghost.zysk.in/how-kafka-solved-a-culture-problem-at-gojek/","canonical_url":null,"uuid":"e542a670-4560-4afc-af69-049af2d26ac2","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb1194bf7c7da001effcc98","reading_time":4},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}},{"node":{"name":"Maps","slug":"maps"}},{"node":{"name":"Ride Hailing","slug":"ride-hailing"}},{"node":{"name":"Software Engineering","slug":"software-engineering"}},{"node":{"name":"Startup","slug":"startup"}}]}},"pageContext":{"slug":"how-kafka-solved-a-culture-problem-at-gojek"}}}